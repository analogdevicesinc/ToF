From 13601391ecfa264910238a836d3f945a4e4c5aed Mon Sep 17 00:00:00 2001
From: Sivasubramaniyan Padmanaban <sivasubramaniyan.padmanaban@analog.com>
Date: Thu, 18 Jan 2024 11:31:16 +0530
Subject: [PATCH] drivers/media/spi/adsd3500-spi.c: Send SPI write command
 before the actual data

Signed-off-by: Sivasubramaniyan Padmanaban <sivasubramaniyan.padmanaban@analog.com>
---
 drivers/media/spi/adsd3500-spi.c | 33 +++++++++++++++++++++++---------
 1 file changed, 24 insertions(+), 9 deletions(-)

diff --git a/drivers/media/spi/adsd3500-spi.c b/drivers/media/spi/adsd3500-spi.c
index ea4a39b51faa..882790b772d3 100644
--- a/drivers/media/spi/adsd3500-spi.c
+++ b/drivers/media/spi/adsd3500-spi.c
@@ -739,9 +739,6 @@ static int adsd3500_spi_read_response(struct spi_device *client, uint8_t *receiv
 		dev_err(dev, "spi_recv_resp, data length error = %d\n", ret);
 		return ret;
 	}
-	else {
-		 memcpy(receivebuff, xfer_read.rx_buf, size);
-	}
 
 	return ret;
 }
@@ -752,6 +749,9 @@ static int adsd3500_chip_config(struct adsd3500 *priv,
 {
 	struct device *dev = priv->dev;
 	struct spi_device *client = to_spi_device(dev);
+	struct spi_message message;
+	struct spi_transfer xfer_cmd, xfer_data;
+	uint8_t write_cmd = ADSD3500_SPI_WRITE_CMD;
 	uint16_t pld_size;
 	uint8_t r_w, *data;
 	int ret;
@@ -761,10 +761,6 @@ static int adsd3500_chip_config(struct adsd3500 *priv,
 	pld_size = (uint16_t)(*(ctrl->p_new.p_u8 + 1) << 8 | *(ctrl->p_new.p_u8 + 2));
 	data = ctrl->p_new.p_u8 + 3;
 
-	rx_buf = (uint8_t *)kmalloc(pld_size * sizeof(uint8_t), GFP_KERNEL);
-	if (!rx_buf)
-		return -ENOMEM;
-
 	dev_dbg(dev, "Entered adsd3500_chip_config. R/W: %d, PLD_SIZE: %d\n", r_w, pld_size);
 
 	if ((pld_size > 4096) || (pld_size < 2))
@@ -774,21 +770,40 @@ static int adsd3500_chip_config(struct adsd3500 *priv,
 		return -EINVAL;
 
 	if (r_w) {
-		ret = spi_write(client, data, pld_size);
+
+		memset(&xfer_cmd, 0x0, sizeof(struct spi_transfer));
+		memset(&xfer_data,0x0, sizeof(struct spi_transfer));
+
+		xfer_cmd.tx_buf = &write_cmd;
+		xfer_cmd.len = 1;
+
+		xfer_data.tx_buf = data;
+		xfer_data.len = pld_size;
+
+		spi_message_init(&message);
+		spi_message_add_tail(&xfer_cmd, &message);
+		spi_message_add_tail(&xfer_data,  &message);
+
+		ret = spi_sync(client, &message);
 		if (ret < 0) {
 			dev_warn(dev, "Write burst transfer failed\n");
 			return -EIO;
 		}
 	} else {
+		rx_buf = (uint8_t *)kmalloc(pld_size * sizeof(uint8_t), GFP_KERNEL);
+		if (!rx_buf)
+			return -ENOMEM;
+
 		ret = adsd3500_spi_read_response(client, rx_buf, pld_size);
 		if (ret < 0) {
 			dev_warn(dev, "Read burst transfer failed\n");
+			kfree(rx_buf);
 			return -EIO;
 		}
 		memcpy(data, rx_buf, pld_size);
+		kfree(rx_buf);
 	}
 	memset(ctrl->p_new.p_u8, 0xFF, 1);
-	kfree(rx_buf);
 
 	return 0;
 }
-- 
2.28.0

