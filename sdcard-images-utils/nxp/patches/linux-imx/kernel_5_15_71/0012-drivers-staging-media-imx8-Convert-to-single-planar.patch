From 9768071d5ce04bceb5998a2df3aad2c02aedc3fb Mon Sep 17 00:00:00 2001
From: Sriram Chappidi <Sriram.Chappidi@analog.com>
Date: Tue, 8 Oct 2024 11:19:19 +0530
Subject: [PATCH 12/13] drivers: staging: media: imx8: Convert to single planar

Signed-off-by: Sriram Chappidi <Sriram.Chappidi@analog.com>
---
 drivers/staging/media/imx/imx8-isi-cap.c  | 301 ++++++++++++----------
 drivers/staging/media/imx/imx8-isi-core.h |   4 +-
 drivers/staging/media/imx/imx8-isi-hw.c   |  15 +-
 3 files changed, 179 insertions(+), 141 deletions(-)

diff --git a/drivers/staging/media/imx/imx8-isi-cap.c b/drivers/staging/media/imx/imx8-isi-cap.c
index 6f83ba47f919..7c0a08153605 100644
--- a/drivers/staging/media/imx/imx8-isi-cap.c
+++ b/drivers/staging/media/imx/imx8-isi-cap.c
@@ -30,6 +30,7 @@
 
 #include "imx8-isi-hw.h"
 #include "imx8-common.h"
+#include "imx8-isi-core.h"
 #include "imx8-isi-fmt.h"
 
 #define sd_to_cap_dev(ptr)	container_of(ptr, struct mxc_isi_cap_dev, sd)
@@ -54,7 +55,31 @@ struct mxc_isi_fmt mxc_isi_src_formats[] = {
 		.memplanes	= 1,
 		.colplanes	= 1,
 		.align		= 2,
-	}
+	}, {
+		.name           = "YUYV",
+		.fourcc         = V4L2_PIX_FMT_YUYV,
+		.depth          = { 16 },
+		.memplanes      = 1,
+		.colplanes      = 1,
+	}, {
+		.name           = "SBGGR16",
+		.fourcc         = V4L2_PIX_FMT_SBGGR16,
+		.depth          = { 16 },
+		.memplanes      = 1,
+		.colplanes      = 1,
+	}, {
+		.name           = "SBGGR12",
+		.fourcc         = V4L2_PIX_FMT_SBGGR12,
+		.depth          = { 16 },
+		.memplanes      = 1,
+		.colplanes      = 1,
+	}, {
+		.name           = "SBGGR8",
+		.fourcc         = V4L2_PIX_FMT_SBGGR8,
+		.depth          = { 8 },
+		.memplanes      = 1,
+		.colplanes      = 1,
+ 	}
 };
 
 struct mxc_isi_fmt *mxc_isi_get_format(unsigned int index)
@@ -99,6 +124,14 @@ struct mxc_isi_fmt *mxc_isi_get_src_fmt(struct v4l2_subdev_format *sd_fmt)
 	    sd_fmt->format.code == MEDIA_BUS_FMT_UYVY8_2X8 ||
 	    sd_fmt->format.code == MEDIA_BUS_FMT_YUYV8_2X8)
 		index = 1;
+	else if (sd_fmt->format.code == MEDIA_BUS_FMT_Y12_1X12)
+		index = 2;
+	else if (sd_fmt->format.code == MEDIA_BUS_FMT_SGBRG16_1X16)
+		index = 3;
+	else if (sd_fmt->format.code == MEDIA_BUS_FMT_SBGGR12_1X12)
+		index = 4;
+	else if (sd_fmt->format.code == MEDIA_BUS_FMT_SBGGR8_1X8)
+		index = 5;
 	else
 		index = 0;
 	return &mxc_isi_src_formats[index];
@@ -206,6 +239,7 @@ void mxc_isi_cap_frame_write_done(struct mxc_isi_dev *mxc_isi)
 		buf = list_first_entry(&isi_cap->out_discard,
 				       struct mxc_isi_buffer, list);
 		buf->v4l2_buf.sequence = isi_cap->frame_count;
+		dev_dbg(dev, "Discard buffer sequence: %d\n", isi_cap->frame_count);
 		mxc_isi_channel_set_outbuf(mxc_isi, buf);
 		list_move_tail(isi_cap->out_discard.next, &isi_cap->out_active);
 		goto unlock;
@@ -231,9 +265,9 @@ static int cap_vb2_queue_setup(struct vb2_queue *q,
 			       struct device *alloc_devs[])
 {
 	struct mxc_isi_cap_dev *isi_cap = vb2_get_drv_priv(q);
-	struct v4l2_pix_format_mplane *format = &isi_cap->pix;
 	struct mxc_isi_frame *dst_f = &isi_cap->dst_f;
 	struct mxc_isi_fmt *fmt = dst_f->fmt;
+	unsigned long wh;
 	int i;
 
 	if (!fmt)
@@ -249,11 +283,16 @@ static int cap_vb2_queue_setup(struct vb2_queue *q,
 		return 0;
 	}
 
+	wh = dst_f->width * dst_f->height;
 	*num_planes = fmt->memplanes;
 
 	for (i = 0; i < fmt->memplanes; i++) {
+		unsigned int size = (wh * fmt->depth[i]) / 8;
 		alloc_devs[i] = &isi_cap->pdev->dev;
-		sizes[i] = format->plane_fmt[i].sizeimage;
+
+		if (i == 1 && fmt->fourcc == V4L2_PIX_FMT_NV12)
+			size >>= 1;
+		sizes[i] = max_t(u32, size, dst_f->sizeimage[i]);
 	}
 
 	dev_dbg(&isi_cap->pdev->dev, "%s, buf_n=%d, size=%d\n",
@@ -334,7 +373,6 @@ static int cap_vb2_start_streaming(struct vb2_queue *q, unsigned int count)
 	struct mxc_isi_buffer *buf;
 	struct vb2_buffer *vb2;
 	unsigned long flags;
-	int i, j;
 	int ret;
 
 	dev_dbg(&isi_cap->pdev->dev, "%s\n", __func__);
@@ -349,53 +387,41 @@ static int cap_vb2_start_streaming(struct vb2_queue *q, unsigned int count)
 		goto err;
 	}
 
-	/* Create a buffer for discard operation */
-	for (i = 0; i < isi_cap->pix.num_planes; i++) {
-		isi_cap->discard_size[i] = isi_cap->dst_f.sizeimage[i];
-		isi_cap->discard_buffer[i] =
+	isi_cap->discard_size[0] = isi_cap->dst_f.sizeimage[0];
+	isi_cap->discard_buffer[0] =
 			dma_alloc_coherent(&isi_cap->pdev->dev,
-					   PAGE_ALIGN(isi_cap->discard_size[i]),
-					   &isi_cap->discard_buffer_dma[i],
+					   PAGE_ALIGN(isi_cap->discard_size[0]),
+					   &isi_cap->discard_buffer_dma[0],
 					   GFP_DMA | GFP_KERNEL);
-		if (!isi_cap->discard_buffer[i]) {
-			for (j = 0; j < i; j++) {
-				dma_free_coherent(&isi_cap->pdev->dev,
-						  PAGE_ALIGN(isi_cap->discard_size[j]),
-						  isi_cap->discard_buffer[j],
-						  isi_cap->discard_buffer_dma[j]);
-				dev_err(&isi_cap->pdev->dev,
-					"alloc dma buffer(%d) fail\n", j);
-			}
-			ret = -ENOMEM;
-			goto err;
-		}
-		dev_dbg(&isi_cap->pdev->dev,
-			"%s: num_plane=%d discard_size=%d discard_buffer=%p\n"
-			, __func__, i,
-			PAGE_ALIGN((int)isi_cap->discard_size[i]),
-			isi_cap->discard_buffer[i]);
+	
+	if (!isi_cap->discard_buffer[0]) {
+		dev_err(&isi_cap->pdev->dev,
+				"alloc dma buffer(%d) fail\n", 0);
+		return -ENOMEM;
 	}
 
+	dev_dbg(&isi_cap->pdev->dev,
+			"%s: num_plane=%d discard_size=%d discard_buffer=%p\n"
+			, __func__, 0,
+			PAGE_ALIGN((int)isi_cap->discard_size[0]),
+			isi_cap->discard_buffer[0]);
+
 	spin_lock_irqsave(&isi_cap->slock, flags);
 
 	/* add two list member to out_discard list head */
 	isi_cap->buf_discard[0].discard = true;
-	vb2 = &isi_cap->buf_discard[0].v4l2_buf.vb2_buf;
-	vb2->num_planes = isi_cap->pix.num_planes;
 	list_add_tail(&isi_cap->buf_discard[0].list, &isi_cap->out_discard);
 
 	isi_cap->buf_discard[1].discard = true;
-	vb2 = &isi_cap->buf_discard[1].v4l2_buf.vb2_buf;
-	vb2->num_planes = isi_cap->pix.num_planes;
 	list_add_tail(&isi_cap->buf_discard[1].list, &isi_cap->out_discard);
 
 	/* ISI channel output buffer 1 */
-	buf = list_first_entry(&isi_cap->out_discard, struct mxc_isi_buffer, list);
+	buf = list_first_entry(&isi_cap->out_pending, struct mxc_isi_buffer, list);
 	buf->v4l2_buf.sequence = 0;
 	vb2 = &buf->v4l2_buf.vb2_buf;
 	vb2->state = VB2_BUF_STATE_ACTIVE;
 	mxc_isi_channel_set_outbuf(mxc_isi, buf);
-	list_move_tail(isi_cap->out_discard.next, &isi_cap->out_active);
+	list_move_tail(isi_cap->out_pending.next, &isi_cap->out_active);
 
 	/* ISI channel output buffer 2 */
 	buf = list_first_entry(&isi_cap->out_pending, struct mxc_isi_buffer, list);
@@ -440,7 +466,6 @@ static void cap_vb2_stop_streaming(struct vb2_queue *q)
 	struct mxc_isi_dev *mxc_isi = mxc_isi_get_hostdata(isi_cap->pdev);
 	struct mxc_isi_buffer *buf;
 	unsigned long flags;
-	int i;
 
 	dev_dbg(&isi_cap->pdev->dev, "%s\n", __func__);
 
@@ -477,11 +502,10 @@ static void cap_vb2_stop_streaming(struct vb2_queue *q)
 
 	spin_unlock_irqrestore(&isi_cap->slock, flags);
 
-	for (i = 0; i < isi_cap->pix.num_planes; i++)
-		dma_free_coherent(&isi_cap->pdev->dev,
-				  PAGE_ALIGN(isi_cap->discard_size[i]),
-				  isi_cap->discard_buffer[i],
-				  isi_cap->discard_buffer_dma[i]);
+	dma_free_coherent(&isi_cap->pdev->dev,
+			  PAGE_ALIGN(isi_cap->discard_size[0]),
+			  isi_cap->discard_buffer[0],
+			  isi_cap->discard_buffer_dma[0]);
 }
 
 static struct vb2_ops mxc_cap_vb2_qops = {
@@ -801,7 +825,7 @@ static int mxc_isi_cap_querycap(struct file *file, void *priv,
 	snprintf(cap->bus_info, sizeof(cap->bus_info), "platform:%s.%d",
 		 dev_name(&isi_cap->pdev->dev), isi_cap->id);
 
-	cap->device_caps = V4L2_CAP_STREAMING | V4L2_CAP_VIDEO_CAPTURE_MPLANE;
+	cap->device_caps = V4L2_CAP_STREAMING | V4L2_CAP_VIDEO_CAPTURE;
 	cap->capabilities = cap->device_caps | V4L2_CAP_DEVICE_CAPS;
 
 	return 0;
@@ -826,11 +850,10 @@ static int mxc_isi_cap_enum_fmt(struct file *file, void *priv,
 	return 0;
 }
 
-static int mxc_isi_cap_g_fmt_mplane(struct file *file, void *fh,
-				    struct v4l2_format *f)
+static int mxc_isi_cap_g_fmt(struct file *file, void *fh, struct v4l2_format *f)
 {
 	struct mxc_isi_cap_dev *isi_cap = video_drvdata(file);
-	struct v4l2_pix_format_mplane *pix = &f->fmt.pix_mp;
+	struct v4l2_pix_format *pix = &f->fmt.pix;
 	struct mxc_isi_frame *dst_f = &isi_cap->dst_f;
 	int i;
 
@@ -841,26 +864,18 @@ static int mxc_isi_cap_g_fmt_mplane(struct file *file, void *fh,
 	pix->field = V4L2_FIELD_NONE;
 	pix->pixelformat = dst_f->fmt->fourcc;
 	pix->colorspace = V4L2_COLORSPACE_SRGB;
-	pix->ycbcr_enc = V4L2_MAP_YCBCR_ENC_DEFAULT(pix->colorspace);
-	pix->quantization = V4L2_QUANTIZATION_FULL_RANGE;
-	pix->num_planes = dst_f->fmt->memplanes;
-
-	for (i = 0; i < pix->num_planes; ++i) {
-		pix->plane_fmt[i].bytesperline = dst_f->bytesperline[i];
-		pix->plane_fmt[i].sizeimage = dst_f->sizeimage[i];
-	}
+	pix->bytesperline = dst_f->bytesperline[0];
+	pix->sizeimage = dst_f->sizeimage[0];
 
 	return 0;
 }
 
-static int mxc_isi_cap_try_fmt_mplane(struct file *file, void *fh,
-				      struct v4l2_format *f)
+static struct mxc_isi_fmt *
+mxc_isi_cap_fmt_try(struct mxc_isi_cap_dev *isi_cap,
+		    struct v4l2_pix_format *pix)
 {
-	struct mxc_isi_cap_dev *isi_cap = video_drvdata(file);
-	struct v4l2_pix_format_mplane *pix = &f->fmt.pix_mp;
-	struct mxc_isi_fmt *fmt;
-	int bpl;
-	int i;
+	struct mxc_isi_fmt *fmt = NULL;
+	int i,bpl;
 
 	dev_dbg(&isi_cap->pdev->dev, "%s\n", __func__);
 
@@ -886,40 +901,82 @@ static int mxc_isi_cap_try_fmt_mplane(struct file *file, void *fh,
 	v4l_bound_align_image(&pix->width, 16, ISI_4K, fmt->align,
 			      &pix->height, 16, ISI_4K, 1, 0);
 
-	pix->num_planes = fmt->memplanes;
 	pix->pixelformat = fmt->fourcc;
 	pix->field = V4L2_FIELD_NONE;
 	pix->colorspace = V4L2_COLORSPACE_SRGB;
 	pix->ycbcr_enc = V4L2_MAP_YCBCR_ENC_DEFAULT(pix->colorspace);
 	pix->quantization = V4L2_QUANTIZATION_FULL_RANGE;
-	memset(pix->reserved, 0x00, sizeof(pix->reserved));
-
-	for (i = 0; i < pix->num_planes; i++) {
-		bpl = pix->plane_fmt[i].bytesperline;
-
-		if ((bpl == 0) || (bpl / (fmt->depth[i] >> 3)) < pix->width)
-			pix->plane_fmt[i].bytesperline =
-					(pix->width * fmt->depth[i]) >> 3;
-
-		if (pix->plane_fmt[i].sizeimage == 0) {
-			if ((i == 1) && (pix->pixelformat == V4L2_PIX_FMT_NV12 ||
-					 pix->pixelformat == V4L2_PIX_FMT_NV12M))
-				pix->plane_fmt[i].sizeimage =
-				  (pix->width * (pix->height >> 1) * fmt->depth[i] >> 3);
-			else
-				pix->plane_fmt[i].sizeimage =
-					(pix->width * pix->height * fmt->depth[i] >> 3);
-		}
+
+	bpl = pix->bytesperline;
+
+	if ((bpl == 0) || (bpl / (fmt->depth[0] >> 3)) < pix->width)
+		pix->bytesperline =
+			(pix->width * fmt->depth[i]) >> 3;
+
+	if (pix->sizeimage == 0) {
+		if (pix->pixelformat == V4L2_PIX_FMT_NV12)
+			pix->sizeimage =
+				(pix->width * (pix->height >> 1) * fmt->depth[0] >> 3);
+		else
+			pix->sizeimage =
+				(pix->width * pix->height * fmt->depth[0] >> 3);
 	}
 
-	if (fmt->colplanes != fmt->memplanes) {
-		for (i = 1; i < fmt->colplanes; ++i) {
-			struct v4l2_plane_pix_format *plane = &pix->plane_fmt[i];
+	return fmt;
+}
 
-			pix->plane_fmt[0].sizeimage += plane->sizeimage;
-			plane->bytesperline = 0;
-			plane->sizeimage = 0;
-		}
+static int mxc_isi_cap_try_fmt(struct file *file, void *fh,
+				      struct v4l2_format *f)
+{
+	struct mxc_isi_cap_dev *isi_cap = video_drvdata(file);
+	struct v4l2_pix_format *pix = &f->fmt.pix;
+	struct mxc_isi_fmt *fmt;
+	int i, bpl;
+
+	dev_dbg(&isi_cap->pdev->dev, "%s\n", __func__);
+
+	for (i = 0; i < mxc_isi_out_formats_size; i++) {
+		fmt = &mxc_isi_out_formats[i];
+		if (fmt->fourcc == pix->pixelformat)
+			break;
+	}
+
+	if (i >= mxc_isi_out_formats_size) {
+		v4l2_err(&isi_cap->sd, "format(%.4s) is not support!\n",
+				(char *)&pix->pixelformat);
+		return -EINVAL;
+	}
+
+	if (pix->width <= 0 || pix->height <= 0) {
+		v4l2_err(&isi_cap->sd, "%s, W/H=(%d, %d) is not valid\n"
+				, __func__, pix->width, pix->height);
+		return -EINVAL;
+	}
+
+	if (pix->width > ISI_4K)
+		pix->width = ISI_4K;
+	if (pix->height > ISI_8K)
+		pix->height = ISI_8K;
+
+	pix->pixelformat = fmt->fourcc;
+	pix->field = V4L2_FIELD_NONE;
+	pix->colorspace = V4L2_COLORSPACE_SRGB;
+	pix->ycbcr_enc = V4L2_MAP_YCBCR_ENC_DEFAULT(pix->colorspace);
+	pix->quantization = V4L2_QUANTIZATION_FULL_RANGE;
+
+	bpl = pix->bytesperline;
+
+	if ((bpl == 0) || (bpl / (fmt->depth[0] >> 3)) < pix->width)
+		pix->bytesperline =
+			(pix->width * fmt->depth[i]) >> 3;
+
+	if (pix->sizeimage == 0) {
+		if (pix->pixelformat == V4L2_PIX_FMT_NV12)
+			pix->sizeimage =
+				(pix->width * (pix->height >> 1) * fmt->depth[0] >> 3);
+		else
+			pix->sizeimage =
+				(pix->width * pix->height * fmt->depth[0] >> 3);
 	}
 
 	return 0;
@@ -948,7 +1005,7 @@ static int mxc_isi_source_fmt_init(struct mxc_isi_cap_dev *isi_cap)
 
 	src_fmt.pad = source_pad->index;
 	src_fmt.which = V4L2_SUBDEV_FORMAT_ACTIVE;
-	src_fmt.format.code = MEDIA_BUS_FMT_UYVY8_2X8;
+	src_fmt.format.code = dst_f->fmt->mbus_code;
 	src_fmt.format.width = dst_f->width;
 	src_fmt.format.height = dst_f->height;
 	ret = v4l2_subdev_call(src_sd, pad, set_fmt, NULL, &src_fmt);
@@ -983,11 +1040,11 @@ static int mxc_isi_source_fmt_init(struct mxc_isi_cap_dev *isi_cap)
 	return 0;
 }
 
-static int mxc_isi_cap_s_fmt_mplane(struct file *file, void *priv,
+static int mxc_isi_cap_s_fmt(struct file *file, void *priv,
 				    struct v4l2_format *f)
 {
 	struct mxc_isi_cap_dev *isi_cap = video_drvdata(file);
-	struct v4l2_pix_format_mplane *pix = &f->fmt.pix_mp;
+	struct v4l2_pix_format *pix = &f->fmt.pix;
 	struct mxc_isi_frame *dst_f = &isi_cap->dst_f;
 	struct mxc_isi_fmt *fmt;
 	int bpl;
@@ -1006,6 +1063,7 @@ static int mxc_isi_cap_s_fmt_mplane(struct file *file, void *priv,
 	if (vb2_is_busy(&isi_cap->vb2_q))
 		return -EBUSY;
 
+	/* Check out put format */
 	for (i = 0; i < mxc_isi_out_formats_size; i++) {
 		fmt = &mxc_isi_out_formats[i];
 		if (fmt->fourcc == pix->pixelformat)
@@ -1013,52 +1071,33 @@ static int mxc_isi_cap_s_fmt_mplane(struct file *file, void *priv,
 	}
 
 	if (i >= mxc_isi_out_formats_size) {
-		fmt = &mxc_isi_out_formats[0];
-		v4l2_warn(&isi_cap->sd, "Not match format, set default\n");
+		dev_dbg(&isi_cap->pdev->dev,
+				"format(%.4s) is not support!\n", (char *)&pix->pixelformat);
+		return -EINVAL;
 	}
 
-	ret = mxc_isi_cap_try_fmt_mplane(file, priv, f);
-	if (ret)
-		return ret;
+	/* update out put frame size and formate */
+	if (pix->height <= 0 || pix->width <= 0)
+		return -EINVAL;
+
+	fmt = mxc_isi_cap_fmt_try(isi_cap, pix);
+	if (!fmt)
+		fmt = &mxc_isi_out_formats[0];
 
 	dst_f->fmt = fmt;
 	dst_f->height = pix->height;
 	dst_f->width = pix->width;
 
-	pix->num_planes = fmt->memplanes;
-
-	for (i = 0; i < fmt->colplanes; i++) {
-		bpl = pix->plane_fmt[i].bytesperline;
-
-		if ((bpl == 0) || (bpl / (fmt->depth[i] >> 3)) < pix->width)
-			pix->plane_fmt[i].bytesperline =
-					(pix->width * fmt->depth[i]) >> 3;
-
-		if (pix->plane_fmt[i].sizeimage == 0) {
-			if ((i == 1) && (pix->pixelformat == V4L2_PIX_FMT_NV12 ||
-					 pix->pixelformat == V4L2_PIX_FMT_NV12M))
-				pix->plane_fmt[i].sizeimage =
-				  (pix->width * (pix->height >> 1) * fmt->depth[i] >> 3);
-			else
-				pix->plane_fmt[i].sizeimage =
-					(pix->width * pix->height * fmt->depth[i] >> 3);
-		}
-	}
+	bpl = pix->bytesperline;
 
-	if (fmt->colplanes != fmt->memplanes) {
-		for (i = 1; i < fmt->colplanes; ++i) {
-			struct v4l2_plane_pix_format *plane = &pix->plane_fmt[i];
+	if ((bpl == 0) || (bpl / (fmt->depth[0] >> 3)) < pix->width)
+		pix->bytesperline = (pix->width * fmt->depth[0]) >> 3;
 
-			pix->plane_fmt[0].sizeimage += plane->sizeimage;
-			plane->bytesperline = 0;
-			plane->sizeimage = 0;
-		}
-	}
+	if (pix->sizeimage == 0)
+		pix->sizeimage = (pix->width * pix->height * fmt->depth[0] >> 3);
 
-	for (i = 0; i < pix->num_planes; i++) {
-		dst_f->bytesperline[i] = pix->plane_fmt[i].bytesperline;
-		dst_f->sizeimage[i]    = pix->plane_fmt[i].sizeimage;
-	}
+	dst_f->bytesperline[0] = dst_f->width * dst_f->fmt->depth[0] / 8;
+	dst_f->sizeimage[0]    = dst_f->height * dst_f->bytesperline[0];
 
 	memcpy(&isi_cap->pix, pix, sizeof(*pix));
 	set_frame_bounds(dst_f, pix->width, pix->height);
@@ -1198,8 +1237,7 @@ static int mxc_isi_cap_g_selection(struct file *file, void *fh,
 
 	dev_dbg(&isi_cap->pdev->dev, "%s\n", __func__);
 
-	if (s->type != V4L2_BUF_TYPE_VIDEO_OUTPUT &&
-	    s->type != V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE)
+	if (s->type != V4L2_BUF_TYPE_VIDEO_OUTPUT)
 		return -EINVAL;
 
 	switch (s->target) {
@@ -1245,8 +1283,7 @@ static int mxc_isi_cap_s_selection(struct file *file, void *fh,
 	unsigned long flags;
 
 	dev_dbg(&isi_cap->pdev->dev, "%s\n", __func__);
-	if (s->type != V4L2_BUF_TYPE_VIDEO_OUTPUT &&
-	    s->type != V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE)
+	if (s->type != V4L2_BUF_TYPE_VIDEO_OUTPUT)
 		return -EINVAL;
 
 	if (s->target == V4L2_SEL_TGT_COMPOSE)
@@ -1374,9 +1411,9 @@ static const struct v4l2_ioctl_ops mxc_isi_capture_ioctl_ops = {
 	.vidioc_querycap		= mxc_isi_cap_querycap,
 
 	.vidioc_enum_fmt_vid_cap	= mxc_isi_cap_enum_fmt,
-	.vidioc_try_fmt_vid_cap_mplane	= mxc_isi_cap_try_fmt_mplane,
-	.vidioc_s_fmt_vid_cap_mplane	= mxc_isi_cap_s_fmt_mplane,
-	.vidioc_g_fmt_vid_cap_mplane	= mxc_isi_cap_g_fmt_mplane,
+	.vidioc_try_fmt_vid_cap		= mxc_isi_cap_try_fmt,
+	.vidioc_s_fmt_vid_cap		= mxc_isi_cap_s_fmt,
+	.vidioc_g_fmt_vid_cap		= mxc_isi_cap_g_fmt,
 
 	.vidioc_reqbufs			= vb2_ioctl_reqbufs,
 	.vidioc_querybuf		= vb2_ioctl_querybuf,
@@ -1683,7 +1720,7 @@ static int mxc_isi_register_cap_device(struct mxc_isi_cap_dev *isi_cap,
 	vdev->queue	= q;
 	vdev->lock	= &isi_cap->lock;
 
-	vdev->device_caps = V4L2_CAP_STREAMING | V4L2_CAP_VIDEO_CAPTURE_MPLANE;
+	vdev->device_caps = V4L2_CAP_STREAMING | V4L2_CAP_VIDEO_CAPTURE;
 	video_set_drvdata(vdev, isi_cap);
 
 	INIT_LIST_HEAD(&isi_cap->out_pending);
@@ -1691,7 +1728,7 @@ static int mxc_isi_register_cap_device(struct mxc_isi_cap_dev *isi_cap,
 	INIT_LIST_HEAD(&isi_cap->out_discard);
 
 	memset(q, 0, sizeof(*q));
-	q->type = V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE;
+	q->type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
 	q->io_modes = VB2_MMAP | VB2_DMABUF;
 	q->drv_priv = isi_cap;
 	q->ops = &mxc_cap_vb2_qops;
diff --git a/drivers/staging/media/imx/imx8-isi-core.h b/drivers/staging/media/imx/imx8-isi-core.h
index 911b23698319..207ed41d683c 100644
--- a/drivers/staging/media/imx/imx8-isi-core.h
+++ b/drivers/staging/media/imx/imx8-isi-core.h
@@ -42,7 +42,7 @@
 #define MXC_ISI_DRIVER_NAME	"mxc-isi"
 #define MXC_ISI_CAPTURE		"mxc-isi-cap"
 #define MXC_ISI_M2M		"mxc-isi-m2m"
-#define MXC_MAX_PLANES		3
+#define MXC_MAX_PLANES		1
 
 struct mxc_isi_dev;
 
@@ -300,7 +300,7 @@ struct mxc_isi_cap_dev {
 	struct video_device vdev;
 	struct v4l2_fh      fh;
 	struct vb2_queue    vb2_q;
-	struct v4l2_pix_format_mplane pix;
+	struct v4l2_pix_format pix;
 
 	struct mxc_isi_dev     *mxc_isi;
 	struct platform_device *pdev;
diff --git a/drivers/staging/media/imx/imx8-isi-hw.c b/drivers/staging/media/imx/imx8-isi-hw.c
index 193ff5c5fd33..3ae66486a723 100644
--- a/drivers/staging/media/imx/imx8-isi-hw.c
+++ b/drivers/staging/media/imx/imx8-isi-hw.c
@@ -205,15 +205,16 @@ void mxc_isi_channel_set_outbuf(struct mxc_isi_dev *mxc_isi,
 	u32 framecount = buf->v4l2_buf.sequence;
 	dma_addr_t *dma_addrs = buf->dma_addrs;
 	struct mxc_isi_cap_dev *isi_cap = mxc_isi->isi_cap;
-	int val = 0, i;
+	struct v4l2_pix_format *pix;
+	int val = 0;
 
-	for (i = 0; i < vb2_buf->num_planes; ++i) {
-		if (buf->discard)
-			dma_addrs[i] = isi_cap->discard_buffer_dma[i];
-		else
-			dma_addrs[i] = vb2_dma_contig_plane_dma_addr(vb2_buf, i);
+	if (buf->discard){
+		pix = &isi_cap->pix;
+		dma_addrs[0] = isi_cap->discard_buffer_dma[0];
 	}
-
+	else
+		dma_addrs[0] = vb2_dma_contig_plane_dma_addr(vb2_buf, 0);
+ 
 	val = readl(mxc_isi->regs + CHNL_OUT_BUF_CTRL);
 
 	if (framecount == 0 || ((is_buf_active(mxc_isi, 2)) && (framecount != 1))) {
-- 
2.28.0

