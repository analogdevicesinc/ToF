From d793fd782ddc473beffdd91930afdc4ffaa8c7a6 Mon Sep 17 00:00:00 2001
From: Sivasubramaniyan Padmanaban <sivasubramaniyan.padmanaban@analog.com>
Date: Mon, 12 Aug 2024 16:45:07 +0530
Subject: [PATCH] drivers: media: spi: adsd3500-spi.c: Read ACK data after
 writing the header and payload data

Signed-off-by: Sivasubramaniyan Padmanaban <sivasubramaniyan.padmanaban@analog.com>
---
 drivers/media/spi/adsd3500-spi.c | 45 +++++++++++++++++++++++++++++---
 1 file changed, 42 insertions(+), 3 deletions(-)

diff --git a/drivers/media/spi/adsd3500-spi.c b/drivers/media/spi/adsd3500-spi.c
index d540046b2a74..ac3f3dd7ddbe 100644
--- a/drivers/media/spi/adsd3500-spi.c
+++ b/drivers/media/spi/adsd3500-spi.c
@@ -1506,6 +1506,30 @@ static int adsd3500_parse_dt(struct adsd3500 *priv){
 	return 0;
 }
 
+static int adsd3500_read_ack(struct v4l2_subdev *sd){
+
+	struct adsd3500 *adsd3500 = to_adsd3500(sd);
+	struct device *dev = adsd3500->dev;
+	struct spi_device *client = to_spi_device(dev);
+	uint8_t read_val[4];
+	int ret;
+
+	ret = adsd3500_spi_read_response(client, read_val, sizeof(read_val));
+	if (ret < 0) {
+		dev_err(adsd3500->dev, "Read ACK cmd failed.\n");
+		return -EIO;
+	}
+	else{
+		if(read_val[0] != 0x0B){
+			dev_err(adsd3500->dev, "ACK ERROR response d0: %02X  d1: %02X d2: %02X d3: %02X\n", read_val[0], read_val[1], read_val[2], read_val[3]);
+			return -ENXIO;
+		}
+		dev_dbg(adsd3500->dev, "ACK Received\n");
+	}
+
+	return 0;
+}
+
 static int adsd3500_send_host_boot_data(struct v4l2_subdev *sd, uint8_t* data, int size)
 {
 	struct adsd3500 *adsd3500 = to_adsd3500(sd);
@@ -1546,9 +1570,18 @@ static int adsd3500_send_host_boot_data(struct v4l2_subdev *sd, uint8_t* data, i
 		dev_dbg(adsd3500->dev, "Send Header data\n");
 		ret = spi_write(client, header_packet, HEADER_SIZE_IN_BYTES + 1);
 		if (ret < 0) {
-			dev_err(adsd3500->dev, "Failed to write the header packet of segment %d\n", curr_segment);
+			dev_err(adsd3500->dev, "Failed to write the header packet of segment %d\n", curr_segment + 1);
 			return -EIO;
 		}
+		if(header_packet[04] == 0x55){
+			dev_info(adsd3500->dev, "Firmware transfer Compelete\n");
+			break;
+		}
+		ret = adsd3500_read_ack(sd);
+		if(ret < 0) {
+			dev_err(adsd3500->dev, "Failed to read the acknowledgement header packet segment: %d\n", curr_segment + 1);
+			return -ENXIO;
+		}
 		msleep(5);
 
 		if(segment_size[curr_segment] != 0){
@@ -1558,11 +1591,17 @@ static int adsd3500_send_host_boot_data(struct v4l2_subdev *sd, uint8_t* data, i
 			dev_dbg(adsd3500->dev, "Send Payload data\n");
 			ret = spi_write(client, data_packet, segment_size[curr_segment] + 1);
 			if (ret < 0) {
-				dev_err(adsd3500->dev, "Failed to write the payload data of segment %d\n",curr_segment);
+				dev_err(adsd3500->dev, "Failed to write the payload data of segment %d\n",curr_segment + 1);
 				return -EIO;
 			}
+			msleep(5);
+			ret = adsd3500_read_ack(sd);
+			if(ret < 0) {
+				dev_err(adsd3500->dev, "Failed to read the acknowledgement payload data segment: %d\n", curr_segment + 1);
+				return -ENXIO;
+			}
 		}
-		msleep(5);
+		msleep(1);
 
 		memset(header_packet, 0, sizeof(header_packet));
 		memset(data_packet, 0, PAYLOAD_MAX_CHUNK_SIZE * sizeof(uint8_t));
-- 
2.28.0

