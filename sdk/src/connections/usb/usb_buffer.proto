syntax = "proto3";

package usb_payload;

enum Status   // This must match precisely the Status list from status_definitions.h
{
  OK = 0;
  BUSY = 1;
  UNREACHABLE = 2;
  INVALID_ARGUMENT = 3;
  UNAVAILABLE = 4;
  GENERIC_ERROR = 5;
}

enum FunctionName
{
  SEARCH_SENSORS = 0;
  GET_AVAILABLE_FRAME_TYPES = 1;
  SET_FRAME_TYPE = 2;
  READ_REGISTERS = 3;
  WRITE_REGISTERS = 4;
  GET_AVAILABLE_CONTROLS = 5;
  SET_CONTROL = 6;
  GET_CONTROL = 7;
  ADSD3500_READ_CMD = 8;
  ADSD3500_WRITE_CMD = 9;
  ADSD3500_READ_PAYLOAD_CMD = 10;
  ADSD3500_WRITE_PAYLOAD_CMD = 11;
  ADSD3500_WRITE_PAYLOAD = 12;
  STORAGE_OPEN = 13;
  STORAGE_READ = 14;
  STORAGE_WRITE = 15;
  STORAGE_CLOSE = 16;
  STORAGE_READ_CAPACITY = 17;
}

message ImagerInfo
{
  string name = 10;
}

message StorageInfo
{
  string name = 10;
  int32 id = 20;
}

message TemperatureSensorInfo
{
  string name = 10;
  int32 id = 20;
}

message SensorsInfo
{
  repeated StorageInfo storages = 10;               // Information about available storages
  repeated TemperatureSensorInfo temp_sensors = 20; // Information about available temperature sensors
  ImagerInfo image_sensors = 30;                  // Information abouth available depth sensors
}

message DepthSensorFrameContent
{
  string type = 10;
  uint32 width = 20;
  uint32 height = 30;
}

message DepthSensorFrameType
{
  string type = 10;
  repeated DepthSensorFrameContent depthSensorFrameContent = 20;
  uint32 width = 30;
  uint32 height = 40;
}

message DepthSensorFrameTypeVector
{
  repeated DepthSensorFrameType depthSensorFrameTypes = 10;
}

message ClientRequest
{
  FunctionName func_name = 10;             // Name of an API function
  repeated int32 func_int32_param = 20;    // List of function parameters of type int32
  repeated float func_float_param = 30;    // List of function parameters of type float
  repeated bytes func_bytes_param = 40;    // List of function parameters of type byte-array
  repeated string func_strings_param = 45; // List of function parameters of type string
  DepthSensorFrameType frame_type = 50;    // Frame type information
}

message ServerResponse
{
  Status status = 10;                                        // Status of operation requested by the client request
  repeated int32 int32_payload = 20;                         // List of structures of type int32 for transporting data back to client
  repeated float float_payload = 30;                         // List of structures of type float for transporting data back to client
  repeated bytes bytes_payload = 40;                         // List of structures of type byte-array for transporting data back to client
  repeated string strings_payload = 45;                      // List of strings for transporting data back to client
  DepthSensorFrameTypeVector available_frame_types = 50;     // List of supported frame types
  SensorsInfo sensors_info = 60;                             // List of information about existing devices on the same platform as the server
  string message = 70;                                       // Additional message (if any)
}
