import { h, Host, } from '@stencil/core';
const DEFAULT_SCROLL_POSITION = 0;
const MODAL_OPEN_CLASSNAME = 'modal-open';
/**
 * @slot modal-header - slot="modal-header" is used to pass header content to the Modal.
 * @slot - An unnamed slot is used to pass a main content to the Modal.
 * @slot modal-footer - slot="modal-footer" is used to pass footer content to the Modal.
 */
export class HmcModal {
  constructor() {
    this.isOpen = undefined;
    this.isFullScreen = false;
    this.overlayDismiss = true;
    this.density = 'low';
    this.scrollY = DEFAULT_SCROLL_POSITION;
    this.hasHeader = false;
    this.hasFooter = false;
    this.label = undefined;
  }
  componentWillLoad() {
    var _a;
    this.hasHeader = !!this.el.querySelector('[slot="modal-header"]');
    this.hasFooter = !!this.el.querySelector('[slot="modal-footer"]');
    // Try to add an aria-label for the modal
    this.label =
      this.el.ariaLabel ||
        ((_a = this.el.querySelector('hmc-container-header')) === null || _a === void 0 ? void 0 : _a.heading) ||
        '';
  }
  disconnectedCallback() {
    this.removeClassModalOpen();
  }
  watchHandler(value) {
    if (value) {
      this.scrollY = window.scrollY;
      // disable body scroll when modal is open
      document.body.classList.add(MODAL_OPEN_CLASSNAME);
      // extra requirements for IOS base devises
      // https://css-tricks.com/prevent-page-scrolling-when-a-modal-is-open/
      document.body.style.top = `-${this.scrollY}px`;
    }
    else {
      this.removeClassModalOpen();
    }
  }
  overlayClickHandler() {
    this.overlayDismiss && this.handleModalClose();
  }
  onKeydown(ev) {
    if (this.isOpen && (ev.code === 'Esc' || ev.code === 'Escape')) {
      ev.preventDefault();
      this.modalCloseRequest.emit();
    }
  }
  handleModalClose() {
    this.modalCloseRequest.emit();
  }
  removeClassModalOpen() {
    if (!document.body.classList.contains(MODAL_OPEN_CLASSNAME)) {
      return;
    }
    document.body.classList.remove(MODAL_OPEN_CLASSNAME);
    document.body.style.top = '';
    window.scrollTo({ top: this.scrollY });
  }
  wrapFocus(ev, focusTrapEl) {
    if (ev.relatedTarget !== this._startTrapRef &&
      ev.relatedTarget !== this._endTrapRef) {
      ev.preventDefault();
      focusTrapEl.focus();
    }
  }
  render() {
    const { isOpen, isFullScreen, hasHeader, hasFooter, density, label } = this;
    const rootClass = {
      'modal-container': true,
      'medium-density': density === 'medium',
      'fullscreen': isFullScreen,
      'no-header-content': !hasHeader,
      'no-footer-content': !hasFooter,
    };
    return (h(Host, null, h("hmc-modal-overlay", { isOpen: isOpen }, h("a", { id: "start-trap", href: "javascript:void 0", role: "navigation", ref: el => (this._startTrapRef = el), onFocusin: ev => this.wrapFocus(ev, this._endTrapRef) }), h("div", { class: rootClass, role: "dialog", "aria-modal": "true", "aria-label": label }, h("div", { class: "p-x" }, h("div", { class: "modal-header" }, hasHeader && h("slot", { name: "modal-header" }), h("hmc-button", { class: "close-icon", kind: "ghost", size: "sm", "icon-only": true, onClick: () => this.handleModalClose() }, h("hmc-icon", { name: "close-m" })))), h("div", { class: "modal-content" }, h("slot", null)), hasFooter && (h("div", { class: "p-x" }, h("div", { class: "modal-footer" }, h("slot", { name: "modal-footer" }))))), h("a", { id: "end-trap", href: "javascript:void 0", role: "navigation", ref: el => (this._endTrapRef = el), onFocusin: ev => this.wrapFocus(ev, this._startTrapRef) }))));
  }
  static get is() { return "hmc-modal"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["modal.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modal.css"]
    };
  }
  static get properties() {
    return {
      "isOpen": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies isOpen prop for both modal and overlay.\nDefault: false"
        },
        "attribute": "open",
        "reflect": false
      },
      "isFullScreen": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies isFullScreen prop that set full screen size of modal.\nDefault: false"
        },
        "attribute": "full-screen",
        "reflect": false,
        "defaultValue": "false"
      },
      "overlayDismiss": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If 'true', the modal will request to be dismissed when the overlay is clicked.\nDefault: true"
        },
        "attribute": "overlay-dismiss",
        "reflect": false,
        "defaultValue": "true"
      },
      "density": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'medium' | 'low'",
          "resolved": "\"low\" | \"medium\"",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "Specifies the density of information in the header. Similar to the size prop in other components.\nSpecifying 'medium' will display a smaller padding allowing more information to be conveyed.\nDefault: 'low'"
        },
        "attribute": "density",
        "reflect": false,
        "defaultValue": "'low'"
      }
    };
  }
  static get states() {
    return {
      "scrollY": {},
      "hasHeader": {},
      "hasFooter": {},
      "label": {}
    };
  }
  static get events() {
    return [{
        "method": "modalCloseRequest",
        "name": "modalCloseRequest",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "'modalCloseRequest' event emitted when user click on overlay or close icon."
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "isOpen",
        "methodName": "watchHandler"
      }];
  }
  static get listeners() {
    return [{
        "name": "overlayClick",
        "method": "overlayClickHandler",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "keydown",
        "method": "onKeydown",
        "target": "document",
        "capture": false,
        "passive": false
      }];
  }
}
