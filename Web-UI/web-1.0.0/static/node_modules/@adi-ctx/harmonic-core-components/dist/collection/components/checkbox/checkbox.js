import { Host, h, } from '@stencil/core';
import { renderHiddenInput } from '../../utils/utils';
import Checkmark from '../assets/icons/categories/2.commonActions/check-m.svg';
export class HmcCheckbox {
  constructor() {
    this.onClick = (ev) => {
      ev.preventDefault();
      this.setFocus();
      this.isChecked = !this.isChecked;
      this.changed.emit({ checked: this.isChecked });
    };
    this.label = undefined;
    this.isChecked = false;
    this.isDisabled = false;
    this.isReadonly = false;
    this.size = 'md';
    this.name = undefined;
    this.value = 'on';
  }
  setFocus() {
    if (this.focusEl) {
      this.focusEl.focus();
    }
  }
  render() {
    const { isDisabled, isChecked, isReadonly, label, size, name, value, } = this;
    renderHiddenInput(this.el, name, isDisabled, this.isChecked ? this.value : '');
    const containerClass = {
      container: true,
      disabled: isDisabled,
      [size]: true,
    };
    const checkboxClass = {
      checkbox: true,
      disabled: isDisabled,
      checked: isChecked,
    };
    const checkmarkClass = {
      checkmark: true,
      transparent: !isChecked,
    };
    return (h(Host, { onClick: this.onClick, class: { disabled: isDisabled, readonly: isReadonly }, tabindex: isDisabled ? -1 : 0 }, h("div", { class: containerClass }, h("div", { class: checkboxClass }, h("div", { class: checkmarkClass, innerHTML: Checkmark })), h("label", { htmlFor: "hmc-checkbox" }, label), h("input", { type: "checkbox", "aria-checked": `${isChecked}`, disabled: isDisabled, id: 'hmc-checkbox', tabindex: "-1", ref: focusEl => (this.focusEl = focusEl) }))));
  }
  static get is() { return "hmc-checkbox"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["checkbox.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["checkbox.css"]
    };
  }
  static get properties() {
    return {
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set checkbox label."
        },
        "attribute": "label",
        "reflect": false
      },
      "isChecked": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If `true`, indicates that this checkbox is selected.\nDefault: `false`."
        },
        "attribute": "checked",
        "reflect": false,
        "defaultValue": "false"
      },
      "isDisabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies 'disabled' state of the checkbox.\nDefault, `false`."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "isReadonly": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies the readonly attribute of the checkbox. In this mode, the checked\nstatus of the checkbox is controlled by the isChecked prop and user interaction\nis disabled. Unlike the disabled state, the look does not change and the inner input is not disabled.\nDefault, `false`."
        },
        "attribute": "readonly",
        "reflect": false,
        "defaultValue": "false"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "CheckboxSize",
          "resolved": "\"md\" | \"xs\"",
          "references": {
            "CheckboxSize": {
              "location": "import",
              "path": "../type/size.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies size of component, reflected in label font.\nDefault: \"md\"."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'md'"
      },
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The name of the control, which is submitted with the form data."
        },
        "attribute": "name",
        "reflect": false
      },
      "value": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "any | null",
          "resolved": "any",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The value of the checkbox does not mean if it's checked or not, use the `isChecked`\nproperty for that.\n\nThe value of a checkbox is analogous to the value of an `<input type=\"checkbox\">`,\nit's only used when the checkbox participates in a native `<form>`."
        },
        "attribute": "value",
        "reflect": false,
        "defaultValue": "'on'"
      }
    };
  }
  static get events() {
    return [{
        "method": "changed",
        "name": "changed",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the checked property has changed\nand its current status is passed as a param."
        },
        "complexType": {
          "original": "{ checked: boolean }",
          "resolved": "{ checked: boolean; }",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
}
