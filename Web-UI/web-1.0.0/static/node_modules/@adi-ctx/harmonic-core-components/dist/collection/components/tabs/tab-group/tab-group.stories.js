import { html } from 'lit-html';

import tabPanelReadme from '../tab-panel/readme.md';
import tabReadme from '../tab/readme.md';

import tabGroupReadme from './readme.md';
import documentation from './tab-group-documentation.mdx';

export default {
  title: 'Components/Tabs',
  parameters: {
    notes: {
      'Tab Group': tabGroupReadme,
      'Tab': tabReadme,
      'Tab Panel': tabPanelReadme,
    },
    docs: {
      page: documentation,
    },
  },
  argTypes: {},
};

const style = html`
  <style>
    .content {
      display: flex;
      font-family: Inter, san-serif;
      font-size: var(--font-size-default);
      height: 150px;
      width: 100%;
      align-items: center;
      justify-content: center;
      background: var(--hmc-color-layout-canvas);
      color: var(--hmc-color-content-default);
    }
  </style>
`;

const Template = ({ isDisabled, isFullWidth, size, onTabSelected }) => {
  return html`
    ${style}
    <div>
      <hmc-tab-group @tabSelected=${onTabSelected}>
        <hmc-tab
          panel="tab1"
          disabled=${isDisabled}
          size=${size}
          full-width=${isFullWidth}
          selected
        >
          Tab 1 label
        </hmc-tab>
        <hmc-tab
          panel="tab2"
          disabled="true"
          size=${size}
          full-width=${isFullWidth}
        >
          Tab 2 label (disabled)
        </hmc-tab>
        <hmc-tab panel="tab3" size=${size} full-width=${isFullWidth}>
          Tab 3 label
        </hmc-tab>
        <hmc-tab panel="tab4" size=${size} full-width=${isFullWidth}>
          <hmc-icon
            slot="icon"
            name="placeholder-${size === 'xs' ? 's' : 'm'}"
          ></hmc-icon>
          Tab 4 label
        </hmc-tab>
        <hmc-tab-panel name="tab1" slot="panel" selected>
          <div class="content">Tab 1 Content</div>
        </hmc-tab-panel>
        <hmc-tab-panel name="tab2" slot="panel">
          <div class="content">Tab 2 Content</div>
        </hmc-tab-panel>
        <hmc-tab-panel name="tab3" slot="panel">
          <div class="content">Tab 3 Content</div>
        </hmc-tab-panel>
        <hmc-tab-panel name="tab4" slot="panel">
          <div class="content">Tab 4 Content</div>
        </hmc-tab-panel>
      </hmc-tab-group>
    </div>
  `;
};
export const Playground = Template.bind({});
Playground.args = {
  size: 'md',
  isDisabled: false,
  isFullWidth: false,
};
Playground.argTypes = {
  size: {
    control: {
      type: 'inline-radio',
      options: ['xs', 'sm', 'md'],
    },
  },
  onTabSelected: {
    action: 'tabSelected',
  },
};
export const Sizes = ({ isFullWidth, isDisabled, isSelected }) => {
  return html` <style>
      .flex {
        display: flex;
        gap: 16px;
        align-items: flex-end;
      }
    </style>
    <div class="flex">
      <hmc-tab
        panel="tab1"
        disabled=${isDisabled}
        size="md"
        full-width=${isFullWidth}
        selected=${isSelected}
        >Medium</hmc-tab
      >
      <hmc-tab
        panel="tab2"
        disabled=${isDisabled}
        size="sm"
        full-width=${isFullWidth}
        selected=${isSelected}
        >Small</hmc-tab
      ><hmc-tab
        panel="tab3"
        disabled=${isDisabled}
        size="xs"
        full-width=${isFullWidth}
        selected=${isSelected}
        >Extra small</hmc-tab
      >
    </div>`;
};
Sizes.args = {
  isDisabled: false,
  isFullWidth: false,
  isSelected: true,
};

const TAB_IS_ACTIVE = [false, true];

export const States = ({ isFullWidth, slottedIcon }) => {
  const renderSegmentTypes = () => {
    return html`
      ${TAB_IS_ACTIVE.map(isActive => {
        return html`
          <hmc-tab
            panel="tab1"
            disabled="false"
            size="md"
            full-width=${isFullWidth}
            selected=${isActive}
            >${slottedIcon
              ? html`<hmc-icon slot="icon" name="placeholder-m"></hmc-icon>`
              : ''}
            Idle ${isActive ? 'active' : 'inactive'}</hmc-tab
          >
          <hmc-tab
            panel="tab2"
            disabled="false"
            size="md"
            full-width=${isFullWidth}
            selected=${isActive}
            class="hovered"
            >${slottedIcon
              ? html`<hmc-icon slot="icon" name="placeholder-m"></hmc-icon>`
              : ''}
            Hover ${isActive ? 'active' : 'inactive'}</hmc-tab
          ><hmc-tab
            panel="tab3"
            disabled="true"
            size="md"
            full-width=${isFullWidth}
            selected=${isActive}
            >${slottedIcon
              ? html`<hmc-icon slot="icon" name="placeholder-m"></hmc-icon>`
              : ''}
            Disabled ${isActive ? 'active' : 'inactive'}</hmc-tab
          >
        `;
      })}
    `;
  };

  return html`
    <style>
      .tab-grid {
        width: 100%;
        display: grid;
        gap: 16px;
        grid-template-columns: repeat(3, minmax(64px, 1fr));
      }
    </style>
    <div class="tab-grid">${renderSegmentTypes()}</div>
  `;
};
States.args = {
  isFullWidth: false,
  slottedIcon: true,
};
