import { h, Host, } from '@stencil/core';
import { renderHiddenInput } from '../../utils/utils';
const FIELD_ID = 'hmc-input-id';
/**
 * @slot prefix - This slot is used to pass an Icon or other content to the Input appearing before the form field.
 * @slot suffix - This slot is used to pass an Icon or other content to the Input appearing after the form field.
 * @slot hint - slot="hint" is used to pass a hint component. It will be rendered next to a label and if the label
 * prop was passed.
 */
export class HmcInputField {
  constructor() {
    this._hasPrefix = false;
    this._hasSuffix = false;
    this.onBlur = event => {
      this.hmcBlur.emit(event);
    };
    this.onFocus = event => {
      this.hmcFocus.emit(event);
    };
    this.name = undefined;
    this.value = '';
    this.label = '';
    this.isDisabled = false;
    this.isFullWidth = false;
    this.status = 'normal';
    this.helperText = undefined;
    this.isAutoFocused = false;
    this.autoComplete = 'off';
    this.hasSpellcheck = 'false';
    this.enterKeyHint = undefined;
    this.inputMode = undefined;
    this.isClearable = false;
    this.isRequired = undefined;
    this.optionalText = undefined;
    this.size = 'md';
    this.width = '200';
    this.placeholder = undefined;
    this.fieldType = 'string';
    this.minLength = undefined;
    this.maxLength = undefined;
    this.min = undefined;
    this.max = undefined;
    this.step = undefined;
    this.isFocused = false;
  }
  valueChanged() {
    if (this.inputEl && this.inputEl.value !== this.value) {
      // NOTE: don't use setAttribute ('value', ...) here, because that doesn't change the value of the input in every case.
      // example: the current value of input is '-200', if the new value should be '200',
      // 'setAttribute('value', 200)' won't change the value in the input
      this.inputEl.value = this.value;
    }
  }
  onInput(event) {
    const input = event.target;
    if (input) {
      this.value = input.value || '';
    }
    this.hmcInput.emit({ value: this.value, nativeEvent: event });
  }
  onChange(event) {
    this.hmcChange.emit({ value: this.value, nativeEvent: event });
  }
  handleClear(e) {
    e.stopPropagation();
    if (this.inputEl) {
      this.inputEl.value = '';
      this.inputEl.focus();
      this.value = '';
    }
    this.hmcInput.emit({ value: '', nativeEvent: e });
    this.hmcChange.emit({ value: '', nativeEvent: e });
  }
  render() {
    const { autoComplete, fieldType, hasSpellcheck, helperText, inputMode, isAutoFocused, isClearable, isDisabled, isFullWidth, isRequired, label, max, maxLength, min, minLength, name, optionalText, placeholder, size, status, step, value, } = this;
    renderHiddenInput(this.el, name, isDisabled, this.value);
    this._hasPrefix = Boolean(this.el.querySelector('[slot="prefix"]'));
    this._hasSuffix = Boolean(this.el.querySelector('[slot="suffix"]'));
    const width = isFullWidth ? '100%' : this.width + 'px';
    const placeholderText = placeholder;
    const groupClassList = {
      'input-group': true,
      'with-prefix': this._hasPrefix,
      'with-suffix': this._hasSuffix,
    };
    const inputGroup = (h("div", { class: groupClassList }, this._hasPrefix && (h("div", { class: "prefix" }, h("slot", { name: "prefix" }))), h("input", { id: FIELD_ID, ref: el => (this.inputEl = el), type: fieldType, onInput: event => this.onInput(event), onChange: event => this.onChange(event), onBlur: e => {
        this.isFocused = false;
        this.onBlur(e);
      }, onFocus: e => {
        this.isFocused = true;
        this.onFocus(e);
      }, autoComplete: autoComplete, autoFocus: isAutoFocused, enterKeyHint: this.enterKeyHint, inputMode: inputMode, name: name, value: value, placeholder: placeholderText, disabled: isDisabled, minLength: minLength, maxLength: maxLength, spellcheck: hasSpellcheck, min: min, max: max, step: step, onWheel: ev => {
        if (fieldType === 'number' && this.isFocused) {
          ev.preventDefault();
        }
      } }), isClearable && this.value.length > 0 && (h("hmc-icon", { name: "close-circle-s", onClick: event => this.handleClear(event), class: "clear-icon" })), this._hasSuffix && !isClearable && (h("div", { class: "suffix" }, h("slot", { name: "suffix" })))));
    const wrappperClassList = {
      'input-wrapper': true,
      'disabled': isDisabled,
      'error': status === 'error',
      'warning': status === 'warning',
      [size]: true,
    };
    return (h(Host, { ref: ref => (this.rootEl = ref) }, h("div", { class: wrappperClassList, style: { width } }, h("div", { class: "input-label" }, !!label && (h("span", { class: "label" }, h("label", { htmlFor: FIELD_ID }, label), h("span", { class: "hint" }, h("slot", { name: "hint" })))), isRequired === false && (h("span", { class: "label-optional" }, optionalText))), inputGroup, status !== 'normal' && Boolean(helperText) && (h("div", { class: "helper-text" }, h("hmc-message", { status: status }, helperText))))));
  }
  static get is() { return "hmc-input-field"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["input-field.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["input-field.css"]
    };
  }
  static get properties() {
    return {
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The name of the input for form submission.\nDefault: ''."
        },
        "attribute": "name",
        "reflect": false
      },
      "value": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The value of the input.\nDefault: ''."
        },
        "attribute": "value",
        "reflect": false,
        "defaultValue": "''"
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies label text of the input. For accessibility, a label must be used to identify the input field.\nDefault: ''."
        },
        "attribute": "label",
        "reflect": false,
        "defaultValue": "''"
      },
      "isDisabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies 'disabled' state of the icon.\nDefault, `false`."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "isFullWidth": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If enabled, input will be loaded with 'width: 100%'.\nDefault, `false`."
        },
        "attribute": "full-width",
        "reflect": false,
        "defaultValue": "false"
      },
      "status": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "InputStatusType",
          "resolved": "\"error\" | \"info\" | \"normal\" | \"warning\"",
          "references": {
            "InputStatusType": {
              "location": "import",
              "path": "../type/status.type"
            }
          }
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "Provide issue type for input\nDefault, `normal`."
        },
        "attribute": "status",
        "reflect": false,
        "defaultValue": "'normal'"
      },
      "helperText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "String for the issue displayed under input."
        },
        "attribute": "helper-text",
        "reflect": false
      },
      "isAutoFocused": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If enabled, input will be focused.\nDefault: 'false'."
        },
        "attribute": "autofocus",
        "reflect": false,
        "defaultValue": "false"
      },
      "autoComplete": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "If 'on', autocomplete prompts can be used.\nDefault: 'off'."
        },
        "attribute": "autocomplete",
        "reflect": false,
        "defaultValue": "'off'"
      },
      "hasSpellcheck": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'true' | 'false'",
          "resolved": "\"false\" | \"true\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If enabled, the browser's spellchecker will be run on the value of the textarea.\nDefault: 'false'."
        },
        "attribute": "spellcheck",
        "reflect": false,
        "defaultValue": "'false'"
      },
      "enterKeyHint": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "| 'enter'\n    | 'done'\n    | 'go'\n    | 'next'\n    | 'previous'\n    | 'search'\n    | 'send'",
          "resolved": "\"done\" | \"enter\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "A hint to the browser for which enter key to display.\nPossible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n`\"previous\"`, `\"search\"`, and `\"send\"`."
        },
        "attribute": "enterkeyhint",
        "reflect": false
      },
      "inputMode": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "| 'none'\n    | 'text'\n    | 'tel'\n    | 'url'\n    | 'email'\n    | 'numeric'\n    | 'decimal'\n    | 'search'",
          "resolved": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "A hint to the browser for which keyboard to display.\nPossible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n`\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`."
        },
        "attribute": "inputmode",
        "reflect": false
      },
      "isClearable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies isClearable prop to remove input content with clear icon.\nDefault: false"
        },
        "attribute": "clearable",
        "reflect": false,
        "defaultValue": "false"
      },
      "isRequired": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "Based on this prop \"optional\" label could be shown or not.\nDefault: 'undefined'."
        },
        "attribute": "required",
        "reflect": false
      },
      "optionalText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "String to indicate the input is optional in a form, shown when required=false."
        },
        "attribute": "optional-text",
        "reflect": false
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "InputSize",
          "resolved": "\"md\" | \"sm\" | \"xs\"",
          "references": {
            "InputSize": {
              "location": "import",
              "path": "../type/size.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The size of the input.\nAvailable options are: \"xs\", \"sm\" and \"md\".\nDefault: \"md\"."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'md'"
      },
      "width": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies width of the input in pixels.\nDefault: '200'."
        },
        "attribute": "width",
        "reflect": false,
        "defaultValue": "'200'"
      },
      "placeholder": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies placeholder of the input."
        },
        "attribute": "placeholder",
        "reflect": false
      },
      "fieldType": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies type of the input."
        },
        "attribute": "field-type",
        "reflect": false,
        "defaultValue": "'string'"
      },
      "minLength": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number | undefined",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The minlength specifies the minimum length (in characters) of the textarea."
        },
        "attribute": "minlength",
        "reflect": false
      },
      "maxLength": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number | undefined",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The maxlength specifies the maximum length (in characters) of the textarea."
        },
        "attribute": "maxlength",
        "reflect": false
      },
      "min": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "For `field-type=\"number\"` sets the minimum numeric value of the input."
        },
        "attribute": "min",
        "reflect": false
      },
      "max": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "For `field-type=\"number\"` sets the maximum numeric value of the input."
        },
        "attribute": "max",
        "reflect": false
      },
      "step": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "For `field-type=\"number\"` sets the increment when using arrow keys to change the value."
        },
        "attribute": "step",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "isFocused": {}
    };
  }
  static get events() {
    return [{
        "method": "hmcInput",
        "name": "hmcInput",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the value has changed."
        },
        "complexType": {
          "original": "HmcInputEventDetail",
          "resolved": "HmcInputEventDetail",
          "references": {
            "HmcInputEventDetail": {
              "location": "import",
              "path": "./input-field-interface"
            }
          }
        }
      }, {
        "method": "hmcChange",
        "name": "hmcChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "This maps to the native onchange event and typically occurs when\nthe input loses focus or the user hits `Enter`."
        },
        "complexType": {
          "original": "HmcInputEventDetail",
          "resolved": "HmcInputEventDetail",
          "references": {
            "HmcInputEventDetail": {
              "location": "import",
              "path": "./input-field-interface"
            }
          }
        }
      }, {
        "method": "hmcBlur",
        "name": "hmcBlur",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the input loses focus."
        },
        "complexType": {
          "original": "FocusEvent",
          "resolved": "FocusEvent",
          "references": {
            "FocusEvent": {
              "location": "global"
            }
          }
        }
      }, {
        "method": "hmcFocus",
        "name": "hmcFocus",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the input gains focus."
        },
        "complexType": {
          "original": "FocusEvent",
          "resolved": "FocusEvent",
          "references": {
            "FocusEvent": {
              "location": "global"
            }
          }
        }
      }];
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "value",
        "methodName": "valueChanged"
      }];
  }
}
