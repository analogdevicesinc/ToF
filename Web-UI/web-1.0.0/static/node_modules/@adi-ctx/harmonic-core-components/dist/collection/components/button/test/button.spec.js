import { newSpecPage } from '@stencil/core/testing';
import { HmcButton } from '../button';
describe('hmc-button', () => {
  it('builds', () => {
    expect(new HmcButton()).toBeTruthy();
  });
  describe('renders', () => {
    let page;
    beforeEach(async () => {
      page = await newSpecPage({
        components: [HmcButton],
      });
    });
    it('should render default component', async () => {
      await page.setContent('<hmc-button></hmc-button>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-button>
          <mock:shadow-root>
            <button class="md primary" tabindex="0" type="button">
              <div class="content-wrapper">
                <slot name="icon-left"></slot>
                <div class="text-wrapper">
                  <slot></slot>
                </div>
                <slot name="icon-right"></slot>
              </div>
              <div class="spinner-wrapper">
                <hmc-spinner kind="primary" size="md"></hmc-spinner>
              </div>
            </button>
          </mock:shadow-root>
        </hmc-button>
      `);
    });
    it('should render component with icon-only', async () => {
      await page.setContent('<hmc-button icon-only="true"></hmc-button>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-button icon-only="true">
          <mock:shadow-root>
            <button class="icon-only md primary" tabindex="0" type="button">
              <div class="content-wrapper">
                <slot name="icon-left"></slot>
                <div class="text-wrapper">
                  <slot></slot>
                </div>
                <slot name="icon-right"></slot>
              </div>
              <div class="spinner-wrapper">
                <hmc-spinner kind="primary" size="md"></hmc-spinner>
              </div>
            </button>
          </mock:shadow-root>
        </hmc-button>
      `);
    });
    it('should render being processed secondary component', async () => {
      await page.setContent('<hmc-button processing kind="secondary" ></hmc-button>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-button class="button-disabled" kind="secondary" processing="">
          <mock:shadow-root>
            <button class="md processing secondary" disabled="" tabindex="-1" type="button">
              <div class="content-wrapper">
                <slot name="icon-left"></slot>
                <div class="text-wrapper">
                  <slot></slot>
                </div>
                <slot name="icon-right"></slot>
              </div>
              <div class="spinner-wrapper">
                <hmc-spinner kind="secondary" size="md"></hmc-spinner>
              </div>
            </button>
          </mock:shadow-root>
        </hmc-button>
      `);
    });
    it('should apply classes from props', async () => {
      await page.setContent('<hmc-button disabled kind="tertiary" size="sm" full-width="true" autofocus=true></hmc-button>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-button autofocus="true" class="button-disabled full-width" disabled="" full-width="true" kind="tertiary" size="sm">
          <mock:shadow-root>
            <button autofocus="" class="disabled sm tertiary" disabled="" tabindex="-1" type="button">
              <div class="content-wrapper">
                <slot name="icon-left"></slot>
                <div class="text-wrapper">
                  <slot></slot>
                </div>
                <slot name="icon-right"></slot>
              </div>
              <div class="spinner-wrapper">
                <hmc-spinner kind="tertiary" size="md"></hmc-spinner>
              </div>
            </button>
          </mock:shadow-root>
        </hmc-button>
      `);
    });
  });
});
