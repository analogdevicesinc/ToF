import { Host, h, } from '@stencil/core';
//NB: Keep in sync with stylesheet
const COLLAPSING_DURATION = 200;
/**
 * @slot header - Slot="header" is used to pass a header content to the Accordion.
 * @slot content - Slot="content" is used to pass content to the Accordion, which will be visible when isOpen is true.
 */
export class HmcAccordion {
  constructor() {
    this.isOpen = false;
    this.size = 'md';
  }
  watchIsOpenHandler(newValue) {
    this.isOpen = newValue;
    this.handlePanelCollapsing();
  }
  // Expand the accordion if it is closed and the focus moves within.
  handleFocusIn(ev) {
    if (!this.isOpen && ev.target !== this.el) {
      this.togglePanel();
    }
  }
  componentDidLoad() {
    if (this.container && this.isOpen) {
      this.container.style.maxHeight = 'unset';
    }
  }
  togglePanel() {
    this.isOpen = !this.isOpen;
    this.accordionChange.emit({ open: this.isOpen });
  }
  handleSetContainerHeight(timeoutDuration, shouldPanelOpen, desiredHeight) {
    // We need to get the current height of content cause it could be different
    // from the initial, e.i. extra elements could be rendered after the panel is open.
    const content = this.el.querySelector('[slot="content"]');
    // For animation, first need to set absolute height and then set it to a relative or null.
    // It is allowing to change container height properly in case of changing content.
    this.container.style.maxHeight = content.scrollHeight + 'px';
    setTimeout(() => {
      // Additional check if User change panel state while it's collapsing.
      if (this.isOpen === shouldPanelOpen) {
        this.container.style.maxHeight = desiredHeight;
      }
    }, timeoutDuration);
  }
  handlePanelCollapsing() {
    if (this.container) {
      if (!this.isOpen) {
        this.handleSetContainerHeight(0, false, null);
      }
      else {
        this.handleSetContainerHeight(COLLAPSING_DURATION + 10, true, 'unset');
      }
    }
  }
  render() {
    const { isOpen, size } = this;
    const hasAccordionParent = this.el.parentElement.closest('hmc-accordion') !== null;
    const accordionClasses = {
      'expanded': isOpen,
      'has-parent': hasAccordionParent,
    };
    const arrowClasses = {
      arrow: true,
      open: isOpen,
    };
    const headerClasses = {
      header: true,
    };
    const contentInnerClasses = {
      'content-inner': true,
    };
    return (h(Host, { class: accordionClasses }, h("div", { class: headerClasses, role: "heading", "aria-level": 3 }, h("button", { id: "header-button", class: { [size]: true }, "aria-expanded": isOpen ? 'true' : 'false', "aria-controls": "content", onClick: () => this.togglePanel() }, h("hmc-icon", { class: arrowClasses, name: "chevron-right-xs" }), h("slot", { name: "header" }))), h("div", { id: "content", class: "content", role: "region", "aria-labelledby": "header-button", ref: ref => (this.container = ref) }, h("div", { class: contentInnerClasses }, h("slot", { name: "content" })))));
  }
  static get is() { return "hmc-accordion"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["accordion.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["accordion.css"]
    };
  }
  static get properties() {
    return {
      "isOpen": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies isOpen prop, if `true`, the panel will be opened.\nDefault: false."
        },
        "attribute": "open",
        "reflect": false,
        "defaultValue": "false"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "AccordionSize",
          "resolved": "\"md\" | \"xs\"",
          "references": {
            "AccordionSize": {
              "location": "import",
              "path": "../type/size.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The size of the accordion header.\nAvailable options are: \"xs\" and \"md\".\nDefault: \"md\"."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'md'"
      }
    };
  }
  static get events() {
    return [{
        "method": "accordionChange",
        "name": "accordionChange",
        "bubbles": false,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "'accordionChange' event emitted when user clicks on the header\nand the panel visibility is toggled."
        },
        "complexType": {
          "original": "{ open: boolean }",
          "resolved": "{ open: boolean; }",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "isOpen",
        "methodName": "watchIsOpenHandler"
      }];
  }
  static get listeners() {
    return [{
        "name": "focusin",
        "method": "handleFocusIn",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
