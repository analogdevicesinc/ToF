import { html } from 'lit-html';

import documentation from './dropdown-option-documentation.mdx';
import readme from './readme.md';

export default {
  title: 'Components/Dropdown Option',
  parameters: {
    notes: readme,
    docs: {
      page: documentation,
    },
  },
  argTypes: {
    size: {
      control: {
        type: 'inline-radio',
        options: ['xs', 'sm', 'md'],
      },
    },
    rightActionType: {
      control: {
        type: 'inline-radio',
        options: ['icon', 'value'],
      },
    },
    onSelection: { action: 'hmcDropdownSelection' },
  },
};
const style = html` <style>
  .backdrop {
    background-color: var(--hmc-color-layout-canvas);
    height: 600px;
  }
  .list-container {
    display: flex;
    flex-direction: column;
    gap: 4px;
    margin: 4px 0;
    padding: 4px 0;
    border-radius: 4px;
    box-shadow: 0 4px 10px 0 rgba(190, 193, 204, 0.4);
    background-color: var(--hmc-color-layout-container);
    position: absolute;
    width: 250px;
    min-height: 16px;
  }
</style>`;
const Template = ({
  label,
  caption,
  isSelected,
  isDisabled,
  size,
  multiple,
  action,
  slottedLeftIcon,
  slottedRightAction,
  rightActionType,
  onSelection,
}) => {
  return html`${style}
    <div class="backdrop">
      <div class="list-container">
        <hmc-dropdown-option
          value="option1"
          selected=${isSelected}
          disabled=${isDisabled}
          size=${size}
          multiple=${multiple}
          action=${action}
          @hmcDropdownSelection=${onSelection}
        >
          ${slottedLeftIcon
            ? html` <hmc-icon
                slot="left-icon"
                name="placeholder-${size === 'xs' ? 's' : 'm'}"
              ></hmc-icon>`
            : ''}

          <span>${label}</span>
          <span slot="caption">${caption}</span>

          ${slottedRightAction
            ? rightActionType === 'icon'
              ? html`<hmc-icon
                  slot="right-icon"
                  name="placeholder-${size === 'xs' ? 's' : 'm'}"
                ></hmc-icon>`
              : html`<span slot="right-value">xX</span>`
            : ''}
        </hmc-dropdown-option>
        <div></div>
      </div>
    </div>`;
};
export const Playground = Template.bind({});
Playground.args = {
  label: 'Option Label',
  caption: 'Option Caption',
  isSelected: true,
  isDisabled: false,
  size: 'md',
  multiple: false,
  action: false,
  slottedLeftIcon: false,
  slottedRightAction: false,
  rightActionType: 'icon',
};

export const States = ({ size, onSelection }) => {
  return html`${style}
    <div class="backdrop">
      <div class="list-container">
        <hmc-dropdown-option
          value="option1"
          selected="false"
          disabled="false"
          size=${size}
          multiple="false"
          @hmcDropdownSelection=${onSelection}
        >
          Idle
        </hmc-dropdown-option>
        <hmc-dropdown-option
          value="option2"
          selected="true"
          disabled="false"
          size=${size}
          multiple="false"
          @hmcDropdownSelection=${onSelection}
        >
          Selected
        </hmc-dropdown-option>
        <hmc-dropdown-option
          value="option3"
          selected="false"
          disabled="false"
          size=${size}
          multiple="true"
          @hmcDropdownSelection=${onSelection}
        >
          Idle (Multi-Choice)
        </hmc-dropdown-option>
        <hmc-dropdown-option
          value="option4"
          selected="true"
          disabled="false"
          size=${size}
          multiple="true"
          @hmcDropdownSelection=${onSelection}
        >
          Selected (Multi-Choice)
        </hmc-dropdown-option>
        <hmc-dropdown-option
          value="option5"
          selected="false"
          disabled="true"
          size=${size}
          multiple="false"
          @hmcDropdownSelection=${onSelection}
        >
          Normal (Disabled)
        </hmc-dropdown-option>
        <hmc-dropdown-option
          value="option6"
          selected="true"
          disabled="true"
          size=${size}
          multiple="false"
          @hmcDropdownSelection=${onSelection}
        >
          Selected (Disabled)
        </hmc-dropdown-option>

        <hmc-dropdown-option
          value="option7"
          selected="false"
          disabled="true"
          size=${size}
          multiple="true"
          @hmcDropdownSelection=${onSelection}
        >
          Idle (Multi-Choice / Disabled)
        </hmc-dropdown-option>
        <hmc-dropdown-option
          value="option8"
          selected="true"
          disabled="true"
          size=${size}
          multiple="true"
          @hmcDropdownSelection=${onSelection}
        >
          Selected (Multi-Choice / Disabled)
        </hmc-dropdown-option>
        <hmc-dropdown-option
          value="option9"
          selected="true"
          size=${size}
          action="true"
          @hmcDropdownSelection=${onSelection}
        >
          <hmc-icon
            slot="left-icon"
            name="placeholder-${size === 'xs' ? 's' : 'm'}"
          ></hmc-icon>
          <span>Action with Icon</span>
          <hmc-icon
            slot="right-icon"
            name="placeholder-${size === 'xs' ? 's' : 'm'}"
          ></hmc-icon>
        </hmc-dropdown-option>
        <hmc-dropdown-option
          value="option10"
          selected="true"
          size=${size}
          action="true"
          @hmcDropdownSelection=${onSelection}
        >
          <hmc-icon
            slot="left-icon"
            name="placeholder-${size === 'xs' ? 's' : 'm'}"
          ></hmc-icon>
          <span>Action with Value</span>
          <span slot="right-value">50 Hz</span>
        </hmc-dropdown-option>
      </div>
    </div>`;
};
States.args = {
  size: 'md',
};
States.argTypes = {
  rightActionType: {
    table: {
      disable: true,
    },
  },
};

export const Sizes = ({
  isSelected,
  multiple,
  onSelection,
  action,
  slottedLeftIcon,
  slottedRightAction,
  rightActionType,
  isDisabled,
  label,
  caption,
}) => {
  return html`${style}
    <div class="backdrop">
      <div class="list-container">
        <hmc-dropdown-option
          value="option1"
          selected=${isSelected}
          size="md"
          multiple=${multiple}
          disabled=${isDisabled}
          action=${action}
          @hmcDropdownSelection=${onSelection}
        >
          ${slottedLeftIcon
            ? html` <hmc-icon slot="left-icon" name="placeholder-m"></hmc-icon>`
            : ''}

          <span>${label === '' ? 'Medium Size' : label}</span>
          <span slot="caption">${caption}</span>

          ${slottedRightAction
            ? rightActionType === 'icon'
              ? html`<hmc-icon
                  slot="right-icon"
                  name="placeholder-m"
                ></hmc-icon>`
              : html`<span slot="right-value">xX</span>`
            : ''}
        </hmc-dropdown-option>

        <hmc-dropdown-option
          value="option2"
          selected=${isSelected}
          size="sm"
          multiple=${multiple}
          disabled=${isDisabled}
          action=${action}
          @hmcDropdownSelection=${onSelection}
        >
          ${slottedLeftIcon
            ? html` <hmc-icon slot="left-icon" name="placeholder-m"></hmc-icon>`
            : ''}

          <span>${label === '' ? 'Small Size' : label}</span>
          <span slot="caption">${caption}</span>

          ${slottedRightAction
            ? rightActionType === 'icon'
              ? html`<hmc-icon
                  slot="right-icon"
                  name="placeholder-m"
                ></hmc-icon>`
              : html`<span slot="right-value">xX</span>`
            : ''}
        </hmc-dropdown-option>

        <hmc-dropdown-option
          value="option3"
          selected=${isSelected}
          size="xs"
          multiple=${multiple}
          disabled=${isDisabled}
          action=${action}
          @hmcDropdownSelection=${onSelection}
        >
          ${slottedLeftIcon
            ? html` <hmc-icon slot="left-icon" name="placeholder-s"></hmc-icon>`
            : ''}

          <span>${label === '' ? 'Extra Small Size' : label}</span>
          <span slot="caption">${caption}</span>

          ${slottedRightAction
            ? rightActionType === 'icon'
              ? html`<hmc-icon
                  slot="right-icon"
                  name="placeholder-s"
                ></hmc-icon>`
              : html`<span slot="right-value">xX</span>`
            : ''}
        </hmc-dropdown-option>
      </div>
    </div>`;
};
Sizes.args = {
  label: '',
  caption: 'Option Caption',
  isSelected: true,
  isDisabled: false,
  multiple: false,
  action: false,
  slottedLeftIcon: false,
  slottedRightAction: false,
  rightActionType: 'icon',
};
Sizes.argTypes = {
  size: {
    table: {
      disable: true,
    },
  },
};
