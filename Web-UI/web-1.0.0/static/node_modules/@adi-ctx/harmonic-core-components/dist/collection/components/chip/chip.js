import { h, Host, } from '@stencil/core';
/**
 * @slot icon - Slot to pass in hmc-icon to appear on left.
 * @slot - An unnamed slot is used to pass a text label to the chip.
 */
export class HmcChip {
  constructor() {
    this.clickHandler = () => {
      this.isSelected = !this.isSelected;
      this.hmcChange.emit({ selected: this.isSelected });
    };
    this.size = 'md';
    this.isDisabled = false;
    this.autofocus = false;
    this.hasCheckmark = true;
    this.isSelected = false;
  }
  render() {
    const { autofocus, hasCheckmark, isDisabled, isSelected, size } = this;
    const classList = {
      'chip-disabled': isDisabled,
      'chip-selected': isSelected,
    };
    const chipClasses = {
      disabled: isDisabled,
      [size]: true,
      selected: isSelected,
    };
    const content = (h("div", { class: "content-wrapper" }, hasCheckmark && isSelected && (h("hmc-icon", { name: `check-${size === 'xs' ? 's' : 'm'}` })), h("slot", { name: "icon" }), h("div", { class: "text-wrapper" }, h("slot", null))));
    const chip = (h("button", { "aria-pressed": isSelected.toString(), class: chipClasses, onClick: () => this.clickHandler(), disabled: isDisabled, autoFocus: autofocus }, content));
    return h(Host, { class: classList }, chip);
  }
  static get is() { return "hmc-chip"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["chip.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["chip.css"]
    };
  }
  static get properties() {
    return {
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ButtonSize",
          "resolved": "\"md\" | \"sm\" | \"xs\"",
          "references": {
            "ButtonSize": {
              "location": "import",
              "path": "../type/size.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The size of the chip.\nAvailable options are: \"xs\" - h-24, \"sm\" - h-32, \"md\" - h-40.\nDefault: \"md\"."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'md'"
      },
      "isDisabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies 'disabled' state of the chip.\nDefault: `false`."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "autofocus": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies whether the chip should have input focus when the page loads.\nDefault: `false`."
        },
        "attribute": "autofocus",
        "reflect": false,
        "defaultValue": "false"
      },
      "hasCheckmark": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If true, adds a checkmark to the chip when it is selected."
        },
        "attribute": "checkmark",
        "reflect": false,
        "defaultValue": "true"
      },
      "isSelected": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies whether the chip is selected.\nDefault: `false`."
        },
        "attribute": "selected",
        "reflect": true,
        "defaultValue": "false"
      }
    };
  }
  static get events() {
    return [{
        "method": "hmcChange",
        "name": "hmcChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Fires when user clicks the chip and the selection state is toggled."
        },
        "complexType": {
          "original": "{ selected: boolean }",
          "resolved": "{ selected: boolean; }",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
}
