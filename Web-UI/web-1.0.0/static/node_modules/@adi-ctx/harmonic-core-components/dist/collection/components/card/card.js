import { Host, h } from '@stencil/core';
/**
 * @slot card-header - Slot to pass text or components to the top of the card.
 * @slot card-header-actions - Slot to pass ghost buttons to the header of the card.
 * @slot - An unnamed slot is used to pass text or an image onto the main body of the card.
 * @slot card-footer - Slot to pass text or components to the bottom of the card.
 */
export class HmcCard {
  constructor() {
    this.density = 'medium';
    this.hasHeader = true;
    this.hasFooter = false;
  }
  componentWillLoad() {
    this.hasHeader = Boolean(this.el.querySelector('[slot="card-header"]'));
    this.hasFooter = Boolean(this.el.querySelector('[slot="card-footer"]'));
  }
  renderHeader() {
    const rootClass = {
      'card-header-container': true,
      'high-density': this.density === 'high',
    };
    return (h("div", { class: "p-x" }, h("div", { class: rootClass }, h("slot", { name: "card-header" }), h("div", { class: "card-header-right" }, h("slot", { name: "card-header-actions" })))));
  }
  renderFooter() {
    return (h("div", { class: "p-x" }, h("div", { class: "card-footer-container" }, h("slot", { name: "card-footer" }))));
  }
  render() {
    const { density, hasHeader, hasFooter } = this;
    const rootClass = {
      'card': true,
      'high-density': density === 'high',
    };
    return (h(Host, null, h("div", { class: rootClass }, hasHeader && this.renderHeader(), h("div", { class: "card-content" }, h("slot", null)), hasFooter && this.renderFooter())));
  }
  static get is() { return "hmc-card"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["card.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["card.css"]
    };
  }
  static get properties() {
    return {
      "density": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'high' | 'medium'",
          "resolved": "\"high\" | \"medium\"",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "Specifies the density of information in the header and body. Similar to the size prop in other components.\nSpecifying 'high' will display a smaller font size allowing more information to be conveyed.\nDefault: 'medium'"
        },
        "attribute": "density",
        "reflect": false,
        "defaultValue": "'medium'"
      }
    };
  }
  static get states() {
    return {
      "hasHeader": {},
      "hasFooter": {}
    };
  }
  static get elementRef() { return "el"; }
}
