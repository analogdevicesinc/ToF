import { h, Host, } from '@stencil/core';
/**
 * @slot - An unnamed slot is used to pass a label to the component.
 */
export class HmcRadioButton {
  constructor() {
    this.inputId = `hmc-rb-${radioButtonIds++}`;
    this.radioGroup = null;
    this.updateState = () => {
      if (this.radioGroup) {
        this.isChecked = this.radioGroup.value === this.value;
      }
    };
    this.onClick = () => {
      this.isChecked = this.nativeInput.checked;
    };
    this.isChecked = undefined;
    this.value = undefined;
    this.label = undefined;
    this.size = 'md';
    this.isDisabled = false;
    this.buttonTabindex = -1;
  }
  async setFocus(ev) {
    ev.stopPropagation();
    ev.preventDefault();
    this.el.focus();
  }
  async setButtonTabindex(value) {
    this.buttonTabindex = value;
  }
  connectedCallback() {
    if (this.value === undefined) {
      this.value = this.inputId;
    }
    const radioGroup = (this.radioGroup = this.el.closest('hmc-radio-group'));
    if (radioGroup) {
      this.updateState();
      radioGroup.addEventListener('radioChanged', this.updateState);
    }
    if (this.isChecked) {
      this.setButtonTabindex(0);
    }
  }
  disconnectedCallback() {
    const radioGroup = this.radioGroup;
    if (radioGroup) {
      radioGroup.removeEventListener('radioChanged', this.updateState);
      this.radioGroup = null;
    }
  }
  render() {
    const { isChecked, isDisabled, label, buttonTabindex, inputId, size, } = this;
    const labelClass = {
      label: true,
      disabled: isDisabled,
      [size]: true,
    };
    const radioClassList = {
      'radio-button': true,
      'disabled': isDisabled,
      'checked': isChecked,
    };
    return (h(Host, { onClick: this.onClick, role: "radio", tabindex: buttonTabindex, class: { 'radio-disabled': isDisabled } }, h("div", { class: "container" }, h("div", { class: radioClassList }, h("div", { class: "radio-inner" })), h("label", { htmlFor: inputId, class: labelClass }, label, h("span", { class: "hint" }, h("slot", { name: "hint" })))), h("input", { type: "radio", checked: isChecked, disabled: isDisabled, tabindex: "-1", id: inputId, ref: nativeEl => (this.nativeInput = nativeEl) })));
  }
  static get is() { return "hmc-radio-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["radio-button.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["radio-button.css"]
    };
  }
  static get properties() {
    return {
      "isChecked": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If `true`, indicates that this radio button is selected one in the group."
        },
        "attribute": "checked",
        "reflect": false
      },
      "value": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies internal value of the radio button.\nIt used in setting/getting currently checked radio and emitting checked radio button's value."
        },
        "attribute": "value",
        "reflect": false
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "Optional label to put beside button."
        },
        "attribute": "label",
        "reflect": false
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "RadioSize",
          "resolved": "\"md\" | \"xs\"",
          "references": {
            "RadioSize": {
              "location": "import",
              "path": "../../type/size.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The size of the radio button.\nAvailable options are: \"xs\" and \"md\".\nDefault: \"md\"."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'md'"
      },
      "isDisabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies 'disabled' state of the radio button.\nDefault, `false`."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "buttonTabindex": {}
    };
  }
  static get methods() {
    return {
      "setFocus": {
        "complexType": {
          "signature": "(ev: any) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "setButtonTabindex": {
        "complexType": {
          "signature": "(value: number) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "el"; }
}
let radioButtonIds = 0;
