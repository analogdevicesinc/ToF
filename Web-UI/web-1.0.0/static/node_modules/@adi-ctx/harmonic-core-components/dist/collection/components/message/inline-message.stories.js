import { html } from 'lit-html';

import { supportedIcons } from '../icon/iconsMap';

import document from './message-documentation.mdx';
import readme from './readme.md';

export default {
  title: 'Components/Inline Message',
  parameters: {
    notes: readme,
    docs: {
      page: document,
    },
  },
};
const CONFIG_DATA = ['info', 'error', 'warning', 'success'];

const style = html`
  <style>
    .messages {
      width: 100%;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 16px;
    }
  </style>
`;
export const Playground = ({ status, message, isFullWidth, iconName }) => {
  return html`
    <hmc-message
      status=${status}
      full-width=${isFullWidth}
      icon-name=${iconName || status}
    >
      ${message}
    </hmc-message>
  `;
};
Playground.args = {
  status: 'info',
  iconName: 'info-s',
  isFullWidth: false,
  message: 'Information message',
};
Playground.argTypes = {
  status: {
    control: {
      type: 'inline-radio',
      options: ['info', 'success', 'warning', 'error'],
    },
  },
  iconName: {
    control: {
      type: 'select',
      options: supportedIcons,
    },
  },
  isFullWidth: {
    control: {
      type: 'boolean',
    },
  },
};
const Template = () => {
  const createItem = () =>
    CONFIG_DATA.map(
      item => html`
        <hmc-message status=${item}
          >${item[0].toLocaleUpperCase() + item.slice(1)} message</hmc-message
        >
      `,
    );
  const createMessages = () => html` ${createItem()} `;

  return html`
    ${style}
    <div class="messages">${createMessages()}</div>
  `;
};

export const Statuses = Template.bind({});
