import { Host, h } from '@stencil/core';
export class HmcBadge {
  constructor() {
    this.kind = 'digits';
    this.status = 'urgent';
    this.number = 1;
    this.maxNumber = 999;
  }
  componentWillRender() {
    this.number = this.fixNumberInteger(this.number);
    this.maxNumber = this.fixNumberInteger(this.maxNumber);
  }
  fixNumberInteger(num) {
    if (num < 0) {
      console.error('Number cannot be negative!');
      return 0;
    }
    else if (!Number.isInteger(num) || num % 1 !== 0) {
      console.error('The number can only be an integer. The number is rounded.');
      return Math.round(num);
    }
    return num;
  }
  getLabel() {
    if (this.number > this.maxNumber) {
      return this.maxNumber + '+';
    }
    else {
      return this.number.toString();
    }
  }
  render() {
    const { kind, status } = this;
    const labelClass = {
      label: true,
      [status]: true,
    };
    const classes = {
      badge: true,
      [kind]: true,
      [status]: true,
    };
    return (h(Host, null, h("div", { class: classes }, h("span", { class: labelClass }, this.getLabel()))));
  }
  static get is() { return "hmc-badge"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["./badge.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["badge.css"]
    };
  }
  static get properties() {
    return {
      "kind": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "BadgeVariant",
          "resolved": "\"digits\" | \"dots\"",
          "references": {
            "BadgeVariant": {
              "location": "import",
              "path": "../type/variant.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The kind of the badge.\nAvailable options are: 'digits', and 'dots'\nDefault: 'digits'."
        },
        "attribute": "kind",
        "reflect": false,
        "defaultValue": "'digits'"
      },
      "status": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "BadgeStatusType",
          "resolved": "\"information\" | \"urgent\"",
          "references": {
            "BadgeStatusType": {
              "location": "import",
              "path": "../type/status.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The status of the badge.\nAvailable options are: 'urgent', and 'information'\nDefault: 'urgent'."
        },
        "attribute": "status",
        "reflect": false,
        "defaultValue": "'urgent'"
      },
      "number": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "The label of the badge.\nNumber can only take non-negative integer numbers.\nDefault: 1."
        },
        "attribute": "number",
        "reflect": false,
        "defaultValue": "1"
      },
      "maxNumber": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "The max number of the badge.\nMaximum number to appear on the label.\nA number greater than the max number will appear in the label as '{maxNumber}+'.\nMaximum Number can only take non-negative integer numbers.\nDefault: 999."
        },
        "attribute": "max-number",
        "reflect": false,
        "defaultValue": "999"
      }
    };
  }
}
