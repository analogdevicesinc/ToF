import { newSpecPage } from '@stencil/core/testing';
import { HmcSegmentedButton } from '../segmented-button/segmented-button';
describe('hmc-segmented-button', () => {
  let page;
  beforeEach(async () => {
    page = await newSpecPage({
      components: [HmcSegmentedButton],
      html: '<hmc-segmented-button></hmc-segmented-button>',
    });
  });
  it('builds', async () => {
    expect(new HmcSegmentedButton()).toBeTruthy();
  });
  describe('renders', () => {
    it('should render default component', async () => {
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-segmented-button>
          <mock:shadow-root>
            <button aria-pressed="false" class="first-child last-child md segmented-button" tabindex="-1">
              <slot></slot>
            </button>
          </mock:shadow-root>
        </hmc-segmented-button>
      `);
    });
  });
  describe('methods', () => {
    it('should emit segmentedClicked when enabled', async () => {
      const eventSpy = jest.fn();
      page.rootInstance.segmentClicked = {
        emit: eventSpy,
      };
      page.rootInstance.value = 'ADI';
      page.rootInstance.onClick();
      expect(eventSpy.mock.calls[0][0]).toEqual('ADI');
    });
    it('should do nothing when disabled', async () => {
      await page.setContent('<hmc-segmented-button disabled></hmc-segmented-button>');
      const eventSpy = jest.fn();
      page.rootInstance.segmentItemClicked = {
        emit: eventSpy,
      };
      page.rootInstance.onClick();
      expect(eventSpy.mock.calls).toEqual([]);
    });
  });
});
