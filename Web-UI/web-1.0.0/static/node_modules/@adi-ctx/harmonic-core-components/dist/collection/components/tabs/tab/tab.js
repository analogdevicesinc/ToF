import { h, Host } from '@stencil/core';
/**
 * @slot - Unnamed slot is used to pass a tab title to the component.
 */
export class HmcTab {
  constructor() {
    this.panel = undefined;
    this.isDisabled = false;
    this.isSelected = false;
    this.isFullWidth = false;
    this.size = 'md';
  }
  clickHandler() {
    if (this.isDisabled)
      return;
    this.tabClicked.emit(this.panel);
  }
  render() {
    const { isDisabled, isFullWidth, isSelected, size } = this;
    const hasIcon = Boolean(this.el.querySelector('[slot="icon"]'));
    const containerClass = {
      'full-width': isFullWidth,
      'selected': isSelected,
    };
    const classList = {
      'title-container': true,
      'disabled': isDisabled,
      [size]: true,
    };
    return (h(Host, { role: "tab", "aria-selected": `${isSelected}`, "aria-disabled": `${isDisabled}`, class: containerClass, tabindex: !isDisabled && isSelected ? '0' : '-1' }, h("div", { class: classList, onClick: () => this.clickHandler() }, hasIcon && (h("div", { class: "icon" }, h("slot", { name: "icon" }))), h("slot", null))));
  }
  static get is() { return "hmc-tab"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["tab.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["tab.css"]
    };
  }
  static get properties() {
    return {
      "panel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies internal name of the tab.\nIt used in work around setting/getting currently active tab"
        },
        "attribute": "panel",
        "reflect": false
      },
      "isDisabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If `true`, the user cannot interact with the tab.\nDefault: 'false'."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "isSelected": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Tab panel will only be visible if this is set `true`.\nDefault: 'false'."
        },
        "attribute": "selected",
        "reflect": false,
        "defaultValue": "false"
      },
      "isFullWidth": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If `true`, the tab will be loaded with 'width: 100%'.\nDefault: 'false'."
        },
        "attribute": "full-width",
        "reflect": false,
        "defaultValue": "false"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "TabSize",
          "resolved": "\"md\" | \"sm\" | \"xs\"",
          "references": {
            "TabSize": {
              "location": "import",
              "path": "../../type/size.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The size of the tab. Determines font size and line height.\nAvailable options are: \"xs\", \"sm\" and \"md\".\nDefault: \"md\"."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'md'"
      }
    };
  }
  static get events() {
    return [{
        "method": "tabClicked",
        "name": "tabClicked",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "'tabClicked' event emitted when user clicks on the particular\ntab and its name is passed as a param"
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
}
