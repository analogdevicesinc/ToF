import { html } from 'lit-html';

import readme from './readme.md';
import documentation from './tooltip-documentation.mdx';

export default {
  title: 'Components/Tooltip',
  parameters: {
    notes: readme,
    docs: {
      page: documentation,
    },
  },
  argTypes: {
    size: {
      control: {
        type: 'inline-radio',
        options: ['xs', 'sm'],
      },
    },
    placement: {
      control: {
        type: 'select',
        options: [
          'top',
          'bottom',
          'right',
          'left',
          'top-start',
          'top-end',
          'bottom-start',
          'bottom-end',
        ],
      },
    },
  },
};

const renderTooltip = (
  size,
  key,
  placement,
  tFixedWidth,
  isToggle,
  isOpen = false,
) => {
  return html`
    <div class="tooltip-controller" tabindex="0" id="tooltip-${key}">
      <hmc-button size="xs" kind="ghost" icon-only
        ><hmc-icon name="info-s"
      /></hmc-button>
    </div>
    <hmc-tooltip
      size="${size}"
      trigger-id="tooltip-${key}"
      placement=${placement}
      fixed-width=${tFixedWidth}
      toggle=${isToggle}
      open=${isOpen}
    >
      Tooltip text
    </hmc-tooltip>
  `;
};

const Template = ({ size, placement, showTooltip, isFixedWidth, text }) => {
  return html`
    ${styles}
    <div class="container">
      <div class="input-wrapper">
        <hmc-input-field
          id="tooltip-master"
          placeholder="Hover this input"
        ></hmc-input-field>
      </div>
      <hmc-tooltip
        size="${size}"
        trigger-id="tooltip-master"
        placement=${placement}
        fixed-width=${isFixedWidth}
        open=${showTooltip}
      >
        ${text}
      </hmc-tooltip>
    </div>
  `;
};

export const Tooltip = Template.bind({});
Tooltip.args = {
  size: 'sm',
  placement: 'top',
  showTooltip: false,
  isFixedWidth: false,
  text: 'Tooltips convey concise messages to the user.',
};

const ToggleTemplate = ({ size, action, placement, toggleTitle, text }) => {
  var buttonMargin = size === 'sm' ? '16px' : '12px';
  return html`
    <style>
      .toggle-container {
        height: 250px;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .btn-container {
        display: flex;
        justify-content: flex-end;
        margin-top: ${buttonMargin};
      }
      h3 {
        font-family: Barlow;
        font-weight: 600;
        font-size: 24px;
        line-height: 32px;
      }
    </style>

    <div class="toggle-container">
      <hmc-button size="xs" kind="ghost" icon-only id="toggle-cta"
        ><hmc-icon name="info-s"
      /></hmc-button>
      <hmc-tooltip
        size="${size}"
        trigger-id="toggle-cta"
        placement=${placement}
        fixed-width="true"
        toggle="true"
        toggle-title=${toggleTitle}
      >
        <div>${text}</div>
        <div class="btn-container">
          ${action
            ? html`<hmc-button size=${size} kind="secondary" inverse>
                Button Label
              </hmc-button>`
            : null}
        </div>
      </hmc-tooltip>
    </div>
  `;
};

export const Toggletip = ToggleTemplate.bind({});
Toggletip.args = {
  size: 'sm',
  placement: 'bottom',
  toggleTitle: 'Toggletip Title',
  text:
    'Use toggletips when there is a lot of text or the user needs to complete an action.',
  action: false,
};

const PlacementTemplate = ({
  size,
  isFixedWidth,
  isToggle = false,
  isOpen,
}) => {
  const renderSubSection = tFixedWidth => {
    return html` <div class="d-flex">
      ${TOOLTIP_PLACEMENTS.map(
        placement => html`<div class="my placement-option">
          <div class="caption">${placement}</div>
          ${renderTooltip(
            size,
            `tooltip-${placement}`,
            placement.toLocaleLowerCase(),
            tFixedWidth,
            isToggle,
            isOpen,
          )}
        </div>`,
      )}
    </div>`;
  };

  const renderOptions = () => {
    return html` <div>
      <div class="my px">${renderSubSection(isFixedWidth)}</div>
    </div>`;
  };

  return html` ${styles} ${renderOptions()} `;
};

export const Placement = PlacementTemplate.bind({});
Placement.args = { isFixedWidth: false, isOpen: false };
Placement.argTypes = {
  placement: {
    table: {
      disable: true,
    },
  },
};

const TOOLTIP_PLACEMENTS = [
  'Top',
  'Bottom',
  'Right',
  'Left',
  'Top-start',
  'Top-end',
  'Bottom-start',
  'Bottom-end',
];

const styles = html`
  <style>
    body {
      font-family: Inter, sans-serif;
    }
    .input-wrapper {
      height: 250px;
      width: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .my {
      margin: 24px 0;
    }
    .px {
      padding: 0 100px;
    }
    .d-flex {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
    }
    .placement-option {
      min-width: 250px;
    }
    .tooltip-controller {
      display: inline-flex;
    }
    .caption {
      font-size: $font-size-medium;
      font-weight: 500;
      color: #212836;
    }
    .heading {
      font-size: 28px;
      text-transform: capitalize;
      font-family: Barlow, sans-serif;
      font-weight: 600;
      line-height: 36px;
    }
    .sub-heading {
      font-family: Barlow;
      font-weight: 600;
      font-size: 24px;
      line-height: 32px;
    }
    .tooltip-controller:focus-visible {
      outline: none;
    }
    .tooltip-controller:focus-visible > hmc-icon {
      outline: 2px solid #6aa7dc;
    }
  </style>
`;
