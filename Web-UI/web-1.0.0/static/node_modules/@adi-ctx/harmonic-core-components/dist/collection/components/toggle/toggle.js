import { Host, h, } from '@stencil/core';
import { renderHiddenInput } from '../../utils/utils';
export class HmcToggle {
  constructor() {
    this.onClick = (e) => {
      e.stopPropagation();
      this.isChecked = !this.isChecked;
    };
    this._focused = false;
    this.label = undefined;
    this.isChecked = false;
    this.isDisabled = false;
    this.isFullWidth = false;
    this.size = 'md';
    this.name = undefined;
    this.value = 'on';
  }
  checkedChanged(isChecked) {
    this.changed.emit({
      checked: isChecked,
    });
  }
  setFocus() {
    this._focused = true;
    if (this.focusEl) {
      this.focusEl.focus();
    }
  }
  render() {
    const { isDisabled, isChecked, label, isFullWidth, size, name, value, _focused, } = this;
    const containerClass = {
      'container': true,
      [size]: true
    };
    const toggleClass = {
      toggle: true,
      disabled: isDisabled,
      checked: isChecked,
      focused: _focused,
    };
    const labelClass = {
      label: true,
      disabled: isDisabled,
    };
    renderHiddenInput(this.el, name, isDisabled, isChecked ? value : '');
    return (h(Host, { onFocusin: () => this.setFocus(), class: {
        'disabled': isDisabled,
        'full-width': isFullWidth,
      }, "aria-checked": `${isChecked}`, role: "switch", tabindex: isDisabled ? -1 : 0 }, h("div", { class: containerClass }, label && (h("label", { htmlFor: "hmc-toggle", class: labelClass }, label)), h("div", { onClick: this.onClick, class: toggleClass }, h("div", { class: "toggle-inner" })), h("input", { type: "checkbox", role: "switch", "aria-checked": `${isChecked}`, disabled: isDisabled, id: 'hmc-toggle', tabindex: "-1", onClick: e => {
        this.onClick(e);
      }, onBlur: () => {
        this._focused = false;
      }, ref: el => {
        this.focusEl = el;
      } }))));
  }
  static get is() { return "hmc-toggle"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["toggle.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["toggle.css"]
    };
  }
  static get properties() {
    return {
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set toggle's label\nDefault: undefined"
        },
        "attribute": "label",
        "reflect": false
      },
      "isChecked": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If `true`, the toggle is selected.\nDefault: `false`."
        },
        "attribute": "checked",
        "reflect": false,
        "defaultValue": "false"
      },
      "isDisabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies 'disabled' state of the toggle.\nDefault: `false`."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "isFullWidth": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If full-width is set to true. The toggle will fill the width of its parent.\nDefault: `false`."
        },
        "attribute": "full-width",
        "reflect": false,
        "defaultValue": "false"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ToggleSize",
          "resolved": "\"md\" | \"xs\"",
          "references": {
            "ToggleSize": {
              "location": "import",
              "path": "../type/size.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies size of component, reflected in label font.\nDefault: \"md\"."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'md'"
      },
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The name of the control, which is submitted with the form data."
        },
        "attribute": "name",
        "reflect": false
      },
      "value": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "any | null",
          "resolved": "any",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The value of the toggle does not mean if it's checked or not, use the `isChecked`\nproperty for that.\n\nThe value of a toggle is analogous to the value of an `<input type=\"checkbox\">`,\nit's only used when the toggle participates in a native `<form>`."
        },
        "attribute": "value",
        "reflect": false,
        "defaultValue": "'on'"
      }
    };
  }
  static get states() {
    return {
      "_focused": {}
    };
  }
  static get events() {
    return [{
        "method": "changed",
        "name": "changed",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the toggle has changed state."
        },
        "complexType": {
          "original": "{ checked: boolean }",
          "resolved": "{ checked: boolean; }",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "isChecked",
        "methodName": "checkedChanged"
      }];
  }
}
