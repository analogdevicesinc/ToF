import { html, nothing } from 'lit-html';
import { v4 as uuidv4 } from 'uuid';

import { supportedIcons } from '../icon/iconsMap';

import document from './input-field-documentation.mdx';
import readme from './readme.md';

export default {
  title: 'Components/Input Field',
  parameters: {
    componentSubtitle: 'Multipurpose input field',
    notes: readme,
    docs: {
      page: document,
    },
  },
  args: {
    size: 'md',
  },
  argTypes: {
    size: {
      control: {
        type: 'inline-radio',
        options: ['xs', 'sm', 'md'],
      },
    },
    iconName: {
      control: {
        type: 'select',
        options: supportedIcons,
      },
    },
    fieldType: {
      control: {
        type: 'inline-radio',
        options: ['number', 'string', 'password'],
      },
    },
    isRequired: {
      control: {
        type: 'boolean',
      },
    },
    status: {
      control: {
        type: 'inline-radio',
        options: ['normal', 'error', 'warning', 'info'],
      },
    },
    iconPlacement: {
      control: {
        type: 'inline-radio',
        options: ['left', 'right'],
      },
    },
    onBlur: {
      action: 'hmcBlur',
      table: {
        disable: true,
      },
    },
    onFocus: {
      action: 'hmcFocus',
      table: {
        disable: true,
      },
    },
    onChange: {
      action: 'hmcChange',
      table: {
        disable: true,
      },
    },
    onInput: {
      action: 'hmcInput',
      table: {
        disable: true,
      },
    },
  },
};

const createIcon = (name, showIcon, iconPlacement) =>
  showIcon
    ? html`<hmc-icon
        slot="${iconPlacement === 'left' ? 'prefix' : 'suffix'}"
        name="${name}"
      ></hmc-icon>`
    : nothing;

const createInput = ({
  size,
  withIcon = false,
  iconName,
  iconPlacement = 'left',
}) => ({
  value = '',
  status,
  isDisabled = false,
  isAutoFocused = false,
  isClearable = false,
  fieldType = 'string',
  placeholder = 'Placeholder',
  label = '',
  isRequired,
  helperText = '',
  hasHint = false,
  onInput,
  onChange,
  onFocus,
  onBlur,
}) => {
  return html`
    <hmc-input-field
      value=${value}
      placeholder=${placeholder}
      status=${status}
      field-type=${fieldType}
      size=${size}
      ?disabled=${isDisabled}
      ?autofocus="${isAutoFocused}"
      label=${label}
      required=${isRequired}
      optional-text="Optional"
      clearable=${isClearable}
      @hmcInput=${onInput}
      @hmcChange=${onChange}
      @hmcBlur=${onBlur}
      @hmcFocus=${onFocus}
      helper-text=${helperText}
    >
      ${createIcon(iconName, withIcon, iconPlacement)}
      ${hasHint ? createHint(uuidv4()) : nothing}
    </hmc-input-field>
  `;
};

const createHint = key => html`<div slot="hint" class="hint">
  <hmc-icon id="${key}" name="info-xs"></hmc-icon>
</div>`;

export const Playground = ({
  value,
  size,
  isDisabled,
  iconName,
  placeholder,
  onBlur,
  onChange,
  onFocus,
  onInput,
  status,
  fieldType,
  isAutoFocused,
  isClearable,
  label,
  isRequired,
  helperText,
  hasHint,
  iconPlacement,
}) => {
  const withIcon = !!iconName;

  return html`
    ${style}
    <div class="flex-display">
      ${createInput({ size, withIcon, iconName, iconPlacement })({
        value,
        status,
        isDisabled,
        isAutoFocused,
        isClearable,
        fieldType,
        placeholder,
        label,
        isRequired,
        helperText,
        hasHint,
        onInput,
        onFocus,
        onChange,
        onBlur,
      })}
    </div>
  `;
};
Playground.args = {
  value: '',
  size: 'md',
  placeholder: 'Placeholder',
  isDisabled: false,
  iconName: '',
  iconPlacement: 'left',
  fieldType: 'string',
  status: '',
  isAutoFocused: false,
  hasHint: false,
  isRequired: undefined,
  label: 'Label',
  helperText: '',
  isClearable: false,
};
export const States = ({
  value,
  size,
  iconName,
  placeholder,
  onBlur,
  onChange,
  onFocus,
  onInput,
  iconPlacement,
}) => {
  const withIcon = !!iconName;

  return html`
    ${style}
    <div class="flex-display statuses">
      ${createInput({ size, withIcon, iconName, iconPlacement })({
        value,
        status: 'normal',
        isDisabled: false,
        placeholder,
        label: 'Default',
        onBlur,
        onChange,
        onFocus,
        onInput,
      })}
      ${createInput({ size, withIcon, iconName, iconPlacement })({
        value: 'Filled Value',
        status: 'normal',
        isDisabled: true,
        placeholder,
        label: 'Disabled',
        helperText: 'Helper Message',
        onBlur,
        onChange,
        onFocus,
        onInput,
      })}
      ${createInput({ size, withIcon, iconName, iconPlacement })({
        value,
        status: 'warning',
        isDisabled: false,
        placeholder,
        label: 'Warning',
        helperText: 'Warning Message',
        onBlur,
        onChange,
        onFocus,
        onInput,
      })}
      ${createInput({ size, withIcon, iconName, iconPlacement })({
        value,
        status: 'error',
        isDisabled: false,
        placeholder,
        label: 'Error',
        helperText: 'Error Message',
        onBlur,
        onChange,
        onFocus,
        onInput,
      })}
      ${createInput({ size, withIcon, iconName, iconPlacement })({
        value,
        status: 'info',
        isDisabled: false,
        placeholder,
        label: 'Info',
        helperText: 'Info Message',
        onBlur,
        onChange,
        onFocus,
        onInput,
      })}
    </div>
  `;
};

States.argTypes = {
  size: {
    table: {
      disable: false,
    },
  },
  iconName: {
    table: {
      disable: false,
    },
  },
  iconPlacement: {
    table: {
      disable: false,
    },
  },
  fieldType: {
    table: {
      disable: true,
    },
  },
  status: {
    table: {
      disable: true,
    },
  },
  isRequired: {
    table: {
      disable: true,
    },
  },
  hasHint: {
    table: {
      disable: true,
    },
  },
};
export const Sizes = ({
  value,
  placeholder,
  onBlur,
  onChange,
  onFocus,
  onInput,
  status,
}) => {
  return html`
    ${style}
    <div class="flex-display">
      ${createInput({ size: 'md' })({
        value,
        status,
        placeholder,
        label: 'Medium',
        onBlur,
        onChange,
        onFocus,
        onInput,
      })}
      ${createInput({ size: 'sm' })({
        value,
        status,
        placeholder,
        label: 'Small',
        onBlur,
        onChange,
        onFocus,
        onInput,
      })}
      ${createInput({ size: 'xs' })({
        value,
        status,
        placeholder,
        label: 'Extra Small',
        onBlur,
        onChange,
        onFocus,
        onInput,
      })}
    </div>
  `;
};
Sizes.args = {
  value: '',
  status: '',
};
Sizes.argTypes = {
  size: {
    table: {
      disable: true,
    },
  },
  iconName: {
    table: {
      disable: true,
    },
  },
  iconPlacement: {
    table: {
      disable: true,
    },
  },
  fieldType: {
    table: {
      disable: true,
    },
  },
  isRequired: {
    table: {
      disable: true,
    },
  },
  hasHint: {
    table: {
      disable: true,
    },
  },
};
export const SearchField = ({
  value,
  size,
  onBlur,
  onChange,
  onFocus,
  onInput,
  label,
}) => {
  const createInput = ({ size }) => ({
    value = '',
    placeholder = 'Placeholder',
    label = '',
  }) => {
    return html`
      <span class="input-group">
        <hmc-input-field
          value=${value}
          placeholder=${placeholder}
          size=${size}
          label=${label}
          clearable="true"
          @hmcInput=${onInput}
          @hmcChange=${onChange}
          @hmcBlur=${onBlur}
          @hmcFocus=${onFocus}
        >
          <hmc-icon name="search-${size == 'xs' ? 's' : 'm'}" slot="prefix" />
        </hmc-input-field>
      </span>
    `;
  };

  return html`
    ${style}
    <div class="flex-display">
      ${createInput({ size, withIcon: true })({
        value,
        isClearable: true,
        placeholder: 'Search',
        label,
      })}
    </div>
  `;
};
SearchField.argTypes = {
  ...States.argTypes,
  iconName: {
    table: {
      disable: true,
    },
  },
  iconPlacement: {
    table: {
      disable: true,
    },
  },
};

/**
 * CONSTANT
 */

const style = html`
  <style>
    .container {
      padding: 0 100px 100px;
      width: 1686px;
    }
    .flex-display {
      display: flex;
      align-items: flex-end;
      gap: 16px;
    }
    .statuses {
      align-items: flex-start;
    }
    .hint {
      width: 12px;
      color: #212836;
    }
    .input-group {
      display: inline-flex;
      align-items: flex-start;
    }
  </style>
`;
