import { newSpecPage } from '@stencil/core/testing';
import { HmcModalOverlay } from '../modal-overlay';
describe('hmc-modal-overlay', () => {
  let page;
  beforeEach(async () => {
    page = await newSpecPage({
      components: [HmcModalOverlay],
    });
  });
  it('builds', async () => {
    expect(new HmcModalOverlay()).toBeTruthy();
  });
  describe('renders', () => {
    it('should render default component', async () => {
      await page.setContent('<hmc-modal-overlay></hmc-modal-overlay>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-modal-overlay>
          <mock:shadow-root></mock:shadow-root>
        </hmc-modal-overlay>
      `);
    });
    it('should render component with modal open', async () => {
      await page.setContent('<hmc-modal-overlay open></hmc-modal-overlay>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-modal-overlay open="">
          <mock:shadow-root>
            <div class="overlay">
              <slot></slot>
            </div>
          </mock:shadow-root>
        </hmc-modal-overlay>
      `);
    });
  });
  describe('methods', () => {
    let eventSpy;
    const mockEvent = new MouseEvent('click');
    beforeEach(async () => {
      await page.setContent('<hmc-modal-overlay></hmc-modal-overlay>');
      eventSpy = jest.fn();
      page.rootInstance.overlayEl = null;
      page.rootInstance.overlayClick = {
        emit: eventSpy,
      };
    });
    it('should close the modal when backdrop clicked', async () => {
      page.rootInstance.onOverlayClickHandler(mockEvent);
      expect(eventSpy).toHaveBeenCalled();
    });
  });
});
