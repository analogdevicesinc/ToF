import { h, Host, } from '@stencil/core';
import { renderHiddenInput } from '../../utils/utils';
const FIELD_ID = 'hmc-textarea-id';
/**
 * @slot hint - slot="hint" is used to pass a hint component. It will be rendered next to a label and if the label
 * prop was passed.
 */
export class HmcTextarea {
  constructor() {
    this.onBlur = event => {
      this.hmcBlur.emit(event);
    };
    this.onFocus = event => {
      this.hmcFocus.emit(event);
    };
    this.name = undefined;
    this.value = '';
    this.label = '';
    this.wrap = 'soft';
    this.isDisabled = false;
    this.isFullWidth = false;
    this.status = 'normal';
    this.helperText = undefined;
    this.isAutoFocused = false;
    this.autoComplete = 'off';
    this.isRequired = undefined;
    this.optionalText = undefined;
    this.hasCounter = false;
    this.hasSpellcheck = 'false';
    this.size = 'md';
    this.rows = 3;
    this.cols = 30;
    this.placeholder = undefined;
    this.minLength = undefined;
    this.maxLength = undefined;
    this.resize = 'none';
  }
  valueChanged() {
    if (this.textareaEl && this.textareaEl.value !== this.value) {
      // NOTE: don't use setAttribute ('value', ...) here, because that doesn't change the value of the input in every case.
      // example: the current value of input is '-200', if the new value should be '200',
      // 'setAttribute('value', 200)' won't change the value in the input
      this.textareaEl.value = this.value;
    }
  }
  onInput(event) {
    const input = event.target;
    if (input) {
      this.value = input.value || '';
    }
    this.hmcInput.emit({ value: this.value, nativeEvent: event });
  }
  onChange(event) {
    this.hmcChange.emit({ value: this.value, nativeEvent: event });
  }
  render() {
    const { isDisabled, isRequired, isFullWidth, label, placeholder, size, rows, cols, status, name, value, isAutoFocused, hasCounter, hasSpellcheck, minLength, maxLength, helperText, resize, wrap, autoComplete, optionalText, } = this;
    renderHiddenInput(this.el, name, isDisabled, this.value);
    const placeholderText = placeholder;
    const groupClassList = {
      'resizable': resize === 'vertical',
      'full-width': isFullWidth,
    };
    const inputGroup = (h("textarea", { rows: rows, cols: cols, class: groupClassList, id: FIELD_ID, ref: el => (this.textareaEl = el), onInput: event => this.onInput(event), onChange: event => this.onChange(event), onBlur: this.onBlur, onFocus: this.onFocus, autoFocus: isAutoFocused, name: name, value: value, autoComplete: autoComplete, spellcheck: hasSpellcheck, placeholder: placeholderText, disabled: isDisabled, maxLength: maxLength, minLength: minLength, wrap: wrap, onWheel: ev => ev.preventDefault() }));
    const wrapperClassList = {
      'textarea-wrapper': true,
      'disabled': isDisabled,
      'error': status === 'error',
      'warning': status === 'warning',
      'full-width': isFullWidth,
      [size]: true,
    };
    const fullWidth = {
      'full-width': isFullWidth,
    };
    return (h(Host, { ref: ref => (this.rootEl = ref), class: fullWidth }, h("div", { class: wrapperClassList }, h("div", { class: "textarea-label" }, !!label && (h("span", { class: "label" }, h("label", { htmlFor: FIELD_ID }, label), h("span", { class: "hint" }, h("slot", { name: "hint" })))), isRequired === false && (h("span", { class: "label-optional" }, optionalText))), inputGroup, h("div", { class: "bottom-text" }, ' ', status !== 'normal' && Boolean(helperText) && (h("div", { class: "helper-text" }, h("hmc-message", { status: status }, helperText))), hasCounter === true && (h("div", { class: "counter" }, this.value.toString().length, maxLength > 0 ? `/${maxLength}` : ''))))));
  }
  static get is() { return "hmc-textarea"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["textarea.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["textarea.css"]
    };
  }
  static get properties() {
    return {
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The name of the input for form submission.\nDefault: ''."
        },
        "attribute": "name",
        "reflect": false
      },
      "value": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The value of the input.\nDefault: ''."
        },
        "attribute": "value",
        "reflect": false,
        "defaultValue": "''"
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies label text of the input. For accessibility, a label must be used to identify the input field.\nDefault: ''."
        },
        "attribute": "label",
        "reflect": false,
        "defaultValue": "''"
      },
      "wrap": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'hard' | 'soft'",
          "resolved": "\"hard\" | \"soft\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "How the control should wrap the value for form submission. Hard automatically adds line breaks and Soft uses existing ones.\nDefault: 'soft'."
        },
        "attribute": "wrap",
        "reflect": false,
        "defaultValue": "'soft'"
      },
      "isDisabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies 'disabled' state of the icon.\nDefault, `false`."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "isFullWidth": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If enabled, input will be loaded with 'width: 100%'.\nDefault, `false`."
        },
        "attribute": "full-width",
        "reflect": false,
        "defaultValue": "false"
      },
      "status": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "InputStatusType",
          "resolved": "\"error\" | \"info\" | \"normal\" | \"warning\"",
          "references": {
            "InputStatusType": {
              "location": "import",
              "path": "../type/status.type"
            }
          }
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "Provide issue type for input\nDefault, `normal`."
        },
        "attribute": "status",
        "reflect": false,
        "defaultValue": "'normal'"
      },
      "helperText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "String for the issue displayed under input."
        },
        "attribute": "helper-text",
        "reflect": false
      },
      "isAutoFocused": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If enabled, input will be focused.\nDefault: 'false'."
        },
        "attribute": "autofocus",
        "reflect": false,
        "defaultValue": "false"
      },
      "autoComplete": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'on' | 'off'",
          "resolved": "\"off\" | \"on\"",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "If 'on', autocomplete prompts can be used.\nDefault: 'off'."
        },
        "attribute": "autocomplete",
        "reflect": false,
        "defaultValue": "'off'"
      },
      "isRequired": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "Based on this prop \"optional\" label could be shown or not.\nDefault: 'undefined'."
        },
        "attribute": "required",
        "reflect": false
      },
      "optionalText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "String to indicate the input is optional in a form, shown when required=false."
        },
        "attribute": "optional-text",
        "reflect": false
      },
      "hasCounter": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If enabled, a counter will display the amount of characters.\nDefault: 'false'."
        },
        "attribute": "has-counter",
        "reflect": false,
        "defaultValue": "false"
      },
      "hasSpellcheck": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'true' | 'false'",
          "resolved": "\"false\" | \"true\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If enabled, the browser's spellchecker will be run on the value of the textarea.\nDefault: 'false'."
        },
        "attribute": "spellcheck",
        "reflect": false,
        "defaultValue": "'false'"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "InputSize",
          "resolved": "\"md\" | \"sm\" | \"xs\"",
          "references": {
            "InputSize": {
              "location": "import",
              "path": "../type/size.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The size of the input.\nAvailable options are: \"xs\", \"sm\" and \"md\".\nDefault: \"md\"."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'md'"
      },
      "rows": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies height of the area by number of rows of characters\nDefault: '3'."
        },
        "attribute": "rows",
        "reflect": false,
        "defaultValue": "3"
      },
      "cols": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies height of the area by number of rows of characters\nDefault: '30'."
        },
        "attribute": "cols",
        "reflect": false,
        "defaultValue": "30"
      },
      "placeholder": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies placeholder of the textarea."
        },
        "attribute": "placeholder",
        "reflect": false
      },
      "minLength": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number | undefined",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The minlength specifies the minimum length (in characters) of the textarea."
        },
        "attribute": "minlength",
        "reflect": false
      },
      "maxLength": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number | undefined",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The maxlength specifies the maximum length (in characters) of the textarea."
        },
        "attribute": "maxlength",
        "reflect": false
      },
      "resize": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'none' | 'vertical'",
          "resolved": "\"none\" | \"vertical\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If enabled, displays a resize handle, allowing you to scale the textarea vertically."
        },
        "attribute": "resize",
        "reflect": false,
        "defaultValue": "'none'"
      }
    };
  }
  static get events() {
    return [{
        "method": "hmcInput",
        "name": "hmcInput",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the value has changed."
        },
        "complexType": {
          "original": "HmcTextareaEventDetail",
          "resolved": "HmcTextareaEventDetail",
          "references": {
            "HmcTextareaEventDetail": {
              "location": "import",
              "path": "./textarea-interface"
            }
          }
        }
      }, {
        "method": "hmcChange",
        "name": "hmcChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the value has changed."
        },
        "complexType": {
          "original": "HmcTextareaEventDetail",
          "resolved": "HmcTextareaEventDetail",
          "references": {
            "HmcTextareaEventDetail": {
              "location": "import",
              "path": "./textarea-interface"
            }
          }
        }
      }, {
        "method": "hmcBlur",
        "name": "hmcBlur",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the input loses focus."
        },
        "complexType": {
          "original": "FocusEvent",
          "resolved": "FocusEvent",
          "references": {
            "FocusEvent": {
              "location": "global"
            }
          }
        }
      }, {
        "method": "hmcFocus",
        "name": "hmcFocus",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the input loses focus."
        },
        "complexType": {
          "original": "FocusEvent",
          "resolved": "FocusEvent",
          "references": {
            "FocusEvent": {
              "location": "global"
            }
          }
        }
      }];
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "value",
        "methodName": "valueChanged"
      }];
  }
}
