import { html } from 'lit-html';

import documentation from './chip-documentation.mdx';
import readme from './readme.md';

export default {
  title: 'Components/Chip',
  parameters: {
    notes: readme,
    docs: { page: documentation },
  },
  argTypes: {
    size: {
      control: {
        type: 'inline-radio',
        options: ['xs', 'sm', 'md'],
      },
    },

    onHmcChange: { action: 'hmcChange' },
  },
};

const style = html`
  <style>
    .flex-display {
      display: flex;
      align-items: flex-end;
      gap: 16px;
    }
  </style>
`;

const createChip = (
  label = 'Primary',
  size = 'md',
  handler,
  disabled,
  selected,
  hasIcon,
  hasCheckmark,
) => html`
  <hmc-chip
    size="${size}"
    ?disabled="${disabled}"
    ?selected="${selected}"
    ?checkmark="${hasCheckmark}"
    @hmcChange="${handler}"
  >
    ${content(label, hasIcon, size)}
  </hmc-chip>
`;

const content = (text, icon, cSize) => {
  const iconName = `placeholder-${cSize === 'xs' ? 's' : 'm'}`;
  if (icon) {
    return html`
      ${icon && html`<hmc-icon name="${iconName}" slot="icon"></hmc-icon>`}
      <span class="text text-only">${text}</span>
    `;
  } else {
    return html`<span class="text-only">${text}</span>`;
  }
};

const Template = ({
  hasCheckmark,
  hasIcon,
  isDisabled,
  isSelected,
  label,
  onHmcChange,
  size,
}) => {
  return html`
    <div style="padding: 16px;">
      ${createChip(
        label,
        size,
        onHmcChange,
        isDisabled,
        isSelected,
        hasIcon,
        hasCheckmark,
      )}
    </div>
  `;
};

export const Selection = ({ hasCheckmark, hasIcon, size, onHmcChange }) => {
  const createSelectionChip = (label, disabled, selected) => {
    return createChip(
      label,
      size,
      onHmcChange,
      disabled,
      selected,
      hasIcon,
      hasCheckmark,
    );
  };

  return html`
    ${style}
    <div>
      <div class="flex-display" style="padding: 16px;">
        ${createSelectionChip('Chip', false, false)}
        ${createSelectionChip('Selected Chip', false, true)}
        ${createSelectionChip('Disabled Chip', true, false)}
        ${createSelectionChip('Disabled Selected Chip', true, true)}
      </div>
    </div>
  `;
};
export const Sizes = ({
  isDisabled,
  hasCheckmark,
  hasIcon,
  onHmcChange,
  isSelected,
}) => {
  const createSizeChip = (label, size) => {
    return createChip(
      label,
      size,
      onHmcChange,
      isDisabled,
      isSelected,
      hasIcon,
      hasCheckmark,
    );
  };

  return html`
    ${style}
    <div>
      <div class="flex-display" style="padding: 16px;">
        ${createSizeChip('Medium', 'md')} ${createSizeChip('Small', 'sm')}
        ${createSizeChip('Extra Small', 'xs')}
      </div>
    </div>
  `;
};

export const Playground = Template.bind({});
Selection.args = {
  hasCheckmark: true,
  hasIcon: false,
  size: 'md',
};
Sizes.args = {
  hasCheckmark: true,
  hasIcon: false,
  isDisabled: false,
  isSelected: false,
};
Sizes.argTypes = {
  size: {
    table: {
      disable: true,
    },
  },
};
Playground.args = {
  hasCheckmark: true,
  hasIcon: false,
  isDisabled: false,
  isSelected: false,
  label: 'Chip',
  size: 'md',
};
