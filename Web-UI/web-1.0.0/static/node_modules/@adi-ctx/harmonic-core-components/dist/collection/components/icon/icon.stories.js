import { html, render } from 'lit-html';
import document from './icon-documentation.mdx';
import { supportedIcons, categories } from './iconsMap';
import readme from './readme.md';

export default {
  title: 'Components/Icon',
  parameters: {
    notes: readme,
    docs: {
      page: document,
    },
  },
  args: {
    name: 'add-m',
    searchQuery: '',
  },
  argTypes: {
    name: {
      control: {
        type: 'select',
        options: supportedIcons,
      },
    },
    category: {
      control: {
        type: 'select',
        options: Object.keys(categories),
      },
    },
    searchQuery: {
      control: 'text',
      description: 'Search icons',
    },
  },
};

const style = html`
  <style>
    .caption {
      text-align: center;
      margin-top: 8px;
    }
    .list {
      display: flex;
      flex-wrap: wrap;
    }
    .package {
      display: flex;
      align-items: center;
      flex-direction: column;
      justify-content: space-between;
      margin: 0 24px 24px 0;
      border: 1px dashed #f0f2f5;
      padding: 8px;
      border-radius: 4px;
      position: relative;
      width: 120px; /* Card width */
      height: 120px; /* Card height */
      text-align: center;
      cursor: pointer;
    }
    .package:hover {
      box-shadow: #f0f2f5 0 0 23px -2px;
    }
    .icon-wrapper {
      display: flex;
      justify-content: center;
      align-items: center;
      flex-grow: 1;
    }
    .icon-buttons {
      display: none;
      position: absolute;
      bottom: 8px;
      right: 8px;
      gap: 4px;
    }
    .icon-button {
      background: none;
      border: none;
      cursor: pointer;
      padding: 4px;
      border-radius: 4px;
    }
    .package:hover .icon-buttons {
      display: flex;
    }
  </style>
`;

const downloadSVG = iconName => {
  const a = window.document.createElement('a');
  const data = new Blob([
    window.document.querySelector(`hmc-icon[name="${iconName}"]`).shadowRoot
      .firstChild.innerHTML,
  ]);
  const url = URL.createObjectURL(data);
  a.href = url;
  a.download = `${iconName}.svg`;
  window.document.body.appendChild(a);
  a.click();
  URL.revokeObjectURL(url);
  a.remove();
};

const copyToClipboard = text => {
  navigator.clipboard
    .writeText(text)
    .then(() => {
      console.log(`Copied to clipboard: ${text}`);
    })
    .catch(err => {
      console.error('Could not copy text: ', err);
    });
};

const Template = ({ category, searchQuery }) => {
  const createIcon = icon => html`
    <div class="package" @click="${() => copyToClipboard(icon)}">
      <div class="hmc-subtitle-xs">${icon}</div>

      <div class="icon-wrapper">
        <hmc-icon name="${icon}"></hmc-icon>
      </div>

      <div class="icon-buttons" @click="${e => e.stopPropagation()}">
        <hmc-button
          size="xs"
          kind="secondary"
          icon-only=""
          class=""
          @click="${() => downloadSVG(icon)}"
        >
          <hmc-icon name="download-s"></hmc-icon>
        </hmc-button>

        <hmc-button
          size="xs"
          kind="secondary"
          icon-only=""
          class=""
          @click="${() => copyToClipboard(icon)}"
        >
          <hmc-icon name="copy-s"></hmc-icon>
        </hmc-button>
      </div>
    </div>
  `;
  const createCategory = (icons, categoryTitle) => html`
    <div>
      <div class="hmc-title-xs">${categoryTitle}</div>
      <div class="list">${icons}</div>
    </div>
  `;

  var categoriesHtml = null;

  //apply search query
  const filterIconsBySearch = (icons, category) => {
    return icons
      .filter(icon => icon.toLowerCase().includes(searchQuery.toLowerCase()))
      .map(icon => createIcon(icon, category));
  };

  //if selected category is allIcons
  if (category == Object.keys(categories)[0]) {
    categoriesHtml = Object.keys(categories)
      .slice(1)
      .map(categoryFilter => {
        const result = categoryFilter.replace(/([A-Z])/g, ' $1');
        const categoryTitle = result.charAt(0).toUpperCase() + result.slice(1);

        const filteredIcons = filterIconsBySearch(
          categories[categoryFilter],
          categoryFilter,
        );

        if (filteredIcons.length == 0) {
          return;
        }

        return createCategory(filteredIcons, categoryTitle);
      });
  } else {
    //selected specific category
    const result = category.replace(/([A-Z])/g, ' $1');
    const categoryTitle = result.charAt(0).toUpperCase() + result.slice(1);

    const filteredIcons = filterIconsBySearch(categories[category], category);

    if (filteredIcons.length == 0) {
      return;
    }

    categoriesHtml = createCategory(filteredIcons, categoryTitle);
  }

  return html`
    ${style}
    <div">
      ${categoriesHtml}
    </div>
  `;
};

export const Playground = ({ name }) => {
  return html`
    <div>
      <hmc-icon name="${name}"></hmc-icon>
    </div>
  `;
};

Playground.argTypes = {
  category: {
    table: {
      disable: true,
    },
  },
  searchQuery: {
    table: {
      disable: true,
    },
  },
};

export const SupportedIcons = Template.bind({});

SupportedIcons.args = {
  category: Object.keys(categories)[0],
  searchQuery: '',
};

SupportedIcons.argTypes = {
  name: {
    table: {
      disable: true,
    },
  },
};
