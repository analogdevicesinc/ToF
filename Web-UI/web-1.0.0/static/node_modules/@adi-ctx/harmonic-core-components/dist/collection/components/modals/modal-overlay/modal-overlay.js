import { h } from '@stencil/core';
/**
 * @slot - An unnamed slot is used to pass child nodes to the ModalOverlay component.
 * All children will be overlaid by ModalOverlay in case of isOpen prop is equal to true.
 */
export class HmcModalOverlay {
  constructor() {
    this.isOpen = false;
  }
  onOverlayClickHandler({ target }) {
    if (target === this.overlayEl) {
      this.overlayClick.emit();
    }
  }
  render() {
    const { isOpen } = this;
    const rootClass = {
      'overlay': true,
    };
    return isOpen && (h("div", { ref: ref => (this.overlayEl = ref), class: rootClass, onClick: (e) => this.onOverlayClickHandler(e) }, h("slot", null)));
  }
  static get is() { return "hmc-modal-overlay"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["modal-overlay.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["modal-overlay.css"]
    };
  }
  static get properties() {
    return {
      "isOpen": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies isOpen prop, if `true`, the overlay will be visible.\nDefault: false"
        },
        "attribute": "open",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get events() {
    return [{
        "method": "overlayClick",
        "name": "overlayClick",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "'overlayClick' event emitted when a user clicks on a overlay\nlistens to this event to handle self-closing."
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
}
