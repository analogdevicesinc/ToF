import { newSpecPage } from '@stencil/core/testing';
import { HmcAccordion } from '../accordion';
describe('hmc-accordion', () => {
  it('builds', async () => {
    expect(new HmcAccordion()).toBeTruthy();
  });
  describe('renders', () => {
    it('should render default component', async () => {
      const { root } = await newSpecPage({
        components: [HmcAccordion],
        html: '<hmc-accordion></hmc-accordion>',
      });
      expect(root).toMatchInlineSnapshot(`
        <hmc-accordion>
          <mock:shadow-root>
            <div aria-level="3" class="header" role="heading">
              <button aria-controls="content" aria-expanded="false" class="md" id="header-button">
                <hmc-icon class="arrow" name="chevron-right-xs"></hmc-icon>
                <slot name="header"></slot>
              </button>
            </div>
            <div aria-labelledby="header-button" class="content" id="content" role="region">
              <div class="content-inner">
                <slot name="content"></slot>
              </div>
            </div>
          </mock:shadow-root>
        </hmc-accordion>
      `);
    });
  });
  describe('methods', () => {
    let cpanel;
    let eventSpy;
    beforeEach(() => {
      cpanel = new HmcAccordion();
      eventSpy = jest.fn();
    });
    it('should open the panel', () => {
      cpanel.accordionChange = {
        emit: eventSpy,
      };
      cpanel.togglePanel();
      expect(eventSpy).toHaveBeenCalledWith({ open: true });
      expect(cpanel.isOpen).toBeTruthy();
    });
    it('should toggle when open prop is changed', async () => {
      const handleMock = (cpanel.handlePanelCollapsing = jest.fn());
      cpanel.watchIsOpenHandler(true);
      expect(handleMock).toHaveBeenCalled();
    });
  });
});
