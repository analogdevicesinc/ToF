import { html } from 'lit-html';

import documentation from './dropdown-menu-button-documentation.mdx';
import readme from './readme.md';

export default {
  title: 'Components/Dropdown Menu Button',
  parameters: {
    notes: readme,
    docs: {
      page: documentation,
    },
  },
  argTypes: {
    size: {
      control: {
        type: 'inline-radio',
        options: ['xs', 'sm', 'md'],
      },
    },
    kind: {
      control: {
        type: 'inline-radio',
        options: ['primary', 'secondary', 'tertiary', 'ghost'],
      },
    },
    onToggled: { action: 'toggled' },
  },
};

const style = html` <style>
  .backdrop {
    background-color: var(--hmc-color-layout-canvas);
    height: 600px;
  }
  .container {
    width: fit-content;
  }
</style>`;

const renderDropdownOptions = (size, hasGroupTitle) => {
  var title = hasGroupTitle ? 'Title' : '';
  return html`
    <hmc-dropdown-group group-title=${title} size=${size}>
      ${Array.from(Array(5)).map((_, index) => {
        return html`
          <hmc-dropdown-option size=${size} value=${index}>
            Item ${index + 1}
          </hmc-dropdown-option>
        `;
      })}
    </hmc-dropdown-group>
    <hmc-dropdown-group group-title=${title} size=${size}>
      ${Array.from(Array(5)).map((_, index) => {
        return html`
          <hmc-dropdown-option size=${size} value=${index + 5}>
            Item ${index + 6}
          </hmc-dropdown-option>
        `;
      })}
    </hmc-dropdown-group>
  `;
};

const renderDifferentDropdownOptions = (size, hasGroupTitle) => {
  var title = hasGroupTitle ? 'Title' : '';
  return html`
    <hmc-dropdown-group group-title=${title} size=${size}>
      ${Array.from(Array(10)).map((_, index) => {
        return html`
          <hmc-dropdown-option
            value=${index}
            size=${size}
            disabled=${index % 5 == 1 ? true : false}
            action=${index / 2 > 2 ? true : false}
          >
            ${index % 2 == 0
              ? html` <hmc-icon
                  slot="left-icon"
                  name="placeholder-${size === 'xs' ? 's' : 'm'}"
                ></hmc-icon>`
              : ''}

            <span>${index / 2 > 2 ? 'Action' : ''} Item ${index + 1}</span>
            <span slot="caption">${index % 3 == 2 ? 'Caption' : ''}</span>

            ${index % 3 == 0
              ? html`<hmc-icon
                  slot="right-icon"
                  name="placeholder-${size === 'xs' ? 's' : 'm'}"
                ></hmc-icon>`
              : ''}
            ${index % 3 == 2 ? html`<span slot="right-value">xX</span>` : ''}
          </hmc-dropdown-option>
        `;
      })}
    </hmc-dropdown-group>

    <hmc-dropdown-group group-title=${title} size=${size}>
      ${Array.from(Array(3)).map((_, index) => {
        return html`
          <hmc-dropdown-option size=${size} value=${index + 10}>
            Item ${index + 11}
          </hmc-dropdown-option>
        `;
      })}
    </hmc-dropdown-group>
  `;
};

const Template = ({
  size,
  label,
  kind,
  loading,
  inverse,
  disabled,
  hasLeftIcon,
  hasGroupTitle,
  onToggled,
}) => {
  const handleSelection = event => {
    const { value } = event.detail;
    const options = document.querySelectorAll('hmc-dropdown-option');
    options.forEach(option => {
      option.isSelected = option.value === value;
    });
  };

  const iconName = size === 'xs' ? 'placeholder-s' : 'placeholder-m';

  const singleDropdownMenuButton = html`<hmc-dropdown-menu-button
    size=${size}
    kind=${kind}
    loading=${loading}
    disabled=${disabled}
    inverse=${inverse}
    id="trigger"
    @toggled=${onToggled}
  >
    <hmc-dropdown-menu slot="menu" trigger-id="trigger">
      ${renderDifferentDropdownOptions(size, hasGroupTitle)}
    </hmc-dropdown-menu>
    ${hasLeftIcon
      ? html`<hmc-icon slot="icon-left" name=${iconName}></hmc-icon>`
      : ''}
    <span>${label}</span>
  </hmc-dropdown-menu-button> `;

  return html`${style}
    <div class="backdrop">
      <div
        class="container"
        style=" padding: 16px;background: ${inverse
          ? 'var(--hmc-color-system-primary-strong)'
          : 'var(--hmc-color-layout-canvas)'};"
        @hmcDropdownSelection=${handleSelection}
      >
        ${singleDropdownMenuButton}
      </div>
    </div>`;
};

export const Playground = Template.bind({});
Playground.args = {
  size: 'md',
  kind: 'primary',
  label: 'Button Label',
  loading: false,
  disabled: false,
  inverse: false,
  hasLeftIcon: true,
  hasGroupTitle: true,
};

export const States = ({ size, loading, inverse, disabled, hasGroupTitle }) => {
  const iconName = size === 'xs' ? 'placeholder-s' : 'placeholder-m';

  return html`${style}

    <div class="backdrop">
      <div style="display: grid; gap:15px">
        <div
          class="container"
          style=" padding: 16px;background: ${inverse
            ? 'var(--hmc-color-system-primary-strong)'
            : 'var(--hmc-color-layout-canvas)'};"
        >
          <hmc-dropdown-menu-button
            size=${size}
            kind="primary"
            loading=${loading}
            disabled=${disabled}
            inverse=${inverse}
            id="primary-trigger"
          >
            <hmc-dropdown-menu slot="menu" trigger-id="primary-trigger">
              ${renderDropdownOptions(size, hasGroupTitle)}
            </hmc-dropdown-menu>
            <hmc-icon slot="icon-left" name=${iconName}></hmc-icon>
            Primary Button
          </hmc-dropdown-menu-button>
        </div>
        <div
          class="container"
          style=" padding: 16px;background: ${inverse
            ? 'var(--hmc-color-system-primary-strong)'
            : 'var(--hmc-color-layout-canvas)'};"
        >
          <hmc-dropdown-menu-button
            size=${size}
            kind="secondary"
            loading=${loading}
            disabled=${disabled}
            inverse=${inverse}
            id="secondary-trigger"
          >
            <hmc-dropdown-menu slot="menu" trigger-id="secondary-trigger">
              ${renderDropdownOptions(size, hasGroupTitle)}
            </hmc-dropdown-menu>
            <hmc-icon slot="icon-left" name=${iconName}></hmc-icon>
            Secondary Button
          </hmc-dropdown-menu-button>
        </div>
        <div
          class="container"
          style=" padding: 16px;background: ${inverse
            ? 'var(--hmc-color-system-primary-strong)'
            : 'var(--hmc-color-layout-canvas)'};"
        >
          <hmc-dropdown-menu-button
            size=${size}
            kind="tertiary"
            loading=${loading}
            disabled=${disabled}
            inverse=${inverse}
            id="tertiary-trigger"
          >
            <hmc-dropdown-menu slot="menu" trigger-id="tertiary-trigger">
              ${renderDropdownOptions(size, hasGroupTitle)}
            </hmc-dropdown-menu>
            <hmc-icon slot="icon-left" name=${iconName}></hmc-icon>
            Tertiary Button
          </hmc-dropdown-menu-button>
        </div>
        <div
          class="container"
          style=" padding: 16px;background: ${inverse
            ? 'var(--hmc-color-system-primary-strong)'
            : 'var(--hmc-color-layout-canvas)'};"
        >
          <hmc-dropdown-menu-button
            size=${size}
            kind="ghost"
            loading=${loading}
            disabled=${disabled}
            inverse=${inverse}
            id="ghost-trigger"
          >
            <hmc-dropdown-menu slot="menu" trigger-id="ghost-trigger">
              ${renderDropdownOptions(size, hasGroupTitle)}
            </hmc-dropdown-menu>
            <hmc-icon slot="icon-left" name=${iconName}></hmc-icon>
            Ghost Button
          </hmc-dropdown-menu-button>
        </div>
      </div>
    </div> `;
};

States.args = {
  size: 'md',
  loading: false,
  disabled: false,
  inverse: false,
  hasGroupTitle: true,
};
States.argTypes = {
  kind: {
    table: {
      disable: true,
    },
  },
  label: {
    table: {
      disable: true,
    },
  },
};
