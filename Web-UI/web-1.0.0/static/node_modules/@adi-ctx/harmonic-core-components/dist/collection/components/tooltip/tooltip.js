import flip from '@popperjs/core/lib/modifiers/flip';
import offset from '@popperjs/core/lib/modifiers/offset';
import { createPopper } from '@popperjs/core/lib/popper-lite';
import { h } from '@stencil/core';
/**
 * @slot - An unnamed slot is used to pass content to the Tooltip component.
 */
export class HmcTooltip {
  constructor() {
    this.selectTooltipTarget = () => {
      var _a;
      if (this.triggerId !== '') {
        const rootElement = this.el.getRootNode();
        this.triggerElement =
          (_a = document.getElementById(this.triggerId)) !== null && _a !== void 0 ? _a : rootElement.querySelector(`#${this.triggerId}`);
      }
    };
    this.handleTooltip = () => {
      if (this.isOpen) {
        const xoffset = this.placement.endsWith('end')
          ? 12
          : this.placement.endsWith('start')
            ? -12
            : 0;
        this.tooltipInstance = createPopper(this.triggerElement, this.tooltipEl, {
          placement: this.placement,
          strategy: 'absolute',
          modifiers: [
            {
              name: 'offset',
              options: {
                offset: [xoffset, 8],
              },
            },
            {
              name: 'flip',
              options: {
                flipVariations: false,
              },
            },
            flip,
            offset,
          ],
        });
      }
      else if (this.tooltipInstance) {
        this.tooltipInstance.destroy();
        this.tooltipInstance = null;
      }
    };
    this.triggerId = undefined;
    this.placement = 'bottom';
    this.toggleTitle = '';
    this.isOpen = false;
    this.isFixedWidth = false;
    this.isToggle = false;
    this.size = 'sm';
  }
  updateOnTriggerIdChange() {
    this.selectTooltipTarget();
  }
  closeTooltip(ev) {
    if (this.isOpen && (ev.code === 'Esc' || ev.code === 'Escape')) {
      this.isOpen = false;
    }
  }
  componentDidUpdate() {
    this.handleTooltip();
  }
  componentDidLoad() {
    this.selectTooltipTarget();
    if (this.triggerElement) {
      if (this.isToggle) {
        this.triggerElement.addEventListener('click', ev => {
          ev.stopPropagation();
          this.isOpen = !this.isOpen;
        });
      }
      else {
        this.triggerElement.addEventListener('mouseenter', ev => {
          ev.stopPropagation();
          this.isOpen = true;
        });
        this.triggerElement.addEventListener('mouseleave', ev => {
          ev.stopPropagation();
          this.isOpen = false;
        });
        this.triggerElement.addEventListener('focusin', ev => {
          ev.stopPropagation();
          this.isOpen = true;
        });
        this.triggerElement.addEventListener('focusout', ev => {
          ev.stopPropagation();
          this.isOpen = false;
        });
      }
      this.handleTooltip();
    }
  }
  render() {
    const { isOpen, isFixedWidth, isToggle, toggleTitle, size } = this;
    const wrapperClasses = {
      'wrapper': true,
      'show': isOpen,
      'fixed-width': isFixedWidth,
    };
    const tooltipClasses = {
      tooltip: true,
      toggle: isToggle,
      [size]: true,
    };
    return (h("div", { class: wrapperClasses, ref: ref => (this.tooltipEl = ref) }, h("div", { class: tooltipClasses }, h("div", { class: "title" }, toggleTitle), h("slot", null)), h("div", { id: "arrow" })));
  }
  static get is() { return "hmc-tooltip"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["tooltip.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["tooltip.css"]
    };
  }
  static get properties() {
    return {
      "triggerId": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies id of the element (triggerElement) that will be show/hide tooltip."
        },
        "attribute": "trigger-id",
        "reflect": false
      },
      "placement": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "TooltipPlacement",
          "resolved": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"right\" | \"top\" | \"top-end\" | \"top-start\"",
          "references": {
            "TooltipPlacement": {
              "location": "import",
              "path": "../type/variant.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies placement where tooltip will be render relatively to the triggerElement.\nDefault: 'bottom'."
        },
        "attribute": "placement",
        "reflect": false,
        "defaultValue": "'bottom'"
      },
      "toggleTitle": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adds a title to a toggletip element.\nDefault: `''`"
        },
        "attribute": "toggle-title",
        "reflect": false,
        "defaultValue": "''"
      },
      "isOpen": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Use to programatically set the initial open state of the tooltip.\nDefault: 'false'."
        },
        "attribute": "open",
        "reflect": false,
        "defaultValue": "false"
      },
      "isFixedWidth": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies whether the component fits content or is fixed width.\nDefault: 'false'."
        },
        "attribute": "fixed-width",
        "reflect": false,
        "defaultValue": "false"
      },
      "isToggle": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies whether the component is a toggletip.\nDefault: 'false'."
        },
        "attribute": "toggle",
        "reflect": false,
        "defaultValue": "false"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "TooltipSize",
          "resolved": "\"sm\" | \"xs\"",
          "references": {
            "TooltipSize": {
              "location": "import",
              "path": "../type/size.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies the size of the tooltip.\nAvailable options are: \"xs\", \"sm\".\nDefault: 'sm'."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'sm'"
      }
    };
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "triggerId",
        "methodName": "updateOnTriggerIdChange"
      }];
  }
  static get listeners() {
    return [{
        "name": "keydown",
        "method": "closeTooltip",
        "target": "document",
        "capture": false,
        "passive": false
      }];
  }
}
