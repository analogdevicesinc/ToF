import { newE2EPage } from '@stencil/core/testing';
describe('hmc-button', () => {
  let page;
  let button;
  describe('when clicked', () => {
    beforeEach(async () => {
      page = await newE2EPage();
      await page.setContent(`<hmc-button>Label</hmc-button>`);
      button = await page.find('hmc-button >>> button');
    });
    it('executes the callback function', async () => {
      const callback = jest.fn();
      await page.exposeFunction('functionToInject', callback);
      await page.$eval('hmc-button', (elm) => {
        // https://github.com/ionic-team/stencil/issues/1174#issuecomment-723826909
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore.
        elm.onclick = this.functionToInject;
      });
      await page.waitForChanges();
      await button.click();
      expect(callback).toBeCalled();
    });
    it('does nothing when disabled', async () => {
      const callback = jest.fn();
      await page.exposeFunction('functionToInject', callback);
      await page.$eval('hmc-button', (elm) => {
        // NOTE
        // MaxR: Haven't found a right solution for "Object is possibly 'undefined'." here yet
        // ZuBB: https://github.com/ionic-team/stencil/issues/1174#issuecomment-723826909
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore.
        elm.onclick = this.functionToInject;
        elm.setAttribute('disabled', "true");
      });
      await page.waitForChanges();
      await button.click();
      expect(callback).not.toBeCalled();
    });
  });
  describe('when used in a form', () => {
    it('should submit the form', async () => {
      page = await newE2EPage();
      await page.setContent(`
        <form>
          <input type="text" name="a" />
          <input type="text" name="b" />
          <hmc-button type="submit">Submit</hmc-button>
        </form>
      `);
      button = await page.find('hmc-button >>> button');
      const form = await page.find('form');
      const spy = await form.spyOnEvent('submit');
      await button.click();
      expect(spy).toHaveReceivedEvent();
    });
  });
  describe('when processing', () => {
    it('should retain the same width', async () => {
      page = await newE2EPage();
      await page.setContent(`<hmc-button>Label</hmc-button>`);
      button = await page.find('hmc-button >>> button');
      const initalWidth = (await button.getComputedStyle()).width;
      await page.$eval('hmc-button', (elm) => {
        elm.setAttribute('processing', 'true');
      });
      page.waitForChanges();
      const processingWidth = (await button.getComputedStyle()).width;
      expect(initalWidth).toBe(processingWidth);
    });
  });
});
