import { newSpecPage } from '@stencil/core/testing';
import { HmcTextarea } from '../textarea';
describe('hmc-textarea', () => {
  let page;
  beforeEach(async () => {
    page = await newSpecPage({
      components: [HmcTextarea],
    });
  });
  it('builds', async () => {
    expect(new HmcTextarea()).toBeTruthy();
  });
  describe('renders', () => {
    it('should render default component', async () => {
      await page.setContent('<hmc-textarea name="textarea-name"></hmc-textarea>');
      expect(page.root).toMatchInlineSnapshot(`
  <hmc-textarea name="textarea-name">
    <mock:shadow-root>
      <div class="md textarea-wrapper">
        <div class="textarea-label"></div><textarea autocomplete="off" cols="30" id="hmc-textarea-id" name="textarea-name" rows="3" spellcheck="false" value="" wrap="soft"></textarea>
        <div class="bottom-text"></div>
      </div>
    </mock:shadow-root>
    <input class="aux-input" name="textarea-name" type="hidden" value="">
  </hmc-textarea>
      `);
    });
    it('should render warning full width component', async () => {
      await page.setContent('<hmc-textarea status="warning" helper-text="stencil" full-width></hmc-textarea>');
      expect(page.root).toMatchInlineSnapshot(`
      <hmc-textarea class="full-width" full-width="" helper-text="stencil" status="warning">
        <mock:shadow-root>
          <div class="full-width md textarea-wrapper warning">
            <div class="textarea-label"></div><textarea autocomplete="off" class="full-width" cols="30" id="hmc-textarea-id" rows="3" spellcheck="false" value="" wrap="soft"></textarea>
            <div class="bottom-text">
              <div class="helper-text">
                <hmc-message status="warning">
                  stencil
                </hmc-message>
              </div>
            </div>
          </div>
        </mock:shadow-root>
        <input class="aux-input" name="undefined" type="hidden" value="">
      </hmc-textarea>
      `);
    });
  });
  describe('methods', () => {
    let eventSpy;
    beforeEach(async () => {
      eventSpy = jest.fn();
    });
    it('should watch the value change with textareaEl', async () => {
      await page.setContent('<hmc-textarea></hmc-textarea>');
      page.rootInstance.value = 'ADI';
      expect(page.rootInstance.textareaEl.value).toEqual('ADI');
    });
    it('should handle text input', async () => {
      await page.setContent('<hmc-textarea></hmc-textarea>');
      eventSpy = jest.fn();
      page.rootInstance.hmcInput = {
        emit: eventSpy,
      };
      page.rootInstance.onInput({});
      expect(eventSpy).toBeCalled();
    });
    it('should fire the blur event when blurring the input', async () => {
      await page.setContent('<hmc-textarea></hmc-textarea>');
      page.rootInstance.hmcBlur = {
        emit: eventSpy,
      };
      page.rootInstance.onBlur('event');
      expect(eventSpy).toHaveBeenCalled();
    });
  });
});
