import { h, Host, } from '@stencil/core';
/**
 * @slot - An unnamed slot is used to pass `hmc-tab` components to the Tab Group.
 * @slot panel - Used to pass in hmc-panel components which are displayed depending on which tab is selected.
 */
export class HmcTabGroup {
  constructor() {
    this.activeTab = undefined;
  }
  tabClickedHandler(event) {
    const target = event.target;
    this.setActiveItem(target.closest('hmc-tab'));
  }
  onKeydown(ev) {
    const tabs = this.tabs.filter(tab => !tab.isDisabled);
    // Only move the radio if the current focus is in the radio group
    if (ev.target && tabs.includes(ev.target)) {
      const index = tabs.findIndex(tab => tab === ev.target);
      let next;
      // If hitting arrow down or arrow right, move to the next radio
      // If we're on the last radio, move to the first radio
      if (['ArrowDown', 'ArrowRight'].includes(ev.code)) {
        next = index === tabs.length - 1 ? tabs[0] : tabs[index + 1];
      }
      // If hitting arrow up or arrow left, move to the previous radio
      // If we're on the first radio, move to the last radio
      if (['ArrowUp', 'ArrowLeft'].includes(ev.code)) {
        next = index === 0 ? tabs[tabs.length - 1] : tabs[index - 1];
      }
      if (next && tabs.includes(next)) {
        next.focus();
        this.setActiveItem(next);
      }
    }
  }
  get panels() {
    var _a;
    return Array.from(((_a = this.el) === null || _a === void 0 ? void 0 : _a.querySelectorAll('hmc-tab-panel')) || []);
  }
  get tabs() {
    var _a;
    return Array.from(((_a = this.el) === null || _a === void 0 ? void 0 : _a.querySelectorAll('hmc-tab')) || []);
  }
  componentWillLoad() {
    const defaultTab = this.getActiveTab() || this.tabs[0];
    if (defaultTab) {
      this.setActiveItem(defaultTab);
    }
  }
  linkTabsToPanels() {
    this.tabs.forEach(tab => {
      const panel = this.panels.find(p => p.name === tab.panel);
      tab.setAttribute('aria-controls', panel.id);
    });
  }
  render() {
    return (h(Host, null, h("div", { class: "tabs-container", role: "tablist" }, h("slot", null)), h("div", { class: "tab-panels" }, h("slot", { name: "panel" }))));
  }
  getActiveTab() {
    return this.tabs.find(el => el.isSelected);
  }
  setActiveItem(tab) {
    if (tab !== this.activeTab && !tab.isDisabled) {
      this.tabs.forEach(t => {
        t.isSelected = t === tab;
      });
      this.panels.forEach(p => {
        p.isSelected = p.name === tab.panel;
      });
      this.activeTab = tab;
    }
    this.tabSelected.emit(tab.panel);
  }
  static get is() { return "hmc-tab-group"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["tab-group.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["tab-group.css"]
    };
  }
  static get states() {
    return {
      "activeTab": {}
    };
  }
  static get events() {
    return [{
        "method": "tabSelected",
        "name": "tabSelected",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "'tabSelected' event emitted when user clicks on header of particular tab\nand name of that tab is passed as param"
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
  static get listeners() {
    return [{
        "name": "tabClicked",
        "method": "tabClickedHandler",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "keydown",
        "method": "onKeydown",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
