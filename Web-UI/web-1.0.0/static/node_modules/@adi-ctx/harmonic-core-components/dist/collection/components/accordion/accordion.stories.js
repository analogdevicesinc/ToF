import { html } from 'lit-html';

import document from './accordion-documentation.mdx';
import readme from './readme.md';

export default {
  title: 'Components/Accordion',
  parameters: {
    notes: readme,
    docs: {
      page: document,
    },
  },
  args: {
    isOpen: false,
    size: 'md',
  },
  argTypes: {
    size: {
      control: {
        type: 'inline-radio',
        options: ['xs', 'md'],
      },
    },
    onAccordionChange: {
      table: {
        disable: true,
      },
      action: 'accordionChange',
    },
  },
};

const style = html`
  <style>
    .panel {
      display: flex;
      flex-direction: column;
    }
    .content {
      padding-bottom: 16px;
      background-color: var(--hmc-color-layout-container);
      color: var(--hmc-color-content-default);
    }
  </style>
`;
const createAccordion = (heading, aOpen, aSize, changeHandler) => html`
  <div class="panel">
    <hmc-accordion
      size=${aSize}
      ?open="${aOpen}"
      @accordionChange=${changeHandler}
    >
      <span slot="header"> ${heading}</span>
      <div slot="content" class="content">
        Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
        veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
        commodo consequat.
      </div>
    </hmc-accordion>
  </div>
`;
export const Playground = ({ heading, isOpen, size, onAccordionChange }) => {
  return html`
    ${style}
    <div>${createAccordion(heading, isOpen, size, onAccordionChange)}</div>
  `;
};
Playground.args = {
  heading: 'Playground',
};
export const Default = ({ size, onAccordionChange }) => {
  return html`
    ${style}
    <div>
      ${createAccordion('Default (Collapsed)', false, size, onAccordionChange)}
    </div>
  `;
};
Default.argTypes = {
  isOpen: {
    table: {
      disable: true,
    },
  },
};
export const ExpandedOnLoad = ({ size, onAccordionChange }) => {
  return html`
    ${style}
    <div>
      ${createAccordion('Expanded on Load', true, size, onAccordionChange)}
    </div>
  `;
};
ExpandedOnLoad.argTypes = { ...Default.argTypes };
const FormTemplate = ({ size }) => {
  return html`
    <style>
      .form-panel {
        border: 1px solid var(--hmc-color-layout-divider-default);
        width: 350px;
      }
      .form-group {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 12px;
      }
      .pb {
        padding-bottom: 16px;
      }
      .buttons {
        box-sizing: border-box;
        display: flex;
        width: 100%;
        padding: 16px;
        gap: 16px;
      }
      .input-unit {
        color: var(--hmc-color-content-subtle);
      }
    </style>
    <div class="form-panel">
      <hmc-accordion size=${size}>
        <div slot="header">Section 1</div>
        <div class="form-group pb" slot="content">
          <hmc-input-field full-width size=${size} label="Min. Input Voltage"
            ><div class="input-unit" slot="suffix">V</div></hmc-input-field
          >
          <hmc-input-field full-width size=${size} label="Nominal Input Voltage"
            ><div class="input-unit" slot="suffix">V</div></hmc-input-field
          >
          <hmc-input-field full-width size=${size} label="Max. Input Voltage"
            ><div class="input-unit" slot="suffix">V</div></hmc-input-field
          >
        </div>
      </hmc-accordion>
      <hmc-accordion size=${size}>
        <div slot="header">Section 2</div>
        <div class="form-group" slot="content">
          <hmc-input-field full-width size=${size} label="Output Voltage"
            ><div class="input-unit" slot="suffix">V</div></hmc-input-field
          >
          <hmc-input-field full-width size=${size} label="Max. Output Current"
            ><div class="input-unit" slot="suffix">A</div></hmc-input-field
          >
          <hmc-accordion size=${size}>
            <div slot="header">Advanced Section</div>
            <div class="form-group pb" slot="content">
              <hmc-toggle
                full-width
                size=${size}
                label="Include Parasitics"
              ></hmc-toggle>
              <hmc-input-field
                full-width
                size=${size}
                label="Switching Frequency"
                ><div class="input-unit" slot="suffix">
                  kHz
                </div></hmc-input-field
              >
              <hmc-input-field full-width size=${size} label="Max Output Ripple"
                ><div class="input-unit" slot="suffix">mV</div></hmc-input-field
              >
            </div>
          </hmc-accordion>
        </div>
      </hmc-accordion>
      <div class="buttons">
        <hmc-button kind="secondary" full-width size=${size}>Cancel</hmc-button>
        <hmc-button kind="primary" full-width size=${size}>Apply</hmc-button>
      </div>
    </div>
  `;
};
export const FormExample = FormTemplate.bind({});
FormExample.args = {
  size: 'md',
};
FormExample.argTypes = {
  isOpen: { table: { disable: true } },
};
