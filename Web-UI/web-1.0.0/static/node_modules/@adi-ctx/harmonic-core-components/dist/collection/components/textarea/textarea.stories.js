import { html, nothing } from 'lit-html';
import { v4 as uuidv4 } from 'uuid';

import readme from './readme.md';
import document from './textarea-documentation.mdx';

export default {
  title: 'Components/Textarea',
  parameters: {
    componentSubtitle: 'Multipurpose Text Area',
    notes: readme,
    docs: {
      page: document,
    },
  },
  argTypes: {
    size: {
      control: {
        type: 'inline-radio',
        options: ['xs', 'sm', 'md'],
      },
    },
    resize: {
      control: {
        type: 'inline-radio',
        options: ['none', 'vertical'],
      },
    },
    wrap: {
      control: {
        type: 'inline-radio',
        options: ['soft', 'hard'],
      },
    },
    autoComplete: {
      control: {
        type: 'inline-radio',
        options: ['on', 'off'],
      },
    },
    hasSpellcheck: {
      control: {
        type: 'inline-radio',
        options: ['true', 'false', 'default'],
      },
    },
    isRequired: {
      control: {
        type: 'boolean',
      },
    },
    status: {
      control: {
        type: 'inline-radio',
        options: ['normal', 'error', 'warning', 'info'],
      },
    },
    onBlur: { action: 'hmcBlur' },
    onFocus: { action: 'hmcFocus' },
    onChange: { action: 'hmcChange' },
    onInput: { action: 'hmcInput' },
  },
};
export const Playground = ({
  value,
  size,
  rows,
  cols,
  isDisabled,
  isFullWidth,
  placeholder,
  onBlur,
  onChange,
  onFocus,
  onInput,
  status,
  fieldType,
  isAutoFocused,
  label,
  isRequired,
  helperText,
  hasHint,
  maxLength,
  hasCounter,
  hasSpellcheck,
  optionalText,
  resize,
  wrap,
  autoComplete,
}) => {
  const createTextarea = ({ size }) => ({
    value = '',
    status,
    isDisabled = false,
    isAutoFocused = false,
    placeholder = 'Placeholder',
    label = '',
    isRequired,
    optionalText = 'Optional',
    helperText = '',
    maxLength,
    minLength,
    isFullWidth = false,
    rows = 3,
    cols = 30,
    hasCounter = false,
    hasHint = false,
    resize = false,
    hasSpellcheck = 'false',
    autoComplete = 'off',
    wrap,
  }) => {
    return html`
      <div class="textarea-group">
        <hmc-textarea
          value=${value}
          full-width=${isFullWidth}
          rows=${rows}
          cols=${cols}
          optional-text=${optionalText}
          placeholder=${placeholder}
          status=${status}
          size=${size}
          ?disabled=${isDisabled}
          ?autofocus="${isAutoFocused}"
          autocomplete="${autoComplete}"
          spellcheck="${hasSpellcheck}"
          minlength="${minLength}"
          maxlength="${maxLength}"
          label=${label}
          required=${isRequired}
          @hmcInput=${onInput}
          @hmcChange=${onChange}
          @hmcBlur=${onBlur}
          @hmcFocus=${onFocus}
          helper-text=${helperText}
          has-counter=${hasCounter}
          resize=${resize}
          wrap=${wrap}
        >
          ${hasHint ? createHint(uuidv4()) : nothing}
        </hmc-textarea>
      </div>
    `;
  };

  const createHint = key => html`<div slot="hint">
    <hmc-icon id="${key}" name="info-xs"></hmc-icon>
  </div>`;

  return html`
    ${createTextarea({ size })({
      value,
      status,
      isDisabled,
      isAutoFocused,
      fieldType,
      placeholder,
      label,
      isRequired,
      helperText,
      hasHint,
      maxLength,
      optionalText,
      hasCounter,
      resize,
      hasSpellcheck,
      isFullWidth,
      rows,
      cols,
      wrap,
      autoComplete,
    })}
  `;
};

Playground.args = {
  value: '',
  size: 'sm',
  resize: 'none',
  rows: 3,
  cols: 30,
  placeholder: 'Placeholder',
  optionalText: 'Optional',
  isDisabled: false,
  isFullWidth: false,
  status: '',
  isAutoFocused: false,
  autoComplete: 'off',
  hasCounter: false,
  hasHint: false,
  isRequired: true,
  label: 'Label',
  helperText: '',
  minLength: 0,
  maxLength: 100,
  hasSpellcheck: 'false',
  wrap: 'soft',
};

export const States = ({ size, onBlur, onChange, onFocus, onInput }) => {
  const createTextarea = ({ size }) => ({
    value = '',
    status,
    isDisabled = false,
    isAutoFocused = false,
    placeholder = 'Placeholder',
    label = '',
    isRequired,
    optionalText = 'Optional',
    helperText = '',
    maxLength,
    minLength,
    isFullWidth = false,
    rows = 3,
    cols = 30,
    hasCounter = false,
    hasHint = false,
    resize = false,
    hasSpellcheck = 'false',
    autoComplete = 'off',
    wrap,
  }) => {
    return html`
      <div class="textarea-group">
        <hmc-textarea
          value=${value}
          full-width=${isFullWidth}
          rows=${rows}
          cols=${cols}
          optional-text=${optionalText}
          placeholder=${placeholder}
          status=${status}
          size=${size}
          ?disabled=${isDisabled}
          ?autofocus="${isAutoFocused}"
          autocomplete="${autoComplete}"
          spellcheck="${hasSpellcheck}"
          minlength="${minLength}"
          maxlength="${maxLength}"
          label=${label}
          required=${isRequired}
          @hmcInput=${onInput}
          @hmcChange=${onChange}
          @hmcBlur=${onBlur}
          @hmcFocus=${onFocus}
          helper-text=${helperText}
          has-counter=${hasCounter}
          resize=${resize}
          wrap=${wrap}
        >
          ${hasHint ? createHint(uuidv4()) : nothing}
        </hmc-textarea>
      </div>
    `;
  };

  const createHint = key => html`<div slot="hint" class="hint">
    <hmc-icon id="${key}" name="info-xs"></hmc-icon>
  </div>`;

  const createTables = html`
    ${INPUTS_TABLE.ROW_CONFIG.ROW.map(col => createTextarea({ size })(col))}
  `;

  return html`
    ${style}
    <div class="container">
      <div class="input-table-wrapper">${createTables}</div>
    </div>
  `;
};
export const Sizes = ({
  resize,
  value,
  status,
  rows,
  cols,
  onBlur,
  onChange,
  onFocus,
  onInput,
}) => {
  const createTextarea = ({ size }) => ({
    value = '',
    status = 'info',
    isDisabled = false,
    isAutoFocused = false,
    placeholder = 'Placeholder',
    label = '',
    isRequired,
    optionalText = 'Optional',
    helperText = '',
    maxLength,
    minLength,
    isFullWidth = false,
    rows = 3,
    cols = 30,
    hasCounter = false,
    hasHint = false,
    resize = false,
    hasSpellcheck = 'false',
    autoComplete = 'off',
    wrap,
  }) => {
    return html`
      <div class="textarea-group">
        <hmc-textarea
          value=${value}
          full-width=${isFullWidth}
          rows=${rows}
          cols=${cols}
          optional-text=${optionalText}
          placeholder=${placeholder}
          status=${status}
          size=${size}
          ?disabled=${isDisabled}
          ?autofocus="${isAutoFocused}"
          autocomplete="${autoComplete}"
          spellcheck="${hasSpellcheck}"
          minlength="${minLength}"
          maxlength="${maxLength}"
          label=${label}
          required=${isRequired}
          @hmcInput=${onInput}
          @hmcChange=${onChange}
          @hmcBlur=${onBlur}
          @hmcFocus=${onFocus}
          helper-text=${helperText}
          has-counter=${hasCounter}
          resize=${resize}
          wrap=${wrap}
        >
          ${hasHint ? createHint(uuidv4()) : nothing}
        </hmc-textarea>
      </div>
    `;
  };

  const createHint = key => html`<div slot="hint" class="hint">
    <hmc-icon id="${key}" name="info-xs"></hmc-icon>
  </div>`;

  const createTables = html`
    ${INPUTS_SIZES.ROW_CONFIG.ROW.map(col =>
      createTextarea({ size: col.size })({
        ...col,
        resize,
        status,
        rows,
        cols,
        value,
      }),
    )}
  `;

  return html`
    ${style}
    <div class="container">
      <div class="input-table-flex">${createTables}</div>
    </div>
  `;
};
States.args = {
  size: 'sm',
};
States.argTypes = {
  resize: {
    table: {
      disable: true,
    },
  },
  wrap: {
    table: {
      disable: true,
    },
  },
  autoComplete: {
    table: {
      disable: true,
    },
  },
  isRequired: {
    table: {
      disable: true,
    },
  },
  status: {
    table: {
      disable: true,
    },
  },
  hasSpellcheck: {
    table: {
      disable: true,
    },
  },
};
Sizes.args = {
  value: '',
  rows: 3,
  cols: 30,
};
Sizes.argTypes = {
  ...States.argTypes,
  size: {
    table: {
      disable: true,
    },
  },
  resize: {
    table: {
      disable: false,
    },
  },
  status: {
    table: {
      disable: false,
    },
  },
};

/**
 * CONSTANT
 */

const style = html`
  <style>
    .container {
      width: 1280px;
    }
    .input-table-wrapper {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      padding: 16px;
      gap: 8px;
    }
    .input-table-flex {
      display: flex;
      align-items: flex-end;
      padding: 16px;
      gap: 16px;
    }
    .hint {
      width: 12px;
      color: #212836;
    }
  </style>
`;

const INPUTS_TABLE = {
  ROW_CONFIG: {
    ROW: [
      { label: 'Normal' },
      {
        label: 'Disabled',
        value: 'This is a Filled Value to demonstrate the textarea component.',
        isDisabled: true,
      },
      {
        label: 'Error',
        value: 'This is a Filled Value to demonstrate the textarea component.',
        status: 'error',
        helperText: 'Error message',
      },
      {
        label: 'Warning',
        value: 'This is a Filled Value to demonstrate the textarea component.',
        status: 'warning',
        helperText: 'Warning message',
      },
    ],
  },
};
const INPUTS_SIZES = {
  ROW_CONFIG: {
    ROW: [
      {
        size: 'md',
        label: 'Medium',
        value: 'This is a Filled Value to demonstrate the textarea component.',
        helperText: 'Medium message',
      },
      {
        size: 'sm',

        label: 'Small',
        value: 'This is a Filled Value to demonstrate the textarea component.',
        helperText: 'Small message',
      },
      {
        size: 'xs',
        label: 'Extra Small',
        value: 'This is a Filled Value to demonstrate the textarea component.',
        helperText: 'Extra Small message',
      },
    ],
  },
};
