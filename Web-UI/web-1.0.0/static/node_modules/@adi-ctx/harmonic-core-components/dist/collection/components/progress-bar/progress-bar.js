import { Host, h } from '@stencil/core';
/**
 * @slot action-button - Slot to pass in hmc-button to appear on right of the content.
 */
export class HmcProgressBar {
  constructor() {
    this.label = undefined;
    this.inlineMessage = undefined;
    this.value = 0;
    this.maxValue = 100;
    this.status = 'info';
    this.size = 'md';
    this.indeterminate = false;
    this.showPercentage = true;
  }
  getConstrainedValue() {
    return Math.max(0, Math.min(this.value, this.maxValue));
  }
  render() {
    const { indeterminate, inlineMessage, maxValue, status, size, value, } = this;
    const scaledValue = this.getConstrainedValue() / maxValue;
    const labelClass = {
      label: true,
      [size]: true,
    };
    const valueClass = {
      value: true,
      [size]: true,
    };
    const barClass = {
      bar: true,
      [size]: true,
    };
    const indicatorClass = {
      indicator: true,
      [status]: true,
      indeterminate,
      [size]: true,
    };
    const trackClass = {
      track: true,
      [size]: true,
    };
    return (h(Host, { role: "progressbar", "aria-valuenow": indeterminate ? null : value, "aria-valuemin": "0", "aria-valuemax": maxValue }, h("div", { class: "progress-bar" }, h("div", { class: "content" }, this.label && h("div", { class: labelClass }, this.label), h("div", { class: "right" }, this.showPercentage && (h("div", { class: valueClass }, Math.floor(scaledValue * 100), "%")), h("slot", { name: "action-button" }))), h("div", { class: barClass }, h("div", { class: indicatorClass, style: {
        transform: `scaleX(${indeterminate ? 1 : scaledValue})`,
      } }), h("div", { class: trackClass })), inlineMessage && (h("div", { class: "inline-message" }, h("hmc-message", { status: status }, inlineMessage))))));
  }
  static get is() { return "hmc-progress-bar"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["./progress-bar.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["progress-bar.css"]
    };
  }
  static get properties() {
    return {
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string | undefined",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies Label text of the Progress Bar. If no text is entered, Label section will not be displayed.\nDefault: undefined."
        },
        "attribute": "label",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "inlineMessage": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "| string\n    | undefined",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies Inline Message text of the Progress Bar. If no text is entered, the inline message section will not be displayed.\nDefault: undefined."
        },
        "attribute": "inline-message",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "value": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The value being displayed by the bar, relative to maxValue.\nDefault: 0."
        },
        "attribute": "value",
        "reflect": false,
        "defaultValue": "0"
      },
      "maxValue": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The maximum allowed value, this determines how filled the bar is for a given value.\nDefault: 100."
        },
        "attribute": "max-value",
        "reflect": false,
        "defaultValue": "100"
      },
      "status": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ProgressBarStatusType",
          "resolved": "\"error\" | \"info\" | \"success\"",
          "references": {
            "ProgressBarStatusType": {
              "location": "import",
              "path": "../type/status.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The status of the Progress Bar.\nAvailable options are: 'info', 'success', and 'error'\nDefault: 'info'."
        },
        "attribute": "status",
        "reflect": false,
        "defaultValue": "'info'"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'sm' | 'md'",
          "resolved": "\"md\" | \"sm\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The size of the Progress Bar.\nAvailable options are: 'sm', and 'md'\nDefault: 'md'."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'md'"
      },
      "indeterminate": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The kind of the Progress Bar.\nIf enabled, the Progress Bar will be indeterminate type otherwise is determinate.\nDefault: `false`."
        },
        "attribute": "indeterminate",
        "reflect": false,
        "defaultValue": "false"
      },
      "showPercentage": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies whether the percentage text of progress value of the Progress Bar will be shown or not.\nDefault: `true`."
        },
        "attribute": "show-percentage",
        "reflect": false,
        "defaultValue": "true"
      }
    };
  }
  static get elementRef() { return "el"; }
}
