const fs = require('fs');
const path = require('path');
// path of svg files
const iconsDir = path.join(__dirname, '../assets/icons');
// path of svg categories
const categoriesDir = path.join(__dirname, '../assets/icons/categories');
let importStatements = '';
let iconsMapEntries = '';
let categoryNamesEntries = '';
// replace fill color to current color in SVG
function replaceFillColor(svgContent) {
  // fill value can be change according to content of SVG file
  return svgContent.replace(/fill="#101820"/g, 'fill="currentColor"');
}
// read all categories from folder
let categories = fs.readdirSync(categoriesDir);
// Sort categories numerically by their leading number
categories = categories.sort((a, b) => {
  const numA = parseInt(a.match(/^\d+/));
  const numB = parseInt(b.match(/^\d+/));
  return numA - numB;
});
categories.forEach(category => {
  const categoryPath = path.join(categoriesDir, category);
  if (fs.lstatSync(categoryPath).isDirectory()) {
    // Remove the leading number and dot from the category name
    const originalCategoryName = category.replace(/^\d+\./, '');
    let categoryIcons = [];
    fs.readdirSync(categoryPath).forEach(file => {
      if (path.extname(file) === '.svg') {
        const iconName = path.basename(file, '.svg');
        const camelCaseIconName = iconName.replace(/-./g, match => match[1].toUpperCase());
        // read SVG file
        const filePath = path.join(categoryPath, file);
        let svgContent = fs.readFileSync(filePath, 'utf8');
        svgContent = replaceFillColor(svgContent);
        // write changed SVG
        fs.writeFileSync(filePath, svgContent, 'utf8');
        importStatements += `import ${camelCaseIconName} from '../assets/icons/categories/${category}/${file}';\n`;
        iconsMapEntries += `  ['${iconName}']: ${camelCaseIconName},\n`;
        categoryIcons.push(iconName);
      }
    });
    if (categoryIcons.length > 0) {
      categoryNamesEntries += `  ${originalCategoryName}: ${JSON.stringify(categoryIcons)},\n`;
    }
  }
});
// create iconsMap and export expressions
const output = `
${importStatements}

export const iconsMap = {
${iconsMapEntries}
};

export const supportedIcons = Object.keys(iconsMap);

export const categories = {
allIcons: supportedIcons,
${categoryNamesEntries}
};

export type IconNames = keyof typeof iconsMap;
`;
// write iconsMap to file
fs.writeFileSync(path.join(__dirname, 'iconsMap.ts'), output);
console.log('Successfully created iconsMap.ts file.');
