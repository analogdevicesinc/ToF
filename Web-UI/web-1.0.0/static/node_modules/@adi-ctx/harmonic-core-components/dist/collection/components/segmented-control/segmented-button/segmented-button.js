import { h, Host, } from '@stencil/core';
/**
 * @slot - An unnamed slot is used to pass a content (usually text) to the component.
 */
export class HmcSegmentedButton {
  constructor() {
    this.isPressed = false;
    this.isDisabled = false;
    this.isFullWidth = false;
    this.isIconOnly = false;
    this.value = '';
    this.size = 'md';
    this.isFirstElement = null;
    this.isLastElement = null;
    this.buttonTabindex = -1;
  }
  async setFocus(ev) {
    ev.stopPropagation();
    ev.preventDefault();
    this.focusEl.focus();
  }
  onClick() {
    if (!this.isDisabled) {
      this.segmentClicked.emit(this.value);
    }
  }
  connectedCallback() {
    this.isFirstElement = !this.el.previousElementSibling;
    this.isLastElement = !this.el.nextElementSibling;
  }
  render() {
    const { size, isPressed, isDisabled, isFirstElement, isFullWidth, isIconOnly, isLastElement, } = this;
    const classList = {
      'segmented-button': true,
      'disabled': isDisabled,
      'pressed': isPressed,
      [size]: true,
      'icon-only': isIconOnly,
      'first-child': isFirstElement,
      'last-child': isLastElement,
      'full-width': isFullWidth,
    };
    return (h(Host, { class: { 'full-width': isFullWidth } }, h("button", { "aria-pressed": isPressed.toString(), class: classList, disabled: isDisabled, tabindex: !isDisabled && isPressed ? '0' : '-1', onClick: () => this.onClick(), ref: focusEl => (this.focusEl = focusEl) }, h("slot", null))));
  }
  static get is() { return "hmc-segmented-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["segmented-button.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["segmented-button.css"]
    };
  }
  static get properties() {
    return {
      "isPressed": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies if SegmentedButton is pressed/active."
        },
        "attribute": "pressed",
        "reflect": true,
        "defaultValue": "false"
      },
      "isDisabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If `true`, the user cannot interact with the segment button."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "isFullWidth": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If `true`, the tab will be loaded with 'width: 100%'.\nDefault: 'false'."
        },
        "attribute": "full-width",
        "reflect": false,
        "defaultValue": "false"
      },
      "isIconOnly": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If enabled, the button will be loaded with an only icon inside.\nIcon should be set via default slot.\nDefault: `false`."
        },
        "attribute": "icon-only",
        "reflect": false,
        "defaultValue": "false"
      },
      "value": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The value of the Segment Button."
        },
        "attribute": "value",
        "reflect": false,
        "defaultValue": "''"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "SegmentedButtonSize",
          "resolved": "\"md\" | \"sm\" | \"xs\"",
          "references": {
            "SegmentedButtonSize": {
              "location": "import",
              "path": "../../type/size.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The size of the Segment Button.\nAvailable options are: \"xs\", \"sm\" and \"md\" . Default = \"md\"."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'md'"
      }
    };
  }
  static get states() {
    return {
      "isFirstElement": {},
      "isLastElement": {},
      "buttonTabindex": {}
    };
  }
  static get events() {
    return [{
        "method": "segmentClicked",
        "name": "segmentClicked",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Event emitter that is triggered when any item is clicked"
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "setFocus": {
        "complexType": {
          "signature": "(ev: any) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "el"; }
}
