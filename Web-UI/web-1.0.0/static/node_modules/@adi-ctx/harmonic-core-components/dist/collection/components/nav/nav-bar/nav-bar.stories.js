import { html } from 'lit-html';

import logoImg from '../../../stories/assets/amp-logo.svg';
import navLinkReadme from '../nav-link/readme.md';

import documentation from './nav-bar-documentation.mdx';
import navBarReadme from './readme.md';

export default {
  title: 'Components/Nav',
  parameters: {
    notes: {
      'Nav Bar': navBarReadme,
      'Nav Link': navLinkReadme,
    },
    docs: {
      page: documentation,
    },
  },
  argTypes: {
    size: {
      control: {
        type: 'inline-radio',
        options: ['sm', 'md'],
      },
    },
    onLinkClicked: {
      action: 'linkClicked',
      table: {
        disable: true,
      },
    },
  },
};

const style = html`
  <style>
    body {
      padding: 0 !important;
    }
    .backdrop {
      padding: 16px;
      background-color: var(--hmc-color-layout-canvas);
    }
    hmc-nav-bar[size='sm'] #left-cta {
      margin: 0 8px;
    }
    hmc-nav-bar[size='md'] #left-cta {
      margin: 0 12px;
    }
    .logo {
      margin-left: 16px;
    }
    .logo svg {
      width: 52px;
      height: 16px;
      margin-right: 12px;
      color: var(--hmc-color-logo-default, $c-system-primary);
    }
    .logo .name {
      color: var(--hmc-color-content-default, #101820);
      font-family: Barlow;
      font-size: 20px;
      font-weight: 600;
      line-height: 28px;
    }
    .right-cta {
      margin-right: 16px;
    }
  </style>
`;

const createNavLink = (
  id,
  label,
  isDisabled,
  href,
  linkActive,
  size,
  onLinkClick,
  withIcon = false,
  isIconOnly = false,
) => {
  return html`<hmc-nav-link
    id=${id}
    ?disabled=${isDisabled}
    ?icon-only=${isIconOnly}
    ?link-active=${linkActive}
    size=${size}
    href=${href}
    @linkClick=${onLinkClick}
    aria-label=${isIconOnly ? 'Icon Only' : ''}
    title=${isIconOnly ? 'Icon Only' : ''}
  >
    ${withIcon
      ? html`<hmc-icon slot="icon" name="placeholder-m" />`
      : ''}${!isIconOnly ? label : ''}</hmc-nav-link
  >`;
};

const preventDefaultWithCall = (ev, handler) => {
  ev.preventDefault();
  handler(ev);
};

const setActiveLink = (event, id) => {
  event.preventDefault();
  const linkIds = ['#link1', '#link2', '#link3'];
  linkIds.forEach(link => {
    document.querySelector(link).linkActive = id === link;
  });
};

export const Playground = ({
  isDisabled,
  href,
  label,
  linkActive,
  size,
  onLinkClicked,
}) => {
  return html`<div style="display: flex;">
    ${createNavLink('link1', label, isDisabled, href, linkActive, size, e =>
      preventDefaultWithCall(e, onLinkClicked),
    )}
  </div>`;
};

Playground.args = {
  isDisabled: false,
  href: '',
  label: 'Users',
  linkActive: false,
  size: 'md',
};

export const NavLinks = ({ size, onLinkClicked }) => {
  return html`<div style="display: flex; gap: 16px; margin-bottom: 16px;">
      ${createNavLink('link1', 'Active', false, '', true, size, e =>
        preventDefaultWithCall(e, onLinkClicked),
      )}
      ${createNavLink(
        'link1',
        'Active',
        false,
        '',
        true,
        size,
        e => preventDefaultWithCall(e, onLinkClicked),
        true,
        true,
      )}
      ${createNavLink('link2', 'Disabled', true, '', true, size)}
    </div>
    <div style="display: flex; gap: 16px;">
      ${createNavLink('link3', 'Not Active', false, '', false, size, e =>
        preventDefaultWithCall(e, onLinkClicked),
      )}
      ${createNavLink(
        'link3',
        'Not Active',
        false,
        '',
        false,
        size,
        e => preventDefaultWithCall(e, onLinkClicked),
        true,
      )}
      ${createNavLink(
        'link3',
        'Not Active',
        false,
        '',
        false,
        size,
        e => preventDefaultWithCall(e, onLinkClicked),
        true,
        true,
      )}
      ${createNavLink('link4', 'Disabled', true, '', false, size)}
    </div>`;
};

NavLinks.args = {
  size: 'md',
};

const Template = ({
  size,
  leftActionsEnabled,
  onLinkClicked,
  showLinkIcons,
}) => {
  const createNavBarLink = (id, label, linkActive, size, withIcon) => {
    return createNavLink(
      id,
      label,
      false,
      '',
      linkActive,
      size,
      e => {
        preventDefaultWithCall(e, onLinkClicked);
        setActiveLink(e, '#' + id);
      },
      withIcon,
    );
  };

  return html`
    ${style}
    <div class="backdrop">
      <hmc-nav-bar size=${size} ?enable-left-actions=${leftActionsEnabled}>
        <hmc-button
          id="left-cta"
          slot="left-actions"
          kind="ghost"
          size="sm"
          icon-only
        >
          <hmc-icon name="menu-m" size=${size} />
        </hmc-button>
        <div slot="logo" class="logo">
        <svg  viewBox="0 0 78 24" fill="none">
        <path d="M-0.00140381 23.9997V-0.000305176H24.3568V23.9997H-0.00140381ZM5.01288 3.73469V20.9547L20.2853 12.1527L5.01288 3.73469Z" fill="currentColor"/>
        <path d="M60.1876 23.9997H50.7774V0.0566998H60.2458C67.2591 0.0566998 71.4682 5.4987 71.4682 12.4287C71.4682 19.3587 67.7274 23.9997 60.1876 23.9997ZM59.7805 4.1247H55.9203V20.2767H60.0713C65.5662 20.2767 66.3835 15.6957 66.3254 12.2007C66.3254 9.4497 64.9815 4.1247 59.7805 4.1247Z" fill="currentColor"/>
        <path d="M46.1175 23.9997L44.2471 18.6717H35.2471L33.6124 23.9997H28.7022L36.943 -0.000305176H41.9114L51.1471 23.9997H46.1175ZM42.5359 13.8027L39.4563 5.03969L36.7563 13.8027L36.5359 15.2907H42.7594L42.5359 13.8027Z" fill="currentColor"/>
        <path d="M78.0009 23.9997H72.7999V-0.000305176H78.0009V23.9997Z" fill="currentColor"/>
        </svg>
        
          <span class="name">App name<span>
        </div>
        ${createNavBarLink('link1', 'Link 1', true, size, showLinkIcons)}
        ${createNavBarLink('link2', 'Link 2', false, size, showLinkIcons)}
        ${createNavBarLink('link3', 'Link 3', false, size, showLinkIcons)}
        <hmc-button
          class="right-cta"
          slot="right-actions"
          kind="secondary"
          size=${size}
        >
          Button label
        </hmc-button>
      </hmc-nav-bar>
    </div>
  `;
};

export const NavBar = Template.bind({});
NavBar.args = {
  size: 'md',
  leftActionsEnabled: false,
  showLinkIcons: false,
};
