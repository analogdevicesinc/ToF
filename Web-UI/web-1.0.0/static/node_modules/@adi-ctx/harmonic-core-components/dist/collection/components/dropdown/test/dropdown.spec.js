import { newSpecPage } from '@stencil/core/testing';
import { emptyFn } from '../../../utils/empty.util';
import { HmcDropdownOption } from '../../dropdown-option/dropdown-option';
import { HmcDropdown } from '../dropdown';
describe('hmc-dropdown', () => {
  let page;
  beforeEach(async () => {
    page = await newSpecPage({
      components: [HmcDropdown, HmcDropdownOption],
    });
  });
  it('builds', async () => {
    expect(new HmcDropdown()).toBeTruthy();
  });
  describe('renders', () => {
    it('should render default component', async () => {
      await page.setContent('<hmc-dropdown></hmc-dropdown>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-dropdown>
          <mock:shadow-root>
            <div class="input-label md"></div>
            <button aria-haspopup="listbox" class="dropdown md normal">
              <div class="dropdown-content">
                <div class="dropdown-text">
                  Select
                </div>
              </div>
              <hmc-icon class="dropdown-arrow" name="chevron-down-m"></hmc-icon>
            </button>
            <div class="bottom hidden left list-container" role="listbox" style="max-height: 340px;">
              <slot></slot>
            </div>
          </mock:shadow-root>
          <input class="aux-input" name="undefined" type="hidden" value="">
        </hmc-dropdown>
      `);
    });
    it('should render component with value', async () => {
      await page.setContent('<hmc-dropdown value="A"></hmc-dropdown>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-dropdown value="A">
          <mock:shadow-root>
            <div class="input-label md"></div>
            <button aria-haspopup="listbox" class="dropdown md normal">
              <div class="dropdown-content filled">
                <div class="dropdown-text"></div>
              </div>
              <hmc-icon class="dropdown-arrow" name="chevron-down-m"></hmc-icon>
            </button>
            <div class="bottom hidden left list-container" role="listbox" style="max-height: 340px;">
              <slot></slot>
            </div>
          </mock:shadow-root>
          <input class="aux-input" name="undefined" type="hidden" value="">
        </hmc-dropdown>
      `);
    });
    it('should render component helperText attribute', async () => {
      await page.setContent('<hmc-dropdown placeholder="P" status="info" helper-text="H"></hmc-dropdown>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-dropdown helper-text="H" placeholder="P" status="info">
          <mock:shadow-root>
            <div class="input-label md"></div>
            <button aria-haspopup="listbox" class="dropdown info md">
              <div class="dropdown-content">
                <div class="dropdown-text">
                  P
                </div>
              </div>
              <hmc-icon class="dropdown-arrow" name="chevron-down-m"></hmc-icon>
            </button>
            <div class="bottom hidden left list-container" role="listbox" style="max-height: 340px;">
              <slot></slot>
            </div>
            <div class="helper-text">
              <hmc-message status="info">
                H
              </hmc-message>
            </div>
          </mock:shadow-root>
          <input class="aux-input" name="undefined" type="hidden" value="">
        </hmc-dropdown>
      `);
    });
    it('should render pre-selected option correctly', async () => {
      await page.setContent('<hmc-dropdown value="V"><hmc-dropdown-option value="V">Value</hmc-dropdown-option></hmc-dropdown>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-dropdown value="V">
          <mock:shadow-root>
            <div class="input-label md"></div>
            <button aria-haspopup="listbox" class="dropdown md normal">
              <div class="dropdown-content filled">
                <div class="dropdown-text">
                  Value
                </div>
              </div>
              <hmc-icon class="dropdown-arrow" name="chevron-down-m"></hmc-icon>
            </button>
            <div class="bottom hidden left list-container" role="listbox" style="max-height: 340px;">
              <slot></slot>
            </div>
          </mock:shadow-root>
          <hmc-dropdown-option aria-selected="" role="option" tabindex="0" title="Value" value="V">
            <mock:shadow-root>
              <div class="last-child md option selected">
                <div class="inner-option">
                  <slot></slot>
                  <hmc-icon class="checkmark" name="check-m"></hmc-icon>
                </div>
              </div>
            </mock:shadow-root>
            Value
          </hmc-dropdown-option>
          <input class="aux-input" name="undefined" type="hidden" value="Value">
        </hmc-dropdown>
      `);
    });
    it('should override displayed text', async () => {
      await page.setContent('<hmc-dropdown value="V" selected-text="Selected"><hmc-dropdown-option value="V">Value</hmc-dropdown-option></hmc-dropdown>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-dropdown selected-text="Selected" value="V">
          <mock:shadow-root>
            <div class="input-label md"></div>
            <button aria-haspopup="listbox" class="dropdown md normal">
              <div class="dropdown-content filled">
                <div class="dropdown-text">
                  Selected
                </div>
              </div>
              <hmc-icon class="dropdown-arrow" name="chevron-down-m"></hmc-icon>
            </button>
            <div class="bottom hidden left list-container" role="listbox" style="max-height: 340px;">
              <slot></slot>
            </div>
          </mock:shadow-root>
          <hmc-dropdown-option aria-selected="" role="option" tabindex="0" title="Value" value="V">
            <mock:shadow-root>
              <div class="last-child md option selected">
                <div class="inner-option">
                  <slot></slot>
                  <hmc-icon class="checkmark" name="check-m"></hmc-icon>
                </div>
              </div>
            </mock:shadow-root>
            Value
          </hmc-dropdown-option>
          <input class="aux-input" name="undefined" type="hidden" value="Selected">
        </hmc-dropdown>
      `);
    });
  });
  describe('methods', () => {
    let eventSpy;
    beforeEach(() => {
      eventSpy = jest.fn();
    });
    it('should toggle the selection on', async () => {
      await page.setContent('<hmc-dropdown></hmc-dropdown>');
      page.rootInstance.toggled = {
        emit: eventSpy,
      };
      page.rootInstance.isExpanded = false;
      page.rootInstance.toggle({ stopPropagation: emptyFn });
      await page.waitForChanges();
      expect(eventSpy).toHaveBeenCalled();
      expect(page.rootInstance.isExpanded).toEqual(true);
    });
    it('should toggle the selection off', async () => {
      await page.setContent('<hmc-dropdown></hmc-dropdown>');
      page.rootInstance.toggled = {
        emit: eventSpy,
      };
      page.rootInstance.isExpanded = true;
      page.rootInstance.toggle({ stopPropagation: emptyFn });
      expect(eventSpy).toHaveBeenCalled();
      expect(page.rootInstance.isExpanded).toEqual(false);
    });
  });
});
