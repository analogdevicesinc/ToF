import { h, Host, } from '@stencil/core';
/**
 * @slot icon-left - Slot to pass in hmc-icon to appear on left.
 * @slot - An unnamed slot is used to pass a text label to the button.
 * @slot menu - Slot to pass in hmc-dropdown-menu to appear when opened.
 */
export class HmcDropdownMenuButton {
  constructor() {
    this.handleDocumentClick = (event) => {
      if (this.isExpanded) {
        const target = event.target;
        if (!this.el.contains(target)) {
          this.isExpanded = false;
          this.toggled.emit({ isExpanded: this.isExpanded });
          const dropdownMenu = this.el.querySelector('hmc-dropdown-menu');
          if (dropdownMenu) {
            dropdownMenu.isOpen = false;
          }
        }
      }
    };
    this.isDisabled = false;
    this.isLoading = false;
    this.kind = 'primary';
    this.isInverse = false;
    this.size = 'md';
    this.isExpanded = false;
  }
  connectedCallback() {
    document.addEventListener('click', this.handleDocumentClick);
  }
  disconnectedCallback() {
    document.removeEventListener('click', this.handleDocumentClick);
  }
  async toggleMenu() {
    if (!this.isDisabled) {
      this.isExpanded = !this.isExpanded;
      this.toggled.emit({ isExpanded: this.isExpanded });
    }
  }
  getRightIcon() {
    let expanded = 'down';
    if (this.isExpanded) {
      expanded = 'up';
    }
    return ('chevron-' + expanded + '-' + 's');
  }
  render() {
    const { size, kind, isLoading, isDisabled, isInverse, isExpanded } = this;
    const classes = {
      'menu-button': true,
      'inverse': isInverse,
      'disabled': isDisabled,
      'expanded': isExpanded,
      [kind]: true,
    };
    return (h(Host, { role: "button", "aria-haspopup": "true", "aria-expanded": this.isExpanded.toString(), "aria-disabled": isDisabled.toString(), onClick: () => this.toggleMenu() }, h("div", { class: classes }, h("hmc-button", { size: size, kind: kind, isProcessing: isLoading, isDisabled: isDisabled, isInverse: isInverse }, h("slot", { slot: "icon-left", name: "icon-left" }), h("slot", null), h("hmc-icon", { class: "right-icon", slot: "icon-right", name: this.getRightIcon() })), h("div", { class: "menu-item" }, h("slot", { name: "menu" })))));
  }
  static get is() { return "hmc-dropdown-menu-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dropdown-menu-button.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dropdown-menu-button.css"]
    };
  }
  static get properties() {
    return {
      "isDisabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies 'disabled' state of the component.\nDefault, `false`."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "isLoading": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "loading",
        "reflect": false,
        "defaultValue": "false"
      },
      "kind": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "VariantType",
          "resolved": "\"ghost\" | \"primary\" | \"secondary\" | \"tertiary\"",
          "references": {
            "VariantType": {
              "location": "import",
              "path": "../type/variant.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The kind of the button.\nAvailable options are: 'primary', 'secondary', 'tertiary' and 'ghost'.\nDefault: 'primary'."
        },
        "attribute": "kind",
        "reflect": false,
        "defaultValue": "'primary'"
      },
      "isInverse": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "inverse",
        "reflect": false,
        "defaultValue": "false"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ButtonSize",
          "resolved": "\"md\" | \"sm\" | \"xs\"",
          "references": {
            "ButtonSize": {
              "location": "import",
              "path": "../type/size.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The size of the Dropdown Menu Button.\nAvailable options are: \"xs\" - h-24, \"sm\" - h-32, \"md\" - h-40.\nDefault: \"md\"."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'md'"
      }
    };
  }
  static get states() {
    return {
      "isExpanded": {}
    };
  }
  static get events() {
    return [{
        "method": "toggled",
        "name": "toggled",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the dropdown menu button's expanded state is toggled.\nEvent detail: { isExpanded: boolean }."
        },
        "complexType": {
          "original": "{ isExpanded: boolean }",
          "resolved": "{ isExpanded: boolean; }",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "toggleMenu": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "el"; }
}
