import { html } from 'lit-html';
import { ifDefined } from 'lit-html/directives/if-defined';

import document from './button-documentation.mdx';
import readme from './readme.md';

export default {
  title: 'Components/Button',
  parameters: {
    componentSubtitle: 'Multipurpose button with loading state',
    notes: readme,
    docs: {
      page: document,
    },
  },
  argTypes: {
    size: {
      control: {
        type: 'inline-radio',
        options: ['xs', 'sm', 'md'],
      },
    },
    kind: {
      control: {
        type: 'inline-radio',
        options: ['primary', 'secondary', 'tertiary', 'ghost'],
      },
      table: { disable: true },
    },
    onClick: { action: 'clicked', table: { disable: true } },
  },
};

const style = html`
  <style>
    body {
      font-family: 'Inter';
    }
    table {
      width: 100%;
    }
    td {
      padding: 8px;
    }
    .heading {
      font-size: 28px;
      text-transform: capitalize;
      font-family: Barlow, sans-serif;
      font-weight: 600;
      line-height: 36px;
    }
    .with-icon {
      display: flex;
      align-items: center;
    }
    .text-only {
      display: flex;
      align-items: center;
      text-transform: capitalize;
    }
    .buttons-wrapper {
      margin: 22px 0 0;
      border: 1px dashed #7b61ff;
      border-radius: 8px;
    }
    .buttons {
      padding: 16px;
      max-width: max-content;
    }
    .flex {
      display: flex;
      gap: 16px;
      align-items: flex-end;
    }
    .caption {
      font-size: 12px;
      line-height: 16px;
      color: #686c7d;
    }
    .inverted {
      color: #ffffff;
    }

    .hover {
      --hmc-color-interactive-primary-default: #00427a;
      --hmc-color-gray-500: #3a424b;
      --button-ghost-bg: #d5d8dc;
    }
  </style>
`;

const Template = ({
  href,
  inverse,
  isDisabled,
  isProcessing,
  isIconOnly,
  isFullWidth,
  kind,
  label,
  size,
  onClick,
}) => {
  const content = (text, iconOnly, leftIcon, rightIcon, cSize) => {
    const iconName = `placeholder-${cSize === 'xs' ? 's' : 'm'}`;
    if (iconOnly) {
      return html` <hmc-icon name="${iconName}"></hmc-icon> `;
    } else if (leftIcon || rightIcon) {
      return html`
        ${leftIcon &&
        html`<hmc-icon name="${iconName}" slot="icon-left"></hmc-icon>`}
        <span class="text text-only">${text}</span>
        ${rightIcon &&
        html`<hmc-icon name="${iconName}" slot="icon-right"></hmc-icon>`}
      `;
    } else {
      return html`<span class="text-only">${text}</span>`;
    }
  };

  const createButton = (
    bLabel = 'Primary',
    bSize = 'md',
    bKind = 'primary',
    bInverse = false,
    leftIcon = false,
    rightIcon = false,
    bPressed = false,
  ) => (bDisabled, bProcessing, bIconOnly, bFullWidth) => html`
    <hmc-button
      size="${bSize}"
      kind="${bKind}"
      href=${ifDefined(href ? href : undefined)}
      ?inverse=${bInverse}
      ?disabled="${bDisabled}"
      ?processing="${bProcessing}"
      ?icon-only="${bIconOnly}"
      ?full-width="${bFullWidth}"
      @click="${onClick}"
      class="${bPressed ? 'hover' : ''}"
    >
      ${content(bLabel, bIconOnly, leftIcon, rightIcon, bSize)}
    </hmc-button>
  `;

  return html`
    <div>
      <div
        style="padding: 16px;background: ${inverse
          ? 'var(--hmc-color-system-primary-strong)'
          : 'var(--hmc-color-layout-container)'};"
      >
        ${createButton(
          label,
          size,
          kind,
          inverse,
          true,
          true,
        )(isDisabled, isProcessing, isIconOnly, isFullWidth)}
      </div>
    </div>
  `;
};
export const Playground = Template.bind({});

Playground.argTypes = {
  size: { table: { disable: false } },
  kind: { table: { disable: false } },
  onClick: { table: { disable: false } },
};

Playground.args = {
  size: 'md',
  kind: 'primary',
  inverse: false,
  isDisabled: false,
  isProcessing: false,
  isIconOnly: false,
  isFullWidth: false,
  label: 'Button',
  href: '',
};
const TemplateSet = (kind = 'primary') => {
  let fKind = kind;
  return ({ onClick, size = 'md' }) => {
    return html` ${style}
      <div class="buttons flex">
        <hmc-button size=${size} kind=${fKind} @click="${onClick}"
          >Button</hmc-button
        >

        <hmc-button size=${size} kind=${fKind} @click="${onClick}"
          ><hmc-icon
            name="placeholder-${size == 'xs' ? 's' : 'm'}"
            slot="icon-left"
          ></hmc-icon
          >Icon Left</hmc-button
        >

        <hmc-button size=${size} kind=${fKind} @click="${onClick}"
          ><hmc-icon
            name="placeholder-${size == 'xs' ? 's' : 'm'}"
            slot="icon-right"
          ></hmc-icon
          >Icon Right</hmc-button
        >

        <hmc-button size=${size} icon-only kind=${fKind} @click="${onClick}"
          ><hmc-icon name="placeholder-${size == 'xs' ? 's' : 'm'}"
        /></hmc-button>

        <hmc-button size=${size} disabled kind=${fKind} @click="${onClick}"
          >Disabled</hmc-button
        >
        <hmc-button size=${size} processing kind=${fKind} @click="${onClick}"
          >Processing</hmc-button
        >
        <hmc-button
          size=${size}
          processing
          icon-only
          kind=${fKind}
          @click="${onClick}"
        ></hmc-button>
      </div>`;
  };
};
export const Primary = TemplateSet('primary').bind({});
export const Secondary = TemplateSet('secondary').bind({});
export const Tertiary = TemplateSet('tertiary').bind({});
export const Ghost = TemplateSet('ghost').bind({});

export const Sizes = ({ onClick, kind }) =>
  html` ${style}
    <div class="buttons" style=" max-width: max-content;">
      <div class="flex">
        <hmc-button size="md" kind=${kind} @click="${onClick}"
          ><hmc-icon name="placeholder-m" slot="icon-left"></hmc-icon
          >Medium<hmc-icon name="placeholder-m" slot="icon-right"></hmc-icon
        ></hmc-button>

        <hmc-button size="sm" kind=${kind} @click="${onClick}"
          ><hmc-icon name="placeholder-m" slot="icon-left"></hmc-icon
          >Small<hmc-icon name="placeholder-m" slot="icon-right"></hmc-icon
        ></hmc-button>

        <hmc-button size="xs" kind=${kind} @click="${onClick}"
          ><hmc-icon name="placeholder-s" slot="icon-left"></hmc-icon>Extra
          Small<hmc-icon name="placeholder-s" slot="icon-right"></hmc-icon
        ></hmc-button>
      </div>
      <div class="flex" style="padding-top: 16px;">
        <hmc-button size="md" kind=${kind} icon-only @click="${onClick}"
          ><hmc-icon name="placeholder-m"></hmc-icon
        ></hmc-button>

        <hmc-button size="sm" kind=${kind} icon-only @click="${onClick}"
          ><hmc-icon name="placeholder-m"></hmc-icon
        ></hmc-button>

        <hmc-button size="xs" kind=${kind} icon-only @click="${onClick}"
          ><hmc-icon name="placeholder-s"></hmc-icon>
        </hmc-button>
        <hmc-button
          size="md"
          kind=${kind}
          icon-only
          processing
          @click="${onClick}"
          ><hmc-icon name="placeholder-m"></hmc-icon
        ></hmc-button>

        <hmc-button
          size="sm"
          kind=${kind}
          icon-only
          processing
          @click="${onClick}"
          ><hmc-icon name="placeholder-m"></hmc-icon
        ></hmc-button>

        <hmc-button
          size="xs"
          kind=${kind}
          icon-only
          processing
          @click="${onClick}"
          ><hmc-icon name="placeholder-s"></hmc-icon>
        </hmc-button>
      </div>
    </div>`;
Sizes.args = {
  kind: 'primary',
};
Sizes.argTypes = {
  size: { table: { disable: true } },
  kind: { table: { disable: false } },

  onClick: { table: { disable: true } },
};
export const Inverse = ({ onClick, size, disabled }) =>
  html` ${style}

    <div
      style="padding: 16px;background: var(--hmc-color-system-primary-strong);"
    >
      <div class="flex">
        <hmc-button
          inverse
          size=${size}
          kind="primary"
          ?disabled=${disabled}
          @click="${onClick}"
        >
          <hmc-icon name="placeholder-m" slot="icon-left"></hmc-icon>
          Primary
          <hmc-icon name="placeholder-m" slot="icon-right"></hmc-icon>
        </hmc-button>

        <hmc-button
          inverse
          size=${size}
          kind="secondary"
          ?disabled=${disabled}
          @click="${onClick}"
        >
          <hmc-icon name="placeholder-m" slot="icon-left"></hmc-icon>
          Secondary
          <hmc-icon name="placeholder-m" slot="icon-right"></hmc-icon>
        </hmc-button>
        <hmc-button
          inverse
          size=${size}
          kind="tertiary"
          ?disabled=${disabled}
          @click="${onClick}"
        >
          <hmc-icon name="placeholder-s" slot="icon-left"></hmc-icon>
          Tertiary
          <hmc-icon name="placeholder-s" slot="icon-right"></hmc-icon>
        </hmc-button>
        <hmc-button
          inverse
          size=${size}
          kind="ghost"
          ?disabled=${disabled}
          @click="${onClick}"
        >
          <hmc-icon name="placeholder-s" slot="icon-left"></hmc-icon>
          Ghost
          <hmc-icon name="placeholder-s" slot="icon-right"></hmc-icon>
        </hmc-button>
      </div>
    </div>`;
Inverse.args = {
  size: 'md',
  disabled: false,
};
Inverse.argTypes = {
  onClick: { table: { disable: true } },
};
