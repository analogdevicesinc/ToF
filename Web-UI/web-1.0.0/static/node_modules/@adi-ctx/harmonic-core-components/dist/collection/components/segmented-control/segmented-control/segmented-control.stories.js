import { html } from 'lit-html';

import segmentedButtonReadme from '../segmented-button/readme.md';

import segmentedControlReadme from './readme.md';
import documentation from './segmented-control-documentation.mdx';

export default {
  title: 'Components/Segmented Control',
  parameters: {
    notes: {
      'Segmented Control': segmentedControlReadme,
      'Segmented Button': segmentedButtonReadme,
    },
    docs: {
      page: documentation,
    },
  },
  argTypes: {
    size: {
      control: {
        type: 'inline-radio',
        options: ['xs', 'sm', 'md'],
      },
    },
    onSegmentChanged: {
      action: 'segmentChanged',
    },
  },
};
export const Playground = ({
  size,
  isFullWidth,
  isIconOnly,
  withIcon,
  onSegmentChanged,
}) => {
  const getButtonContent = ({ text }) => {
    if (isIconOnly) {
      return html`<hmc-icon
        name="placeholder-${size === 'md' ? 'm' : 's'}"
      ></hmc-icon>`;
    } else if (withIcon) {
      return html`<hmc-icon
          name="placeholder-${size === 'md' ? 'm' : 's'}"
        ></hmc-icon>
        ${text}`;
    }
    return text;
  };

  return html`
    <hmc-segmented-control
      value="1"
      full-width=${isFullWidth}
      @segmentChanged=${onSegmentChanged}
    >
      <hmc-segmented-button size=${size} value="0" icon-only=${isIconOnly}>
        ${getButtonContent({ text: 'Segment one' })}
      </hmc-segmented-button>
      <hmc-segmented-button size=${size} value="1" icon-only=${isIconOnly}>
        ${getButtonContent({ text: 'Segment two' })}
      </hmc-segmented-button>
      <hmc-segmented-button size=${size} value="2" icon-only=${isIconOnly}>
        ${getButtonContent({ text: 'Segment three' })}
      </hmc-segmented-button>
    </hmc-segmented-control>
  `;
};

Playground.args = {
  size: 'md',
  isFullWidth: false,
  isIconOnly: false,
  withIcon: false,
};
const Template = ({ size, isIconOnly }) => {
  const renderSegmentedButton = ({
    hovered,
    disabled = false,
    checked,
    size,
    text = 'Segmented',
    isIcon = false,
  }) => {
    return html`
      <hmc-segmented-button
        size="${size}"
        value="1"
        disabled="${disabled}"
        icon-only=${isIcon}
        ?pressed=${checked}
        class="${hovered ? 'hovered' : ''}"
      >
        ${isIcon
          ? html`<hmc-icon
              name="placeholder-${size === 'md' ? 'm' : 's'}"
            ></hmc-icon>`
          : text}
      </hmc-segmented-button>
    `;
  };

  const renderSegmentTypes = ({ isIcon, size }) => {
    // ${SEGMENT_TYPES.map(type => {
    const CHECKED_STATES = ['false', 'true'];
    return html`
      ${CHECKED_STATES.map(checked => {
        const isChecked = checked === 'true';
        return html`
          <div>
            ${renderSegmentedButton({
              checked: isChecked,
              isIcon,
              size,
              text: 'Idle',
            })}
          </div>
          <div>
            ${renderSegmentedButton({
              checked: isChecked,
              hovered: true,
              isIcon,
              size,
              text: 'Hovered',
            })}
          </div>
          <div>
            ${renderSegmentedButton({
              disabled: true,
              checked: isChecked,
              isIcon,
              size,
              text: 'Disabled',
            })}
          </div>
        `;
      })}
    `;
  };

  return html`
    ${styles}
    <div class="segment-button-grid">
      ${renderSegmentTypes({ isIcon: isIconOnly, size: size })}
    </div>
  `;
};

export const States = Template.bind({});
export const Sizes = ({ isIconOnly, onSegmentChanged }) => {
  const renderSegmentedControl = (quantity, size, isIcon) => {
    return html`<hmc-segmented-control
      value="0"
      @segmentChanged=${onSegmentChanged}
      class="pt-1"
    >
      ${Array.from(Array(quantity)).map(
        (_, index) => html`
          <hmc-segmented-button
            size=${size}
            value="${index}"
            icon-only=${isIcon}
          >
            ${isIcon
              ? html`<hmc-icon
                  name="placeholder-${size === 'md' ? 'm' : 's'}"
                ></hmc-icon>`
              : 'Segment'}
          </hmc-segmented-button>
        `,
      )}
    </hmc-segmented-control>`;
  };

  return html`
    ${styles}
    <div class="flex">
      <td>${renderSegmentedControl(4, 'md', isIconOnly)}</td>
      <td>${renderSegmentedControl(4, 'sm', isIconOnly)}</td>
      <td>${renderSegmentedControl(4, 'xs', isIconOnly)}</td>
    </div>
  `;
};
Sizes.args = {
  isIconOnly: false,
};
States.args = { ...Sizes.args, size: 'md' };
Sizes.argTypes = {
  size: {
    table: {
      disable: true,
    },
  },
};

const SEGMENT_TYPES = ['first', 'middle', 'last'];

const styles = html`
  <style>
    .segment-button-grid {
      width: 100%;
      display: grid;
      gap: 16px;
      grid-template-columns: repeat(3, minmax(64px, 1fr));
    }
    .flex {
      display: flex;
      flex-direction: column;
      gap: 16px;
    }
    .checked {
      --hmc-color-layout-divider-default: #0067b9;
      --hmc-color-content-default: #0067b9;
      --hmc-color-interactive-subtle-hovered: #00427a;
    }
    .checked:hover {
      --hmc-color-content-default: #00427a;
    }
  </style>
`;
