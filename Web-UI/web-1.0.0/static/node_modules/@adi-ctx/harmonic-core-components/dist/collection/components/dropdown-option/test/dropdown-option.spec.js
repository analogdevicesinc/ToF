import { newSpecPage } from '@stencil/core/testing';
import { emptyFn } from '../../../utils/empty.util';
import { HmcDropdownOption } from '../dropdown-option';
describe('hmc-dropdown-option', () => {
  let page;
  beforeEach(async () => {
    page = await newSpecPage({
      components: [HmcDropdownOption],
    });
  });
  it('builds', async () => {
    expect(new HmcDropdownOption()).toBeTruthy();
  });
  describe('renders', () => {
    it('should render default component', async () => {
      await page.setContent('<hmc-dropdown-option></hmc-dropdown-option>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-dropdown-option role="option" tabindex="0">
          <mock:shadow-root>
            <div class="last-child md option">
              <div class="inner-option">
                <slot></slot>
              </div>
            </div>
          </mock:shadow-root>
        </hmc-dropdown-option>
      `);
    });
    it('should render component with selected item', async () => {
      await page.setContent('<hmc-dropdown-option selected></hmc-dropdown-option>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-dropdown-option aria-selected="" role="option" selected="" tabindex="0">
          <mock:shadow-root>
            <div class="last-child md option selected">
              <div class="inner-option">
                <slot></slot>
                <hmc-icon class="checkmark" name="check-m"></hmc-icon>
              </div>
            </div>
          </mock:shadow-root>
        </hmc-dropdown-option>
      `);
    });
    it('should render component with disabled item', async () => {
      await page.setContent('<hmc-dropdown-option disabled></hmc-dropdown-option>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-dropdown-option aria-disabled="" disabled="" role="option" tabindex="-1">
          <mock:shadow-root>
            <div class="disabled last-child md option">
              <div class="inner-option">
                <slot></slot>
              </div>
            </div>
          </mock:shadow-root>
        </hmc-dropdown-option>
      `);
    });
  });
  describe('methods', () => {
    let eventSpy;
    it('should select the item on clicked', async () => {
      await page.setContent('<hmc-dropdown-option></hmc-dropdown-option>');
      eventSpy = jest.fn();
      page.rootInstance.selection = {
        emit: eventSpy,
      };
      page.rootInstance.handleItemSelect({ stopPropagation: emptyFn });
      expect(eventSpy).toHaveBeenCalled();
    });
  });
});
