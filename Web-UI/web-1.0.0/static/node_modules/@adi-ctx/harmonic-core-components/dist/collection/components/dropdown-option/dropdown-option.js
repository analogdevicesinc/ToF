import { h, Host, } from '@stencil/core';
/**
 * @slot - An unnamed slot is used to pass title label of Dropdown Option.
 * @slot caption - Slot to pass in caption to appear on below title label.
 * @slot left-icon - Slot to pass in hmc-icon to appear on left.
 * @slot right-icon - Slot to pass in hmc-icon to appear on right.
 * @slot left-value - Slot to pass Value to appear on left for Action type.
 * @slot right-value - Slot to pass Value to appear on right for Action type.
 */
export class HmcDropdownOption {
  constructor() {
    this.handleItemSelect = (event) => {
      event.stopPropagation();
      if (this.isDisabled) {
        return;
      }
      this.selection.emit({ value: this.value, selected: !this.isSelected });
    };
    this.value = undefined;
    this.isMultiple = false;
    this.isAction = false;
    this.isSelected = false;
    this.isDisabled = false;
    this.size = 'md';
    this.role = 'option';
  }
  connectedCallback() {
    this.setRoleBasedOnAncestor();
  }
  setRoleBasedOnAncestor() {
    let parentElement = this.el.parentElement;
    while (parentElement) {
      if (parentElement.tagName.toLowerCase() === 'hmc-dropdown-menu') {
        this.role = 'menuitem';
        break;
      }
      else if (parentElement.tagName.toLowerCase() === 'hmc-dropdown') {
        this.role = 'option';
        break;
      }
      parentElement = parentElement.parentElement;
    }
  }
  renderSingleSelectOption() {
    return (h("div", { class: "inner-option" }, h("div", { class: "action-slot" }, h("slot", { name: "left-icon" })), h("div", { class: "content" }, h("div", { class: "title" }, h("slot", null)), h("div", { class: "caption" }, h("slot", { name: "caption" }))), this.isSelected && (h("hmc-icon", { class: "checkmark action-slot", name: this.size === 'xs' ? 'check-s' : 'check-m' }))));
  }
  renderMultiSelectOption() {
    return (h("div", { class: "inner-option" }, h("hmc-checkbox", { size: this.size === 'xs' ? 'xs' : 'md', class: "action-slot", isChecked: this.isSelected, isDisabled: this.isDisabled, isReadonly: true }), h("div", { class: "content" }, h("div", { class: "title" }, h("slot", null)), h("div", { class: "caption" }, h("slot", { name: "caption" }))), h("div", { class: "action-slot" }, h("slot", { name: "right-icon" }))));
  }
  renderActionOption() {
    return (h("div", { class: "inner-option" }, h("div", { class: "action-slot" }, h("slot", { name: "left-icon" }), h("div", { class: "value" }, h("slot", { name: "left-value" }))), h("div", { class: "content" }, h("div", { class: "title" }, h("slot", null)), h("div", { class: "caption" }, h("slot", { name: "caption" }))), h("div", { class: "action-slot" }, h("slot", { name: "right-icon" }), h("div", { class: "value" }, h("slot", { name: "right-value" })))));
  }
  renderSelectionIndicator() {
    if (this.isMultiple) {
      return this.renderMultiSelectOption();
    }
    else if (this.isAction) {
      return this.renderActionOption();
    }
    else {
      return this.renderSingleSelectOption();
    }
  }
  componentDidLoad() {
    if (this.isMultiple) {
      this.el.shadowRoot.querySelector('hmc-checkbox').tabIndex = -1;
    }
  }
  render() {
    const { isSelected, isMultiple, isAction, isDisabled, size } = this;
    // Used for title text where label is truncated
    const optionLabel = this.el.innerText.trim();
    const classes = {
      'option': true,
      'selected': isSelected,
      'multiple': isMultiple,
      'action': isAction,
      'disabled': isDisabled,
      'last-child': this.isLastChild(),
      [size]: true,
    };
    return (h(Host, { onClick: this.handleItemSelect, role: this.role, "aria-selected": isSelected, "aria-disabled": isDisabled, tabIndex: isDisabled ? -1 : 0, title: optionLabel }, h("div", { class: classes }, this.renderSelectionIndicator())));
  }
  isLastChild() {
    // Last element in the list is followed by the hidden input for form submission
    return (!this.el.nextElementSibling ||
      this.el.nextElementSibling.classList.contains('aux-input'));
  }
  static get is() { return "hmc-dropdown-option"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dropdown-option.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dropdown-option.css"]
    };
  }
  static get properties() {
    return {
      "value": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The value of the option."
        },
        "attribute": "value",
        "reflect": false
      },
      "isMultiple": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "This prop changes the look of the option depending on whether it is for use with a multiple\nor single selection dropdown.\nDefault, `false`."
        },
        "attribute": "multiple",
        "reflect": false,
        "defaultValue": "false"
      },
      "isAction": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "This prop changes the look of the option depending on whether it is for use with an action.\nDefault, `false`."
        },
        "attribute": "action",
        "reflect": false,
        "defaultValue": "false"
      },
      "isSelected": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies 'selected' state of the option.\nDefault, `false`."
        },
        "attribute": "selected",
        "reflect": false,
        "defaultValue": "false"
      },
      "isDisabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies 'disabled' state of the option.\nDefault, `false`."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DropdownOptionSize",
          "resolved": "\"md\" | \"sm\" | \"xs\"",
          "references": {
            "DropdownOptionSize": {
              "location": "import",
              "path": "../type/size.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The size of the input.\nAvailable options are: \"xs\", \"sm\" and \"md\".\nDefault: \"md\"."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'md'"
      }
    };
  }
  static get states() {
    return {
      "role": {}
    };
  }
  static get events() {
    return [{
        "method": "selection",
        "name": "hmcDropdownSelection",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
}
