import { h, Host } from '@stencil/core';
/**
 * @slot - An unnamed slot is used to pass a content to the DropdownGroup.
 */
export class HmcDropdownGroup {
  constructor() {
    this.groupTitle = undefined;
    this.size = 'md';
    this.isFirstElement = null;
  }
  connectedCallback() {
    this.isFirstElement = !this.el.previousElementSibling;
  }
  render() {
    const { size } = this;
    const classes = {
      group: true,
      [size]: true,
    };
    return (h(Host, { role: "group" }, h("div", { class: classes, id: this.groupTitle ? 'group-title' : undefined }, !this.isFirstElement && h("div", { class: "divider" }), this.groupTitle && h("div", { class: "title" }, this.groupTitle), h("slot", null))));
  }
  static get is() { return "hmc-dropdown-group"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dropdown-group.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dropdown-group.css"]
    };
  }
  static get properties() {
    return {
      "groupTitle": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "group-title",
        "reflect": false
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DropdownGroupSize",
          "resolved": "\"md\" | \"sm\" | \"xs\"",
          "references": {
            "DropdownGroupSize": {
              "location": "import",
              "path": "../type/size.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The size of the input.\nAvailable options are: \"xs\", \"sm\" and \"md\".\nDefault: \"md\"."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'md'"
      }
    };
  }
  static get states() {
    return {
      "isFirstElement": {}
    };
  }
  static get elementRef() { return "el"; }
}
