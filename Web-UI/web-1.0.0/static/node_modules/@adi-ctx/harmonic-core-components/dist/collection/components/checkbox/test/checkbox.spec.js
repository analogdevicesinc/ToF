import { newSpecPage } from '@stencil/core/testing';
import { HmcCheckbox } from '../checkbox';
describe('hmc-checkbox', () => {
  let page;
  beforeEach(async () => {
    page = await newSpecPage({
      components: [HmcCheckbox],
    });
  });
  it('builds', () => {
    expect(new HmcCheckbox()).toBeTruthy();
  });
  describe('renders', () => {
    it('should render default component', async () => {
      await page.setContent('<hmc-checkbox></hmc-checkbox>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-checkbox tabindex="0">
          <mock:shadow-root>
            <div class="container md">
              <div class="checkbox">
                <div class="checkmark transparent"></div>
              </div>
              <label htmlfor="hmc-checkbox"></label>
              <input aria-checked="false" id="hmc-checkbox" tabindex="-1" type="checkbox">
            </div>
          </mock:shadow-root>
          <input class="aux-input" name="undefined" type="hidden" value="on">
        </hmc-checkbox>
      `);
    });
    it('should render component which is disabled', async () => {
      await page.setContent('<hmc-checkbox disabled></hmc-checkbox>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-checkbox class="disabled" disabled="" tabindex="-1">
          <mock:shadow-root>
            <div class="container disabled md">
              <div class="checkbox disabled">
                <div class="checkmark transparent"></div>
              </div>
              <label htmlfor="hmc-checkbox"></label>
              <input aria-checked="false" disabled="" id="hmc-checkbox" tabindex="-1" type="checkbox">
            </div>
          </mock:shadow-root>
          <input class="aux-input" disabled="" name="undefined" type="hidden" value="on">
        </hmc-checkbox>
      `);
    });
    it('should render component with "Label"', async () => {
      await page.setContent('<hmc-checkbox label="Label" disabled></hmc-checkbox>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-checkbox class="disabled" disabled="" label="Label" tabindex="-1">
          <mock:shadow-root>
            <div class="container disabled md">
              <div class="checkbox disabled">
                <div class="checkmark transparent"></div>
              </div>
              <label htmlfor="hmc-checkbox">
                Label
              </label>
              <input aria-checked="false" disabled="" id="hmc-checkbox" tabindex="-1" type="checkbox">
            </div>
          </mock:shadow-root>
          <input class="aux-input" disabled="" name="undefined" type="hidden" value="on">
        </hmc-checkbox>
      `);
    });
  });
  describe('methods', () => {
    let eventSpy;
    beforeEach(async () => {
      await page.setContent('<hmc-checkbox></hmc-checkbox>');
      eventSpy = jest.fn();
      page.rootInstance.changed = {
        emit: eventSpy,
      };
    });
    it('should fire the event when checkbox clicked', async () => {
      page.rootInstance.isChecked = true;
      page.doc.querySelector('hmc-checkbox').click();
      expect(eventSpy).toHaveBeenCalled();
      expect(page.rootInstance.isChecked).toBeFalsy();
    });
  });
});
