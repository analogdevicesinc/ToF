import { Host, h, } from '@stencil/core';
import { renderHiddenInput } from '../../utils/utils';
const FIELD_ID = 'hmc-dropdown-id';
/**
 * @slot - An unnamed slot is used to pass hmc-dropdown-options to the Dropdown.
 * @slot icon - slot="icon" is used to pass an icon to the Dropdown.
 * @slot hint - slot="hint" is used to pass a hint component. It will be rendered next to a label and if the label
 * prop was passed.
 */
export class HmcDropdown {
  constructor() {
    this._hasIcon = false;
    this._didInit = false;
    this.placeholder = 'Select';
    this.size = 'md';
    this.value = undefined;
    this.name = undefined;
    this.label = '';
    this.isDisabled = false;
    this.isClearable = false;
    this.status = 'normal';
    this.helperText = undefined;
    this.selectedText = undefined;
    this.scrollContainerId = undefined;
    this.forcePlacement = undefined;
    this.isRequired = undefined;
    this.optionalText = undefined;
    this.multiple = false;
    this.maxVisibleOpts = 8;
    this.alignment = 'left';
    this.isExpanded = false;
    this.placement = 'bottom';
    this.v3EventBehaviour = false;
  }
  handleClick(e) {
    var _a;
    if ((_a = e === null || e === void 0 ? void 0 : e.composedPath()) === null || _a === void 0 ? void 0 : _a.includes(this.el)) {
      this.toggle();
    }
  }
  get childOpts() {
    var _a;
    return Array.from(((_a = this.el) === null || _a === void 0 ? void 0 : _a.querySelectorAll('hmc-dropdown-option')) || []);
  }
  toggle() {
    if (this.isDisabled) {
      return;
    }
    if (!this.isExpanded) {
      const containerElement = document.getElementById(this.scrollContainerId) ||
        document.documentElement;
      const elementDistanceToBottomOfViewport = this.el.getBoundingClientRect()
        .bottom;
      const containerDistanceToBottomOfViewport = containerElement.getBoundingClientRect()
        .bottom;
      const visibleSpaceBelowElement = containerDistanceToBottomOfViewport - elementDistanceToBottomOfViewport;
      // If the forcePlacement is not set the option list will be placed base on calculation
      if (this.forcePlacement) {
        this.placement = this.forcePlacement;
      }
      else {
        // When there is enough space, render the option list below the button.
        // Includes buffer for padding, scrollbar
        if (visibleSpaceBelowElement > this._maxListContainerHeight + 20) {
          this.placement = 'bottom';
        }
        else {
          this.placement = 'top';
        }
      }
    }
    this.isExpanded = !this.isExpanded;
    this.toggled.emit({ isActive: this.isExpanded });
  }
  handleSelection(event) {
    if (this.multiple) {
      this.handleMultipleSelection(event);
    }
    else {
      this.isExpanded = false;
      this.toggled.emit({ isActive: false });
      if (event.detail.selected) {
        this.value = event.detail.value;
      }
      else if (this.isClearable) {
        this.value = undefined;
      }
      if (this.v3EventBehaviour) {
        this.changed.emit({ value: this.value });
      }
    }
    this.setOptionSelection();
  }
  handleMultipleSelection(event) {
    if (event.detail.selected) {
      // Add to or create array
      if (Array.isArray(this.value)) {
        // Trigger rerender with new array
        this.value = [...this.value, event.detail.value];
      }
      else {
        this.value = [event.detail.value];
      }
    }
    else {
      if (Array.isArray(this.value)) {
        this.value = this.value.filter(val => val !== event.detail.value);
        if (!this.value.length) {
          this.value = undefined;
        }
      }
      else {
        this.value = undefined;
      }
    }
  }
  setOptionSelection() {
    this.childOpts.forEach(option => {
      option.isSelected = this.isOptionSelected(option.value);
    });
  }
  handleBlur(event) {
    var _a;
    if (this.isExpanded &&
      ((_a = event.relatedTarget) === null || _a === void 0 ? void 0 : _a.tagName) !== 'HMC-DROPDOWN-OPTION' &&
      event.relatedTarget !== this.el) {
      this.isExpanded = false;
      this.toggled.emit({ isActive: this.isExpanded });
    }
  }
  valueChanged() {
    if (this.multiple &&
      typeof this.value === 'string' &&
      this.value[0] === '[') {
      this.value = JSON.parse(this.value);
    }
    if (this._didInit && !this.v3EventBehaviour) {
      this.changed.emit({ value: this.value });
    }
    this.setOptionSelection();
  }
  setListHeight() {
    const heightMap = {
      xs: 24,
      md: 40,
    };
    const optionSize = this.childOpts.length > 0 ? this.childOpts[0].size : 'md';
    const listContainer = this.el.shadowRoot.querySelector('.list-container');
    // Add a buffer to max height to make scrolling obvious.
    this._maxListContainerHeight =
      heightMap[optionSize] * this.maxVisibleOpts + heightMap[optionSize] / 2;
    listContainer.style.maxHeight = this._maxListContainerHeight + 'px';
  }
  componentWillLoad() {
    if (this.multiple) {
      this.valueChanged();
    }
    if (this.multiple && this.value && !Array.isArray(this.value)) {
      this.value = [this.value];
    }
    this.setOptionSelection();
    this._didInit = true;
  }
  componentDidLoad() {
    this.setListHeight();
  }
  render() {
    const { size, value, name, label, optionalText, placeholder, placement, alignment, helperText, isDisabled, isExpanded, isRequired, status, } = this;
    renderHiddenInput(this.el, name, isDisabled, this.getText());
    this._hasIcon = Boolean(this.el.querySelector('[slot="icon"]'));
    const inputClasses = {
      dropdown: true,
      expanded: isExpanded,
      disabled: isDisabled,
      [size]: true,
      [status]: true,
    };
    const selectedValueClasses = {
      'dropdown-content': true,
      'filled': Boolean(value),
    };
    const listContainerClasses = {
      'list-container': true,
      'hidden': !isExpanded,
      [placement]: true,
      [alignment]: true,
      [size]: true,
    };
    return (h(Host, null, h("div", { class: 'input-label ' + size }, !!label && (h("span", { class: "label" }, h("label", { htmlFor: FIELD_ID }, label), h("span", { class: "hint" }, h("slot", { name: "hint" })))), isRequired === false && (h("span", { class: "label-optional" }, optionalText))), h("button", { class: inputClasses, "aria-haspopup": "listbox", disabled: isDisabled }, h("div", { class: selectedValueClasses }, h("slot", { name: "icon" }), h("div", { class: "dropdown-text" }, value ? this.getText() : placeholder)), h("hmc-icon", { class: "dropdown-arrow", name: "chevron-down-m" })), h("div", { role: "listbox", class: listContainerClasses }, h("slot", null)), status !== 'normal' && Boolean(helperText) && (h("div", { class: "helper-text" }, h("hmc-message", { status: status }, helperText)))));
  }
  getText() {
    if (Boolean(this.selectedText) && this.selectedText !== '') {
      return this.selectedText;
    }
    else {
      return this.childOpts
        .filter(opt => opt.isSelected)
        .map(opt => opt.textContent.trim())
        .join(', ');
    }
  }
  isOptionSelected(optionValue) {
    if (this.value === undefined) {
      return false;
    }
    if (Array.isArray(this.value)) {
      return this.value.some(val => val === optionValue);
    }
    else {
      return this.value === optionValue;
    }
  }
  static get is() { return "hmc-dropdown"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dropdown.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dropdown.css"]
    };
  }
  static get properties() {
    return {
      "placeholder": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Placeholder for component.\nShown if component not processing and has no value provided"
        },
        "attribute": "placeholder",
        "reflect": false,
        "defaultValue": "'Select'"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DropdownSize",
          "resolved": "\"md\" | \"sm\" | \"xs\"",
          "references": {
            "DropdownSize": {
              "location": "import",
              "path": "../type/size.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies size of component via wrapper padding.\nDefault: \"md\"."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'md'"
      },
      "value": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string | string[] | undefined",
          "resolved": "string | string[]",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "Current value of the dropdown, can be used to preselect an option.\nDefault: undefined."
        },
        "attribute": "value",
        "reflect": false
      },
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Name for form submission.\nDefault: \"\"."
        },
        "attribute": "name",
        "reflect": false
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies label text of the input.\nDefault: ''."
        },
        "attribute": "label",
        "reflect": false,
        "defaultValue": "''"
      },
      "isDisabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies 'disabled' state of the component.\nDefault, `false`."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "isClearable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies whether the selection can be cleared once a selection is made. Only applies when `multiple=true`.\nDefault, `false`."
        },
        "attribute": "clearable",
        "reflect": false,
        "defaultValue": "false"
      },
      "status": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DropdownStatusType",
          "resolved": "\"error\" | \"normal\" | \"warning\"",
          "references": {
            "DropdownStatusType": {
              "location": "import",
              "path": "../type/status.type"
            }
          }
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "Provide status for dropdown\nDefault, `error`."
        },
        "attribute": "status",
        "reflect": false,
        "defaultValue": "'normal'"
      },
      "helperText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "Specifies helper text for component (optional)."
        },
        "attribute": "helper-text",
        "reflect": false
      },
      "selectedText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "Overrides the text displayed when one or more options are selected."
        },
        "attribute": "selected-text",
        "reflect": false
      },
      "scrollContainerId": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies scroll container Id or fallbacks to documentElement\nTo calculate and select visible placement for dropdown"
        },
        "attribute": "scroll-container-id",
        "reflect": false
      },
      "forcePlacement": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DropdownPlacement",
          "resolved": "\"bottom\" | \"top\"",
          "references": {
            "DropdownPlacement": {
              "location": "import",
              "path": "../type/variant.type"
            }
          }
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "Forces placement of the list of options to be opened according to placement received (bottom or top).\nIf not provided the Dropdown determines its own position automatically."
        },
        "attribute": "force-placement",
        "reflect": false
      },
      "isRequired": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "Based on this prop \"optional\" label could be shown or not.\nDefault: 'undefined'."
        },
        "attribute": "required",
        "reflect": false
      },
      "optionalText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "String to indicate the input is optional in a form, shown when required=false."
        },
        "attribute": "optional-text",
        "reflect": false
      },
      "multiple": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies the option selection is multiple.\nTrue - multiple options selected, false - single option selected\nDefault: `false`"
        },
        "attribute": "multiple",
        "reflect": false,
        "defaultValue": "false"
      },
      "maxVisibleOpts": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies the number of options that can be displayed in the dropdown before the\ncontainer displays a scroll bar.\nDefault: `8`"
        },
        "attribute": "max-visible-opts",
        "reflect": false,
        "defaultValue": "8"
      },
      "alignment": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DropdownAlignment",
          "resolved": "\"left\" | \"right\"",
          "references": {
            "DropdownAlignment": {
              "location": "import",
              "path": "../type/variant.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies alignment of dropdown, relative to component"
        },
        "attribute": "alignment",
        "reflect": false,
        "defaultValue": "'left'"
      },
      "v3EventBehaviour": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies whether external value changes to the dropdown are disabled.\nWhen set to `true`, the dropdown will not respond to changes made from outside the component.\nDefaults: `false`."
        },
        "attribute": "v3-event-behaviour",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "isExpanded": {},
      "placement": {}
    };
  }
  static get events() {
    return [{
        "method": "toggled",
        "name": "toggled",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the dropdown's expanded state is toggled.\nEvent detail: { isActive: boolean }."
        },
        "complexType": {
          "original": "{ isActive: boolean }",
          "resolved": "{ isActive: boolean; }",
          "references": {}
        }
      }, {
        "method": "changed",
        "name": "changed",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the selected value changes.\nEvent detail: { value: string | string[] | undefined }."
        },
        "complexType": {
          "original": "{ value: string | string[] | undefined }",
          "resolved": "{ value: string | string[]; }",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "el"; }
  static get watchers() {
    return [{
        "propName": "value",
        "methodName": "valueChanged"
      }, {
        "propName": "maxVisibleOpts",
        "methodName": "setListHeight"
      }];
  }
  static get listeners() {
    return [{
        "name": "click",
        "method": "handleClick",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "hmcDropdownSelection",
        "method": "handleSelection",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "focusout",
        "method": "handleBlur",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
