import { html } from 'lit-html';

import optionReadme from '../dropdown-option/readme.md';

import documentation from './dropdown-documentation.mdx';
import dropdownReadme from './readme.md';

const DEFAULT_PLACEMENT = 'not set';

export default {
  title: 'Components/Dropdown',
  parameters: {
    notes: {
      Dropdown: dropdownReadme,
      Option: optionReadme,
    },
    docs: {
      page: documentation,
    },
  },
  args: {},
  argTypes: {
    forcePlacement: {
      control: {
        type: 'inline-radio',
        options: [DEFAULT_PLACEMENT, 'bottom', 'top'],
      },
    },
    multiple: {
      table: {
        disable: true,
      },
    },
    alignment: {
      control: {
        type: 'inline-radio',
        options: ['left', 'right'],
      },
    },
    size: {
      control: {
        type: 'inline-radio',
        options: ['xs', 'sm', 'md'],
      },
    },
    status: {
      control: {
        type: 'inline-radio',
        options: ['normal', 'info', 'error', 'warning'],
      },
    },
    onChanged: { action: 'changed' },
    onToggled: { action: 'toggled' },
  },
};

const MULTI_OPTS = [
  {
    value: 'hmc-designer',
    label: 'Harmonic Designer',
  },
  {
    value: 'waveform-generator',
    label: 'Waveform Generator',
  },
];

const MULTI_OPTS2 = [
  {
    value: 'waveform-analyzer',
    label: 'Waveform Analyzer',
  },
  {
    value: 'lt-spice',
    label: 'LT Spice',
  },
];

const MULTI_SELECT_ID = 'multi-select-storybook-demo';
let multiSelectedPlaceholder = 'Hint';

const renderMultiSelectOptions = (oSize, hasGroupTitle = true) => {
  var title = hasGroupTitle ? 'Title' : '';
  return html`
    <hmc-dropdown-group group-title=${title} size=${oSize}>
      ${MULTI_OPTS.map(opt => {
        return html` <hmc-dropdown-option
          id="multi-${opt.value}"
          size="${oSize}"
          value=${opt.value}
          multiple=${true}
        >
          ${opt.label}
        </hmc-dropdown-option>`;
      })}
    </hmc-dropdown-group>
    <hmc-dropdown-group group-title=${title} size=${oSize}>
      ${MULTI_OPTS2.map(opt => {
        return html` <hmc-dropdown-option
          id="multi-${opt.value}"
          size="${oSize}"
          value=${opt.value}
          multiple=${true}
        >
          ${opt.label}
        </hmc-dropdown-option>`;
      })}
    </hmc-dropdown-group>
  `;
};
const renderDropdownOptions = (size, hasGroupTitle = true) => {
  var title = hasGroupTitle ? 'Title' : '';
  return html`
    <hmc-dropdown-group group-title=${title} size=${size}>
      ${Array.from(Array(5)).map((_, index) => {
        return html`
          <hmc-dropdown-option size=${size} value=${index}>
            Item ${index + 1}
          </hmc-dropdown-option>
        `;
      })}
    </hmc-dropdown-group>
    <hmc-dropdown-group group-title=${title} size=${size}>
      ${Array.from(Array(5)).map((_, index) => {
        return html`
          <hmc-dropdown-option size=${size} value=${index + 5}>
            Item ${index + 6}
          </hmc-dropdown-option>
        `;
      })}
    </hmc-dropdown-group>
  `;
};
const renderIcon = (shouldRender, size) => {
  if (shouldRender) {
    return html` <hmc-icon
      slot="icon"
      name="placeholder-${size === 'md' ? 'm' : 's'}"
    ></hmc-icon>`;
  }
};
const renderHint = shouldRender => {
  if (shouldRender) return html` <hmc-icon name="info-xs" slot="hint" /> `;
};
export const Playground = ({
  placeholder,
  selectedText,
  size,
  disabled,
  clearable,
  status,
  helperText,
  label,
  isRequired,
  alignment,
  forcePlacement,
  maxVisibleOpts,
  onChanged,
  onToggled,
  multiple,
  slottedIcon,
  slottedHint,
  v3EventBehaviour,
  groupSize,
  hasGroupTitle,
}) => {
  if (groupSize < 0) {
    groupSize = 0;
  }

  var title = hasGroupTitle ? 'Title' : '';

  const singleDropdown = html` <hmc-dropdown
    placeholder=${placeholder}
    selected-text=${selectedText}
    size=${size}
    disabled=${disabled}
    clearable=${clearable}
    helper-text=${helperText}
    status=${status}
    label=${label}
    required=${isRequired}
    optional-text="Optional"
    alignment="${alignment}"
    force-placement="${forcePlacement}"
    max-visible-opts=${maxVisibleOpts}
    @changed=${onChanged}
    @toggled=${onToggled}
    v3-event-behaviour=${v3EventBehaviour}
  >
    ${renderIcon(slottedIcon, size)}
    ${Array.from(Array(groupSize)).map((_, index) => {
      return html`
        <hmc-dropdown-group size=${size} group-title=${title}>
          ${Array.from(Array(3)).map((_, itemIndex) => {
            return html`
              <hmc-dropdown-option
                size=${size}
                value=${3 * index + 1 + itemIndex}
              >
                Item ${3 * index + 1 + itemIndex}
              </hmc-dropdown-option>
            `;
          })}
        </hmc-dropdown-group>
      `;
    })}
    ${renderHint(slottedHint)}
  </hmc-dropdown>`;

  const multiDropdown = html` <hmc-dropdown
    id="${MULTI_SELECT_ID}"
    value='["hmc-designer", "waveform-generator"]'
    selected-text=${selectedText}
    placeholder="${multiSelectedPlaceholder}"
    size=${size}
    disabled=${disabled}
    helper-text=${helperText}
    status=${status}
    label=${label}
    required=${isRequired}
    optional-text="Optional"
    multiple
    force-placement="${forcePlacement}"
    @changed=${onChanged}
    @toggled=${onToggled}
    v3-event-behaviour=${v3EventBehaviour}
  >
    ${renderIcon(slottedIcon, size)} ${renderMultiSelectOptions(size)}
    ${renderHint(slottedHint)}
  </hmc-dropdown>`;

  return html`
    <style>
      .dropdown {
        width: 200px;
        margin-right: 32px;
      }
    </style>
    <div class="dropdown">${multiple ? multiDropdown : singleDropdown}</div>
  `;
};
Playground.args = {
  alignment: 'left',
  clearable: false,
  disabled: false,
  forcePlacement: DEFAULT_PLACEMENT,
  helperText: 'Error message',
  label: 'Label',
  maxVisibleOpts: 8,
  multiple: false,
  isRequired: false,
  placeholder: 'Placeholder',
  selectedText: '',
  size: 'md',
  status: 'normal',
  slottedIcon: false,
  slottedHint: false,
  v3EventBehaviour: false,
  groupSize: 3,
  hasGroupTitle: true,
};
Playground.argTypes = {
  multiple: {
    table: {
      disable: false,
    },
  },
};
export const States = ({ size, onChanged, onToggled }) => {
  return html`
    ${styles}
    <div class="flex-display" style="align-items: flex-start">
      <hmc-dropdown
        placeholder="Placeholder"
        size=${size}
        label="Default"
        optional-text="Optional"
        @changed=${onChanged}
        @toggled=${onToggled}
        status="normal"
        force-placement=${'bottom'}
        class="dropdown"
      >
        <hmc-icon slot="icon" name="placeholder-md"></hmc-icon>
        ${renderDropdownOptions(size)}
      </hmc-dropdown>
      <hmc-dropdown
        placeholder="Placeholder"
        size=${size}
        label="Disabled"
        disabled="true"
        optional-text="Optional"
        @changed=${onChanged}
        @toggled=${onToggled}
        status="normal"
        force-placement=${'bottom'}
        class="dropdown"
      >
        <hmc-icon slot="icon" name="placeholder-md"></hmc-icon>
        ${renderDropdownOptions(size)}
      </hmc-dropdown>
      <hmc-dropdown
        placeholder="Placeholder"
        size=${size}
        label="Error"
        helper-text="Error Message"
        optional-text="Optional"
        @changed=${onChanged}
        @toggled=${onToggled}
        status="error"
        force-placement=${'bottom'}
        class="dropdown"
      >
        <hmc-icon slot="icon" name="placeholder-md"></hmc-icon>
        ${renderDropdownOptions(size)}
      </hmc-dropdown>
      <hmc-dropdown
        placeholder="Placeholder"
        size=${size}
        helper-text="Warning Message"
        label="Warning"
        optional-text="Optional"
        @changed=${onChanged}
        @toggled=${onToggled}
        status="warning"
        force-placement=${'bottom'}
        class="dropdown"
      >
        <hmc-icon slot="icon" name="placeholder-md"></hmc-icon>
        ${renderDropdownOptions(size)}
      </hmc-dropdown>
    </div>
  `;
};
States.argTypes = {
  forcePlacement: {
    table: {
      disable: true,
    },
  },
  alignment: {
    table: {
      disable: true,
    },
  },
  status: {
    table: {
      disable: true,
    },
  },
};
export const Sizes = ({ onChanged, onToggled }) => {
  return html`
    ${styles}
    <div class="flex-display">
      <hmc-dropdown
        placeholder="Placeholder"
        size="md"
        label="Medium"
        optional-text="Optional"
        @changed=${onChanged}
        @toggled=${onToggled}
        force-placement=${'bottom'}
        class="dropdown"
      >
        <hmc-icon slot="icon" name="placeholder-m"></hmc-icon>
        ${renderDropdownOptions('md')}
      </hmc-dropdown>
      <hmc-dropdown
        placeholder="Placeholder"
        size="sm"
        label="Small"
        optional-text="Optional"
        @changed=${onChanged}
        @toggled=${onToggled}
        force-placement=${'bottom'}
        class="dropdown"
      >
        <hmc-icon slot="icon" name="placeholder-s"></hmc-icon>
        ${renderDropdownOptions('sm')}
      </hmc-dropdown>
      <hmc-dropdown
        placeholder="Placeholder"
        size="xs"
        label="Extra Small"
        optional-text="Optional"
        @changed=${onChanged}
        @toggled=${onToggled}
        force-placement=${'bottom'}
        class="dropdown"
      >
        <hmc-icon slot="icon" name="placeholder-s"></hmc-icon>
        ${renderDropdownOptions('xs')}
      </hmc-dropdown>
    </div>
  `;
};

Sizes.argTypes = {
  size: {
    table: {
      disable: true,
    },
  },
  forcePlacement: {
    table: {
      disable: true,
    },
  },
  alignment: {
    table: {
      disable: true,
    },
  },
  status: {
    table: {
      disable: true,
    },
  },
};

const styles = html`
  <style>
    .master-container {
      display: flex;
      padding-left: 32px;
    }
    .master-sub-section {
      width: 200px;
      margin-right: 32px;
    }
    .flex-display {
      display: flex;
      align-items: flex-end;
      margin-bottom: 16px;
      gap: 16px;
    }
    .dropdown {
      margin-right: 32px;
      width: 200px;
    }
    .container {
      padding: 0 80px;
      margin-top: 20px;
      overflow: auto;
      width: 1120px;
    }
  </style>
`;
