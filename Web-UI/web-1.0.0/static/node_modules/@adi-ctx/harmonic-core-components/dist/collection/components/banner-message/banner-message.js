import { Host, h } from '@stencil/core';
const statusIconMap = {
  low: {
    success: 'check-round-m',
    warning: 'warning-m',
    error: 'error-m',
    info: 'info-m',
  },
  high: {
    success: 'check-circle-s',
    warning: 'warning-s',
    error: 'error-s',
    info: 'info-s',
  },
};
/**
 * @slot - An unnamed slot is used to pass the main text content of the banner.
 */
export class HmcBannerMessage {
  constructor() {
    this.status = 'info';
    this.density = 'low';
    this.actionText = '';
    this.isClosable = false;
    this.withIcon = true;
    this.iconName = undefined;
  }
  render() {
    const { actionText, density, iconName, isClosable, status, withIcon, } = this;
    const classList = {
      'banner': true,
      [status]: true,
      'high-density': density === 'high',
    };
    const icon = (iconName || statusIconMap[density][status]);
    return (h(Host, null, h("div", { class: classList }, h("div", { class: "content-container" }, withIcon && h("hmc-icon", { name: icon }), h("div", { class: "main-content" }, h("slot", null))), h("div", { class: "action-container" }, actionText !== '' && (h("hmc-button", { size: density === 'low' ? 'sm' : 'xs', kind: "secondary", onClick: () => this.actionClicked.emit() }, actionText)), isClosable && (h("hmc-button", { "icon-only": true, size: density === 'low' ? 'sm' : 'xs', kind: "ghost", onClick: () => this.bannerCloseRequested.emit() }, h("hmc-icon", { name: "close-m" })))))));
  }
  static get is() { return "hmc-banner-message"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["banner-message.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["banner-message.css"]
    };
  }
  static get properties() {
    return {
      "status": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "MessageStatusType",
          "resolved": "\"error\" | \"info\" | \"success\" | \"warning\"",
          "references": {
            "MessageStatusType": {
              "location": "import",
              "path": "../type/status.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Status to convery to the user with the message."
        },
        "attribute": "status",
        "reflect": false,
        "defaultValue": "'info'"
      },
      "density": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'low' | 'high'",
          "resolved": "\"high\" | \"low\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Density of the information conveyed. Higher density will occupy less space in the\ninterface for the same information."
        },
        "attribute": "density",
        "reflect": false,
        "defaultValue": "'low'"
      },
      "actionText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Text label for the optional button. Providing a value will cause a button to render."
        },
        "attribute": "action-text",
        "reflect": false,
        "defaultValue": "''"
      },
      "isClosable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If set `true`, the banner will display a button with a close icon. When the user clicks\nthis button a `bannerCloseRequested` event will fire."
        },
        "attribute": "closable",
        "reflect": false,
        "defaultValue": "false"
      },
      "withIcon": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Toggles the display of an icon to the left of the banner main text."
        },
        "attribute": "with-icon",
        "reflect": false,
        "defaultValue": "true"
      },
      "iconName": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Allows the optional override of the icon to the left of the text. If not provided, the icon will be\ndetermined based on status. Small icons should be used with the high density while medium icons work best with low."
        },
        "attribute": "icon-name",
        "reflect": false
      }
    };
  }
  static get events() {
    return [{
        "method": "actionClicked",
        "name": "actionClicked",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "This event will fire when the user clicks the optional button which appears when `actionText` is provided."
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }, {
        "method": "bannerCloseRequested",
        "name": "bannerCloseRequested",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "This event fires when the user clicks the close button. The app can then respond to this and remove the\nbanner from the UI."
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
}
