import flip from '@popperjs/core/lib/modifiers/flip';
import offset from '@popperjs/core/lib/modifiers/offset';
import { createPopper } from '@popperjs/core/lib/popper-lite';
import { h, Host } from '@stencil/core';
/**
 * @slot - An unnamed slot is used to pass a content to the DropdownMenu.
 */
export class HmcDropdownMenu {
  constructor() {
    this.handleMenu = () => {
      if (this.isOpen) {
        const xoffset = 0;
        this.menuInstance = createPopper(this.triggerElement, this.menuEl, {
          placement: 'bottom',
          strategy: 'absolute',
          modifiers: [
            {
              name: 'offset',
              options: {
                offset: [xoffset, 8],
              },
            },
            {
              name: 'flip',
              options: {
                flipVariations: false,
              },
            },
            flip,
            offset,
          ],
        });
      }
      else if (this.menuInstance) {
        this.menuInstance.destroy();
        this.menuInstance = null;
      }
    };
    this.triggerId = undefined;
    this.isOpen = false;
  }
  componentDidLoad() {
    this.selectMenuTarget();
    if (this.triggerElement) {
      this.triggerElement.addEventListener('click', ev => {
        ev.stopPropagation();
        this.isOpen = !this.isOpen;
      });
      this.handleMenu();
    }
  }
  selectMenuTarget() {
    var _a;
    if (this.triggerId !== '') {
      const rootElement = this.el.getRootNode();
      this.triggerElement =
        (_a = document.getElementById(this.triggerId)) !== null && _a !== void 0 ? _a : rootElement.querySelector(`#${this.triggerId}`);
    }
  }
  render() {
    const { isOpen } = this;
    const listContainerClasses = {
      'list-container': true,
      'show': isOpen,
    };
    return (h(Host, { role: "menu" }, h("div", { ref: ref => (this.menuEl = ref), class: listContainerClasses }, h("slot", null))));
  }
  static get is() { return "hmc-dropdown-menu"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dropdown-menu.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dropdown-menu.css"]
    };
  }
  static get properties() {
    return {
      "triggerId": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies id of the element (triggerElement) that will be show/hide tooltip."
        },
        "attribute": "trigger-id",
        "reflect": false
      },
      "isOpen": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Use to programatically set the initial open state of the tooltip.\nDefault: 'false'."
        },
        "attribute": "open",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get elementRef() { return "el"; }
}
