import { newSpecPage } from '@stencil/core/testing';
import { HmcInputField } from '../input-field';
describe('input-field', () => {
  let page;
  beforeEach(async () => {
    page = await newSpecPage({
      components: [HmcInputField],
    });
  });
  it('builds', async () => {
    expect(new HmcInputField()).toBeTruthy();
  });
  describe('renders', () => {
    it('should render default component', async () => {
      await page.setContent('<hmc-input-field name="input-name"></hmc-input-field>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-input-field name="input-name">
          <mock:shadow-root>
            <div class="input-wrapper md" style="width: 200px;">
              <div class="input-label"></div>
              <div class="input-group">
                <input autocomplete="off" id="hmc-input-id" name="input-name" spellcheck="false" type="string" value="">
              </div>
            </div>
          </mock:shadow-root>
          <input class="aux-input" name="input-name" type="hidden" value="">
        </hmc-input-field>
      `);
    });
    it('should render error full width component', async () => {
      await page.setContent('<hmc-input-field status="error" helper-text="stencil" full-width></hmc-input-field>');
      expect(page.root).toMatchInlineSnapshot(`
        <hmc-input-field full-width="" helper-text="stencil" status="error">
          <mock:shadow-root>
            <div class="error input-wrapper md" style="width: 100%;">
              <div class="input-label"></div>
              <div class="input-group">
                <input autocomplete="off" id="hmc-input-id" spellcheck="false" type="string" value="">
              </div>
              <div class="helper-text">
                <hmc-message status="error">
                  stencil
                </hmc-message>
              </div>
            </div>
          </mock:shadow-root>
          <input class="aux-input" name="undefined" type="hidden" value="">
        </hmc-input-field>
      `);
    });
  });
  describe('methods', () => {
    let eventSpy;
    beforeEach(async () => {
      eventSpy = jest.fn();
    });
    it('should fire the change event when clear', async () => {
      await page.setContent('<hmc-input-field></hmc-input-field>');
      page.rootInstance.inputEl = {
        focus: jest.fn(),
      };
      page.rootInstance.value = 'ADI';
      page.rootInstance.hmcChange = {
        emit: eventSpy,
      };
      page.rootInstance.handleClear(new Event(''));
      expect(eventSpy).toHaveBeenCalled();
      expect(page.rootInstance.value).toEqual('');
    });
    it('should fire the blur event when blurring the input', async () => {
      await page.setContent('<hmc-input-field></hmc-input-field>');
      page.rootInstance.hmcBlur = {
        emit: eventSpy,
      };
      page.rootInstance.onBlur('event');
      expect(eventSpy).toHaveBeenCalled();
    });
    it('should handle input change', async () => {
      await page.setContent('<hmc-input-field></hmc-input-field>');
      eventSpy = jest.fn();
      page.rootInstance.hmcInput = {
        emit: eventSpy,
      };
      page.rootInstance.onInput({});
      expect(page.rootInstance.inputEl.value).toEqual('');
    });
    it('should watch the value change with inputEl', async () => {
      await page.setContent('<hmc-input-field></hmc-input-field>');
      page.rootInstance.value = 'ADI';
      expect(page.rootInstance.inputEl.value).toEqual('ADI');
      page.rootInstance.inputEl = null;
      page.rootInstance.value = '';
      expect(page.rootInstance.inputEl).toEqual(null);
    });
  });
});
