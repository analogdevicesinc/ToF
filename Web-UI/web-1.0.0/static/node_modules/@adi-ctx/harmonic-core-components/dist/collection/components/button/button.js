import { h, Host } from '@stencil/core';
/**
 * @slot icon-left - Slot to pass in hmc-icon to appear on left.
 * @slot - An unnamed slot is used to pass a text label to the button.
 * @slot icon-right - Slot to pass in hmc-icon to appear on right.
 */
export class HmcButton {
  constructor() {
    this._hasIconLeft = false;
    this._hasIconRight = false;
    // Taken from Ionic Framework https://github.com/ionic-team/ionic-framework
    this.clickHandler = (ev) => {
      if (this.type === 'submit' &&
        this.el.shadowRoot &&
        !!this.el.attachShadow) {
        // this button wants to specifically submit a form
        // climb up the dom to see if we're in a <form>
        // and if so, then use JS to submit it
        const form = this.el.closest('form');
        if (form) {
          ev.preventDefault();
          const fakeButton = document.createElement('button');
          fakeButton.type = this.type;
          fakeButton.style.display = 'none';
          form.appendChild(fakeButton);
          fakeButton.click();
          fakeButton.remove();
        }
      }
    };
    this.kind = 'primary';
    this.size = 'md';
    this.isInverse = false;
    this.isDisabled = false;
    this.isProcessing = false;
    this.isIconOnly = false;
    this.isFullWidth = false;
    this.type = 'button';
    this.autofocus = false;
    this.href = undefined;
    this.rel = undefined;
    this.target = undefined;
    this.download = undefined;
  }
  render() {
    const { autofocus, download, href, isInverse, isDisabled, isIconOnly, isFullWidth, isProcessing, kind, rel, size, target, type, } = this;
    this._hasIconLeft = Boolean(this.el.querySelector('[slot="icon-left"]'));
    this._hasIconRight = Boolean(this.el.querySelector('[slot="icon-right"]'));
    const TagType = href === undefined ? 'button' : 'a';
    const attrs = TagType === 'button' ? { type } : { href, download, rel, target };
    const classList = {
      'button-disabled': isDisabled || isProcessing,
      'full-width': isFullWidth && kind !== 'ghost',
    };
    const buttonClasses = {
      'disabled': isDisabled,
      'processing': isProcessing,
      'icon-only': isIconOnly,
      'icon-left': this._hasIconLeft,
      'icon-right': this._hasIconRight,
      [size]: true,
      [kind]: true,
      'inverse': isInverse,
    };
    const content = (h("div", { class: "content-wrapper" }, h("slot", { name: "icon-left" }), h("div", { class: "text-wrapper" }, h("slot", null)), h("slot", { name: "icon-right" })));
    const spinner = (h("div", { class: "spinner-wrapper" }, h("hmc-spinner", { kind: isInverse ? 'inverse' : kind === 'ghost' ? 'tertiary' : kind, size: size === 'xs' ? 'sm' : 'md' })));
    const button = (h(TagType, Object.assign({}, attrs, { class: buttonClasses, disabled: isDisabled || isProcessing, autoFocus: autofocus, tabindex: isDisabled || isProcessing ? -1 : 0 }), content, spinner));
    return (h(Host, { onClick: this.clickHandler, class: classList }, button));
  }
  static get is() { return "hmc-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["button.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["button.css"]
    };
  }
  static get properties() {
    return {
      "kind": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "VariantType",
          "resolved": "\"ghost\" | \"primary\" | \"secondary\" | \"tertiary\"",
          "references": {
            "VariantType": {
              "location": "import",
              "path": "../type/variant.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The kind of the button.\nAvailable options are: 'primary', 'secondary', 'tertiary' and 'ghost'.\nDefault: 'primary'."
        },
        "attribute": "kind",
        "reflect": false,
        "defaultValue": "'primary'"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ButtonSize",
          "resolved": "\"md\" | \"sm\" | \"xs\"",
          "references": {
            "ButtonSize": {
              "location": "import",
              "path": "../type/size.type"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The size of the button.\nAvailable options are: \"xs\" - h-24, \"sm\" - h-32, \"md\" - h-40.\nDefault: \"md\"."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'md'"
      },
      "isInverse": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Invert the colours for a dark background context."
        },
        "attribute": "inverse",
        "reflect": false,
        "defaultValue": "false"
      },
      "isDisabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies 'disabled' state of the button.\nDefault: `false`."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "isProcessing": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies 'processing' state of the button.\nDefault: `false`."
        },
        "attribute": "processing",
        "reflect": false,
        "defaultValue": "false"
      },
      "isIconOnly": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If enabled, the button will be loaded with an only icon inside.\nIcon should be set via default slot.\nDefault: `false`."
        },
        "attribute": "icon-only",
        "reflect": false,
        "defaultValue": "false"
      },
      "isFullWidth": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If enabled, the button will be loaded with 'width: 100%'.\nDefault: `false`."
        },
        "attribute": "full-width",
        "reflect": false,
        "defaultValue": "false"
      },
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'button' | 'submit' | 'reset'",
          "resolved": "\"button\" | \"reset\" | \"submit\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The type of the broswer button element.\nDefault: 'button'."
        },
        "attribute": "type",
        "reflect": false,
        "defaultValue": "'button'"
      },
      "autofocus": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Specifies whether the button should have input focus when the page loads.\nDefault: `false`."
        },
        "attribute": "autofocus",
        "reflect": false,
        "defaultValue": "false"
      },
      "href": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string | undefined",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "When supplied, the button will internally use an `<a>` element rather than `<button>`."
        },
        "attribute": "href",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "rel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string | undefined",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The relationship of the linked URL as space-separated link types.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel"
        },
        "attribute": "rel",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "target": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string | undefined",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Where to display the linked URL.\nOptions are: `_self`, `_blank`, `_parent`, `_top`"
        },
        "attribute": "target",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "download": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string | undefined",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Causes the browser to treat the linked URL as a download. Can be used with or without a value. Passing in \"\", the\nbrowser will suggest a filename/extension. Passing in a value suggests it as the filename."
        },
        "attribute": "download",
        "reflect": false,
        "defaultValue": "undefined"
      }
    };
  }
  static get elementRef() { return "el"; }
}
