/// <reference types="react" />
import { EventEmitter } from '../../stencil-public-runtime';
import { HmcDropdownOptionCustomEvent } from '../../components';
import { DropdownSize } from '../type/size.type';
import { DropdownStatusType } from '../type/status.type';
import { DropdownPlacement, DropdownAlignment } from '../type/variant.type';
/**
 * @slot - An unnamed slot is used to pass hmc-dropdown-options to the Dropdown.
 * @slot icon - slot="icon" is used to pass an icon to the Dropdown.
 * @slot hint - slot="hint" is used to pass a hint component. It will be rendered next to a label and if the label
 * prop was passed.
 */
export declare class HmcDropdown {
  _hasIcon: boolean;
  _didInit: boolean;
  _maxListContainerHeight: number;
  el: HTMLElement;
  /**
   * Placeholder for component.
   * Shown if component not processing and has no value provided
   */
  placeholder: string;
  /**
   * Specifies size of component via wrapper padding.
   * Default: "md".
   */
  size: DropdownSize;
  /**
   * Current value of the dropdown, can be used to preselect an option.
   * Default: undefined.
   */
  value?: string | string[] | undefined;
  /**
   * Name for form submission.
   * Default: "".
   */
  name: string;
  /**
   * Specifies label text of the input.
   * Default: ''.
   */
  label: string;
  /**
   * Specifies 'disabled' state of the component.
   * Default, `false`.
   */
  isDisabled: boolean;
  /**
   * Specifies whether the selection can be cleared once a selection is made. Only applies when `multiple=true`.
   * Default, `false`.
   */
  isClearable: boolean;
  /**
   * Provide status for dropdown
   * Default, `error`.
   */
  status?: DropdownStatusType;
  /**
   * Specifies helper text for component (optional).
   */
  helperText?: string;
  /**
   * Overrides the text displayed when one or more options are selected.
   */
  selectedText?: string;
  /**
   * Specifies scroll container Id or fallbacks to documentElement
   * To calculate and select visible placement for dropdown
   */
  scrollContainerId: string;
  /**
   * Forces placement of the list of options to be opened according to placement received (bottom or top).
   * If not provided the Dropdown determines its own position automatically.
   */
  forcePlacement?: DropdownPlacement;
  /**
   * Based on this prop "optional" label could be shown or not.
   * Default: 'undefined'.
   */
  isRequired?: boolean;
  /**
   * String to indicate the input is optional in a form, shown when required=false.
   */
  optionalText?: string;
  /**
   * Specifies the option selection is multiple.
   * True - multiple options selected, false - single option selected
   * Default: `false`
   */
  multiple: boolean;
  /**
   * Specifies the number of options that can be displayed in the dropdown before the
   * container displays a scroll bar.
   * Default: `8`
   */
  maxVisibleOpts: number;
  /**
   * Specifies alignment of dropdown, relative to component
   */
  alignment: DropdownAlignment;
  /**
   * Specifies 'isExpanded' state of the dropdown list.
   * True - shown, false - hidden
   * Default, `false`.
   */
  isExpanded: boolean;
  /**
   * Specifies placement of dropdown, relative to component
   */
  placement: DropdownPlacement;
  /**
   * Specifies whether external value changes to the dropdown are disabled.
   * When set to `true`, the dropdown will not respond to changes made from outside the component.
   * Defaults: `false`.
   */
  v3EventBehaviour: boolean;
  /**
   * Emitted when the dropdown's expanded state is toggled.
   * Event detail: { isActive: boolean }.
   */
  toggled: EventEmitter<{
    isActive: boolean;
  }>;
  /**
   * Emitted when the selected value changes.
   * Event detail: { value: string | string[] | undefined }.
   */
  changed: EventEmitter<{
    value: string | string[] | undefined;
  }>;
  handleClick(e: Event): void;
  private get childOpts();
  toggle(): void;
  handleSelection(event: HmcDropdownOptionCustomEvent<any>): void;
  handleMultipleSelection(event: HmcDropdownOptionCustomEvent<any>): void;
  setOptionSelection(): void;
  handleBlur(event: FocusEvent): void;
  valueChanged(): void;
  setListHeight(): void;
  componentWillLoad(): void;
  componentDidLoad(): void;
  render(): JSX.Element;
  getText(): string;
  isOptionSelected(optionValue: string): boolean;
}
