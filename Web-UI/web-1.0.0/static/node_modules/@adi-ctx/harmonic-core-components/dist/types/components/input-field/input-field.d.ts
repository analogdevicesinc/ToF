/// <reference types="react" />
import { EventEmitter, ComponentInterface } from '../../stencil-public-runtime';
import { InputSize } from '../type/size.type';
import { InputStatusType } from '../type/status.type';
import { HmcInputEventDetail } from './input-field-interface';
/**
 * @slot prefix - This slot is used to pass an Icon or other content to the Input appearing before the form field.
 * @slot suffix - This slot is used to pass an Icon or other content to the Input appearing after the form field.
 * @slot hint - slot="hint" is used to pass a hint component. It will be rendered next to a label and if the label
 * prop was passed.
 */
export declare class HmcInputField implements ComponentInterface {
  _hasPrefix: boolean;
  _hasSuffix: boolean;
  el: HTMLElement;
  /**
   * The name of the input for form submission.
   * Default: ''.
   */
  name: string;
  /**
   * The value of the input.
   * Default: ''.
   */
  value: string;
  /**
   * Specifies label text of the input. For accessibility, a label must be used to identify the input field.
   * Default: ''.
   */
  label: string;
  /**
   * Specifies 'disabled' state of the icon.
   * Default, `false`.
   */
  isDisabled: boolean;
  /**
   * If enabled, input will be loaded with 'width: 100%'.
   * Default, `false`.
   */
  isFullWidth: boolean;
  /**
   * Provide issue type for input
   * Default, `normal`.
   */
  status?: InputStatusType;
  /**
   * String for the issue displayed under input.
   */
  helperText?: string;
  /**
   * If enabled, input will be focused.
   * Default: 'false'.
   */
  isAutoFocused: boolean;
  /**
   * If 'on', autocomplete prompts can be used.
   * Default: 'off'.
   */
  autoComplete?: string;
  /**
   * If enabled, the browser's spellchecker will be run on the value of the textarea.
   * Default: 'false'.
   */
  hasSpellcheck: 'true' | 'false';
  /**
   * A hint to the browser for which enter key to display.
   * Possible values: `"enter"`, `"done"`, `"go"`, `"next"`,
   * `"previous"`, `"search"`, and `"send"`.
   */
  enterKeyHint: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';
  /**
   * A hint to the browser for which keyboard to display.
   * Possible values: `"none"`, `"text"`, `"tel"`, `"url"`,
   * `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
   */
  inputMode: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
  /**
   * Specifies isClearable prop to remove input content with clear icon.
   * Default: false
   */
  isClearable: boolean;
  /**
   * Based on this prop "optional" label could be shown or not.
   * Default: 'undefined'.
   */
  isRequired?: boolean;
  /**
   * String to indicate the input is optional in a form, shown when required=false.
   */
  optionalText?: string;
  /**
   * The size of the input.
   * Available options are: "xs", "sm" and "md".
   * Default: "md".
   */
  size: InputSize;
  /**
   * Specifies width of the input in pixels.
   * Default: '200'.
   */
  width: string;
  /**
   * Specifies placeholder of the input.
   */
  placeholder: string;
  /**
   * Specifies type of the input.
   */
  fieldType: string;
  /**
   * The minlength specifies the minimum length (in characters) of the textarea.
   */
  minLength: number | undefined;
  /**
   * The maxlength specifies the maximum length (in characters) of the textarea.
   */
  maxLength: number | undefined;
  /**
   * For `field-type="number"` sets the minimum numeric value of the input.
   */
  min: number;
  /**
   * For `field-type="number"` sets the maximum numeric value of the input.
   */
  max: number;
  /**
   * For `field-type="number"` sets the increment when using arrow keys to change the value.
   */
  step: number;
  rootEl: HTMLElement;
  inputEl: HTMLInputElement;
  /**
   * Emitted when the value has changed.
   */
  hmcInput: EventEmitter<HmcInputEventDetail>;
  /**
   * This maps to the native onchange event and typically occurs when
   * the input loses focus or the user hits `Enter`.
   */
  hmcChange: EventEmitter<HmcInputEventDetail>;
  /**
   * Emitted when the input loses focus.
   */
  hmcBlur: EventEmitter<FocusEvent>;
  /**
   * Emitted when the input gains focus.
   */
  hmcFocus: EventEmitter<FocusEvent>;
  isFocused: boolean;
  protected valueChanged(): void;
  onInput(event: Event): void;
  private onChange;
  private onBlur;
  private onFocus;
  handleClear(e: MouseEvent): void;
  render(): JSX.Element;
}
