/// <reference types="react" />
import { ButtonSize } from '../type/size.type';
import { VariantType } from '../type/variant.type';
/**
 * @slot icon-left - Slot to pass in hmc-icon to appear on left.
 * @slot - An unnamed slot is used to pass a text label to the button.
 * @slot icon-right - Slot to pass in hmc-icon to appear on right.
 */
export declare class HmcButton {
  _hasIconLeft: boolean;
  _hasIconRight: boolean;
  el: HTMLElement;
  /**
   * The kind of the button.
   * Available options are: 'primary', 'secondary', 'tertiary' and 'ghost'.
   * Default: 'primary'.
   */
  kind: VariantType;
  /**
   * The size of the button.
   * Available options are: "xs" - h-24, "sm" - h-32, "md" - h-40.
   * Default: "md".
   */
  size: ButtonSize;
  /**
   * Invert the colours for a dark background context.
   */
  isInverse: boolean;
  /**
   * Specifies 'disabled' state of the button.
   * Default: `false`.
   */
  isDisabled: boolean;
  /**
   * Specifies 'processing' state of the button.
   * Default: `false`.
   */
  isProcessing: boolean;
  /**
   * If enabled, the button will be loaded with an only icon inside.
   * Icon should be set via default slot.
   * Default: `false`.
   */
  isIconOnly: boolean;
  /**
   * If enabled, the button will be loaded with 'width: 100%'.
   * Default: `false`.
   */
  isFullWidth: boolean;
  /**
   * The type of the broswer button element.
   * Default: 'button'.
   */
  type: 'button' | 'submit' | 'reset';
  /**
   * Specifies whether the button should have input focus when the page loads.
   * Default: `false`.
   */
  autofocus: boolean;
  /**
   * When supplied, the button will internally use an `<a>` element rather than `<button>`.
   */
  href: string | undefined;
  /**
   * The relationship of the linked URL as space-separated link types.
   * https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel
   */
  rel: string | undefined;
  /**
   * Where to display the linked URL.
   * Options are: `_self`, `_blank`, `_parent`, `_top`
   */
  target: string | undefined;
  /**
   * Causes the browser to treat the linked URL as a download. Can be used with or without a value. Passing in "", the
   * browser will suggest a filename/extension. Passing in a value suggests it as the filename.
   */
  download: string | undefined;
  private clickHandler;
  render(): JSX.Element;
}
