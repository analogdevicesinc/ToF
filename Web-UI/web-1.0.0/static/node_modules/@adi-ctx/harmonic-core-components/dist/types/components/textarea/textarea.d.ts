/// <reference types="react" />
import { EventEmitter, ComponentInterface } from '../../stencil-public-runtime';
import { InputSize } from '../type/size.type';
import { InputStatusType } from '../type/status.type';
import { HmcTextareaEventDetail } from './textarea-interface';
/**
 * @slot hint - slot="hint" is used to pass a hint component. It will be rendered next to a label and if the label
 * prop was passed.
 */
export declare class HmcTextarea implements ComponentInterface {
  el: HTMLElement;
  /**
   * The name of the input for form submission.
   * Default: ''.
   */
  name: string;
  /**
   * The value of the input.
   * Default: ''.
   */
  value: string;
  /**
   * Specifies label text of the input. For accessibility, a label must be used to identify the input field.
   * Default: ''.
   */
  label: string;
  /**
   * How the control should wrap the value for form submission. Hard automatically adds line breaks and Soft uses existing ones.
   * Default: 'soft'.
   */
  wrap: 'hard' | 'soft';
  /**
   * Specifies 'disabled' state of the icon.
   * Default, `false`.
   */
  isDisabled: boolean;
  /**
   * If enabled, input will be loaded with 'width: 100%'.
   * Default, `false`.
   */
  isFullWidth: boolean;
  /**
   * Provide issue type for input
   * Default, `normal`.
   */
  status?: InputStatusType;
  /**
   * String for the issue displayed under input.
   */
  helperText?: string;
  /**
   * If enabled, input will be focused.
   * Default: 'false'.
   */
  isAutoFocused: boolean;
  /**
   * If 'on', autocomplete prompts can be used.
   * Default: 'off'.
   */
  autoComplete?: 'on' | 'off';
  /**
   * Based on this prop "optional" label could be shown or not.
   * Default: 'undefined'.
   */
  isRequired?: boolean;
  /**
   * String to indicate the input is optional in a form, shown when required=false.
   */
  optionalText?: string;
  /**
   * If enabled, a counter will display the amount of characters.
   * Default: 'false'.
   */
  hasCounter: boolean;
  /**
   * If enabled, the browser's spellchecker will be run on the value of the textarea.
   * Default: 'false'.
   */
  hasSpellcheck: 'true' | 'false';
  /**
   * The size of the input.
   * Available options are: "xs", "sm" and "md".
   * Default: "md".
   */
  size: InputSize;
  /**
   * Specifies height of the area by number of rows of characters
   * Default: '3'.
   */
  rows: number;
  /**
   * Specifies height of the area by number of rows of characters
   * Default: '30'.
   */
  cols: number;
  /**
   * Specifies placeholder of the textarea.
   */
  placeholder: string;
  /**
   * The minlength specifies the minimum length (in characters) of the textarea.
   */
  minLength: number | undefined;
  /**
   * The maxlength specifies the maximum length (in characters) of the textarea.
   */
  maxLength: number | undefined;
  /**
   * If enabled, displays a resize handle, allowing you to scale the textarea vertically.
   */
  resize: 'none' | 'vertical';
  rootEl: HTMLElement;
  textareaEl: HTMLTextAreaElement;
  /**
   * Emitted when the value has changed.
   */
  hmcInput: EventEmitter<HmcTextareaEventDetail>;
  /**
   * Emitted when the value has changed.
   */
  hmcChange: EventEmitter<HmcTextareaEventDetail>;
  /**
   * Emitted when the input loses focus.
   */
  hmcBlur: EventEmitter<FocusEvent>;
  /**
   * Emitted when the input loses focus.
   */
  hmcFocus: EventEmitter<FocusEvent>;
  protected valueChanged(): void;
  onInput(event: Event): void;
  private onChange;
  private onBlur;
  private onFocus;
  render(): JSX.Element;
}
