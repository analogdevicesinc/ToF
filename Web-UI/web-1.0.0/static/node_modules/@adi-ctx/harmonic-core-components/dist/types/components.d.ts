/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { AccordionSize, ButtonSize, CheckboxSize, DropdownGroupSize, DropdownOptionSize, DropdownSize, InputSize, RadioSize, SegmentedButtonSize, SpinnerSize, TabSize, TagSize, ToggleSize, TooltipSize } from "./components/type/size.type";
import { BadgeVariant, DropdownAlignment, DropdownPlacement, SpinnerVariant, TooltipPlacement, VariantType } from "./components/type/variant.type";
import { BadgeStatusType, DropdownStatusType, InputStatusType, MessageStatusType, ProgressBarStatusType, TagStatusType } from "./components/type/status.type";
import { IconNames } from "./components/icon/iconsMap";
import { HmcInputEventDetail } from "./components/input-field/input-field-interface";
import { HmcTextareaEventDetail } from "./components/textarea/textarea-interface";
export { AccordionSize, ButtonSize, CheckboxSize, DropdownGroupSize, DropdownOptionSize, DropdownSize, InputSize, RadioSize, SegmentedButtonSize, SpinnerSize, TabSize, TagSize, ToggleSize, TooltipSize } from "./components/type/size.type";
export { BadgeVariant, DropdownAlignment, DropdownPlacement, SpinnerVariant, TooltipPlacement, VariantType } from "./components/type/variant.type";
export { BadgeStatusType, DropdownStatusType, InputStatusType, MessageStatusType, ProgressBarStatusType, TagStatusType } from "./components/type/status.type";
export { IconNames } from "./components/icon/iconsMap";
export { HmcInputEventDetail } from "./components/input-field/input-field-interface";
export { HmcTextareaEventDetail } from "./components/textarea/textarea-interface";
export namespace Components {
    interface HmcAccordion {
        /**
          * Specifies isOpen prop, if `true`, the panel will be opened. Default: false.
         */
        "isOpen": boolean;
        /**
          * The size of the accordion header. Available options are: "xs" and "md". Default: "md".
         */
        "size": AccordionSize;
    }
    interface HmcBadge {
        /**
          * The kind of the badge. Available options are: 'digits', and 'dots' Default: 'digits'.
         */
        "kind": BadgeVariant;
        /**
          * The max number of the badge. Maximum number to appear on the label. A number greater than the max number will appear in the label as '{maxNumber}+'. Maximum Number can only take non-negative integer numbers. Default: 999.
         */
        "maxNumber"?: number;
        /**
          * The label of the badge. Number can only take non-negative integer numbers. Default: 1.
         */
        "number"?: number;
        /**
          * The status of the badge. Available options are: 'urgent', and 'information' Default: 'urgent'.
         */
        "status": BadgeStatusType;
    }
    interface HmcBannerMessage {
        /**
          * Text label for the optional button. Providing a value will cause a button to render.
         */
        "actionText": string;
        /**
          * Density of the information conveyed. Higher density will occupy less space in the interface for the same information.
         */
        "density": 'low' | 'high';
        /**
          * Allows the optional override of the icon to the left of the text. If not provided, the icon will be determined based on status. Small icons should be used with the high density while medium icons work best with low.
         */
        "iconName": string;
        /**
          * If set `true`, the banner will display a button with a close icon. When the user clicks this button a `bannerCloseRequested` event will fire.
         */
        "isClosable": boolean;
        /**
          * Status to convery to the user with the message.
         */
        "status": MessageStatusType;
        /**
          * Toggles the display of an icon to the left of the banner main text.
         */
        "withIcon": boolean;
    }
    interface HmcButton {
        /**
          * Specifies whether the button should have input focus when the page loads. Default: `false`.
         */
        "autofocus": boolean;
        /**
          * Causes the browser to treat the linked URL as a download. Can be used with or without a value. Passing in "", the browser will suggest a filename/extension. Passing in a value suggests it as the filename.
         */
        "download": string | undefined;
        /**
          * When supplied, the button will internally use an `<a>` element rather than `<button>`.
         */
        "href": string | undefined;
        /**
          * Specifies 'disabled' state of the button. Default: `false`.
         */
        "isDisabled": boolean;
        /**
          * If enabled, the button will be loaded with 'width: 100%'. Default: `false`.
         */
        "isFullWidth": boolean;
        /**
          * If enabled, the button will be loaded with an only icon inside. Icon should be set via default slot. Default: `false`.
         */
        "isIconOnly": boolean;
        /**
          * Invert the colours for a dark background context.
         */
        "isInverse": boolean;
        /**
          * Specifies 'processing' state of the button. Default: `false`.
         */
        "isProcessing": boolean;
        /**
          * The kind of the button. Available options are: 'primary', 'secondary', 'tertiary' and 'ghost'. Default: 'primary'.
         */
        "kind": VariantType;
        /**
          * The relationship of the linked URL as space-separated link types. https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel
         */
        "rel": string | undefined;
        /**
          * The size of the button. Available options are: "xs" - h-24, "sm" - h-32, "md" - h-40. Default: "md".
         */
        "size": ButtonSize;
        /**
          * Where to display the linked URL. Options are: `_self`, `_blank`, `_parent`, `_top`
         */
        "target": string | undefined;
        /**
          * The type of the broswer button element. Default: 'button'.
         */
        "type": 'button' | 'submit' | 'reset';
    }
    interface HmcCard {
        /**
          * Specifies the density of information in the header and body. Similar to the size prop in other components. Specifying 'high' will display a smaller font size allowing more information to be conveyed. Default: 'medium'
         */
        "density"?: 'high' | 'medium';
    }
    interface HmcCheckbox {
        /**
          * If `true`, indicates that this checkbox is selected. Default: `false`.
         */
        "isChecked": boolean;
        /**
          * Specifies 'disabled' state of the checkbox. Default, `false`.
         */
        "isDisabled": boolean;
        /**
          * Specifies the readonly attribute of the checkbox. In this mode, the checked status of the checkbox is controlled by the isChecked prop and user interaction is disabled. Unlike the disabled state, the look does not change and the inner input is not disabled. Default, `false`.
         */
        "isReadonly": boolean;
        /**
          * Set checkbox label.
         */
        "label": string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Specifies size of component, reflected in label font. Default: "md".
         */
        "size": CheckboxSize;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `isChecked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
         */
        "value": any | null;
    }
    interface HmcChip {
        /**
          * Specifies whether the chip should have input focus when the page loads. Default: `false`.
         */
        "autofocus": boolean;
        /**
          * If true, adds a checkmark to the chip when it is selected.
         */
        "hasCheckmark": boolean;
        /**
          * Specifies 'disabled' state of the chip. Default: `false`.
         */
        "isDisabled": boolean;
        /**
          * Specifies whether the chip is selected. Default: `false`.
         */
        "isSelected": boolean;
        /**
          * The size of the chip. Available options are: "xs" - h-24, "sm" - h-32, "md" - h-40. Default: "md".
         */
        "size": ButtonSize;
    }
    interface HmcContainerHeader {
        /**
          * Specifies the density of information in the header. Similar to the size prop in other components. Specifying 'high' will display a smaller font size allowing more information to be conveyed. Default: 'low'
         */
        "density"?: 'high' | 'medium' | 'low';
        /**
          * This is the larger of the two labels for the card header.
         */
        "heading": string;
        /**
          * This prop provides an additional subtitle for the header. It is optional.
         */
        "subtitle"?: string;
    }
    interface HmcDropdown {
        /**
          * Specifies alignment of dropdown, relative to component
         */
        "alignment": DropdownAlignment;
        /**
          * Forces placement of the list of options to be opened according to placement received (bottom or top). If not provided the Dropdown determines its own position automatically.
         */
        "forcePlacement"?: DropdownPlacement;
        /**
          * Specifies helper text for component (optional).
         */
        "helperText"?: string;
        /**
          * Specifies whether the selection can be cleared once a selection is made. Only applies when `multiple=true`. Default, `false`.
         */
        "isClearable": boolean;
        /**
          * Specifies 'disabled' state of the component. Default, `false`.
         */
        "isDisabled": boolean;
        /**
          * Based on this prop "optional" label could be shown or not. Default: 'undefined'.
         */
        "isRequired"?: boolean;
        /**
          * Specifies label text of the input. Default: ''.
         */
        "label": string;
        /**
          * Specifies the number of options that can be displayed in the dropdown before the container displays a scroll bar. Default: `8`
         */
        "maxVisibleOpts": number;
        /**
          * Specifies the option selection is multiple. True - multiple options selected, false - single option selected Default: `false`
         */
        "multiple": boolean;
        /**
          * Name for form submission. Default: "".
         */
        "name": string;
        /**
          * String to indicate the input is optional in a form, shown when required=false.
         */
        "optionalText"?: string;
        /**
          * Placeholder for component. Shown if component not processing and has no value provided
         */
        "placeholder": string;
        /**
          * Specifies scroll container Id or fallbacks to documentElement To calculate and select visible placement for dropdown
         */
        "scrollContainerId": string;
        /**
          * Overrides the text displayed when one or more options are selected.
         */
        "selectedText"?: string;
        /**
          * Specifies size of component via wrapper padding. Default: "md".
         */
        "size": DropdownSize;
        /**
          * Provide status for dropdown Default, `error`.
         */
        "status"?: DropdownStatusType;
        /**
          * Specifies whether external value changes to the dropdown are disabled. When set to `true`, the dropdown will not respond to changes made from outside the component. Defaults: `false`.
         */
        "v3EventBehaviour": boolean;
        /**
          * Current value of the dropdown, can be used to preselect an option. Default: undefined.
         */
        "value"?: string | string[] | undefined;
    }
    interface HmcDropdownGroup {
        "groupTitle"?: string;
        /**
          * The size of the input. Available options are: "xs", "sm" and "md". Default: "md".
         */
        "size": DropdownGroupSize;
    }
    interface HmcDropdownMenu {
        /**
          * Use to programatically set the initial open state of the tooltip. Default: 'false'.
         */
        "isOpen": boolean;
        /**
          * Specifies id of the element (triggerElement) that will be show/hide tooltip.
         */
        "triggerId": string;
    }
    interface HmcDropdownMenuButton {
        /**
          * Specifies 'disabled' state of the component. Default, `false`.
         */
        "isDisabled": boolean;
        "isInverse": boolean;
        "isLoading": boolean;
        /**
          * The kind of the button. Available options are: 'primary', 'secondary', 'tertiary' and 'ghost'. Default: 'primary'.
         */
        "kind": VariantType;
        /**
          * The size of the Dropdown Menu Button. Available options are: "xs" - h-24, "sm" - h-32, "md" - h-40. Default: "md".
         */
        "size": ButtonSize;
        "toggleMenu": () => Promise<void>;
    }
    interface HmcDropdownOption {
        /**
          * This prop changes the look of the option depending on whether it is for use with an action. Default, `false`.
         */
        "isAction": boolean;
        /**
          * Specifies 'disabled' state of the option. Default, `false`.
         */
        "isDisabled": boolean;
        /**
          * This prop changes the look of the option depending on whether it is for use with a multiple or single selection dropdown. Default, `false`.
         */
        "isMultiple": boolean;
        /**
          * Specifies 'selected' state of the option. Default, `false`.
         */
        "isSelected": boolean;
        /**
          * The size of the input. Available options are: "xs", "sm" and "md". Default: "md".
         */
        "size": DropdownOptionSize;
        /**
          * The value of the option.
         */
        "value": any;
    }
    interface HmcIcon {
        /**
          * Deprecated, style the color of these icons using CSS.
         */
        "color": string;
        "name": IconNames;
    }
    interface HmcInputField {
        /**
          * If 'on', autocomplete prompts can be used. Default: 'off'.
         */
        "autoComplete"?: string;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterKeyHint": | 'enter'
    | 'done'
    | 'go'
    | 'next'
    | 'previous'
    | 'search'
    | 'send';
        /**
          * Specifies type of the input.
         */
        "fieldType": string;
        /**
          * If enabled, the browser's spellchecker will be run on the value of the textarea. Default: 'false'.
         */
        "hasSpellcheck": 'true' | 'false';
        /**
          * String for the issue displayed under input.
         */
        "helperText"?: string;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputMode": | 'none'
    | 'text'
    | 'tel'
    | 'url'
    | 'email'
    | 'numeric'
    | 'decimal'
    | 'search';
        /**
          * If enabled, input will be focused. Default: 'false'.
         */
        "isAutoFocused": boolean;
        /**
          * Specifies isClearable prop to remove input content with clear icon. Default: false
         */
        "isClearable": boolean;
        /**
          * Specifies 'disabled' state of the icon. Default, `false`.
         */
        "isDisabled": boolean;
        /**
          * If enabled, input will be loaded with 'width: 100%'. Default, `false`.
         */
        "isFullWidth": boolean;
        /**
          * Based on this prop "optional" label could be shown or not. Default: 'undefined'.
         */
        "isRequired"?: boolean;
        /**
          * Specifies label text of the input. For accessibility, a label must be used to identify the input field. Default: ''.
         */
        "label": string;
        /**
          * For `field-type="number"` sets the maximum numeric value of the input.
         */
        "max": number;
        /**
          * The maxlength specifies the maximum length (in characters) of the textarea.
         */
        "maxLength": number | undefined;
        /**
          * For `field-type="number"` sets the minimum numeric value of the input.
         */
        "min": number;
        /**
          * The minlength specifies the minimum length (in characters) of the textarea.
         */
        "minLength": number | undefined;
        /**
          * The name of the input for form submission. Default: ''.
         */
        "name": string;
        /**
          * String to indicate the input is optional in a form, shown when required=false.
         */
        "optionalText"?: string;
        /**
          * Specifies placeholder of the input.
         */
        "placeholder": string;
        /**
          * The size of the input. Available options are: "xs", "sm" and "md". Default: "md".
         */
        "size": InputSize;
        /**
          * Provide issue type for input Default, `normal`.
         */
        "status"?: InputStatusType;
        /**
          * For `field-type="number"` sets the increment when using arrow keys to change the value.
         */
        "step": number;
        /**
          * The value of the input. Default: ''.
         */
        "value": string;
        /**
          * Specifies width of the input in pixels. Default: '200'.
         */
        "width": string;
    }
    interface HmcMessage {
        /**
          * Specifies iconName prop that provides icon from hmc-core-components icons. If not specified, the icon name will be taken from the status name.
         */
        "iconName": IconNames;
        /**
          * If enabled, input will be loaded with 'width: 100%'. Default, `false`.
         */
        "isFullWidth": boolean;
        /**
          * Specifies status prop that provides related status ('success' | 'warning' | 'error' | 'info') with its styles Default: 'info'
         */
        "status"?: MessageStatusType;
    }
    interface HmcModal {
        /**
          * Specifies the density of information in the header. Similar to the size prop in other components. Specifying 'medium' will display a smaller padding allowing more information to be conveyed. Default: 'low'
         */
        "density"?: 'medium' | 'low';
        /**
          * Specifies isFullScreen prop that set full screen size of modal. Default: false
         */
        "isFullScreen": boolean;
        /**
          * Specifies isOpen prop for both modal and overlay. Default: false
         */
        "isOpen": any;
        /**
          * If 'true', the modal will request to be dismissed when the overlay is clicked. Default: true
         */
        "overlayDismiss": boolean;
    }
    interface HmcModalOverlay {
        /**
          * Specifies isOpen prop, if `true`, the overlay will be visible. Default: false
         */
        "isOpen": boolean;
    }
    interface HmcNavBar {
        /**
          * This prop sets whether content passed into the left actions slot will render.
         */
        "leftActionsEnabled": boolean;
    }
    interface HmcNavLink {
        /**
          * Causes the browser to treat the linked URL as a download. Can be used with or without a value. Passing in "", the browser will suggest a filename/extension. Passing in a value suggests it as the filename.
         */
        "download": string | undefined;
        "href": string;
        "isDisabled": boolean;
        "isIconOnly": boolean;
        "linkActive": boolean;
        /**
          * The relationship of the linked URL as space-separated link types. https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel
         */
        "rel": string | undefined;
        "size": 'md' | 'sm';
        /**
          * Where to display the linked URL. Options are: `_self`, `_blank`, `_parent`, `_top`
         */
        "target": string | undefined;
    }
    interface HmcProgressBar {
        /**
          * The kind of the Progress Bar. If enabled, the Progress Bar will be indeterminate type otherwise is determinate. Default: `false`.
         */
        "indeterminate": boolean;
        /**
          * Specifies Inline Message text of the Progress Bar. If no text is entered, the inline message section will not be displayed. Default: undefined.
         */
        "inlineMessage": | string
    | undefined;
        /**
          * Specifies Label text of the Progress Bar. If no text is entered, Label section will not be displayed. Default: undefined.
         */
        "label": string | undefined;
        /**
          * The maximum allowed value, this determines how filled the bar is for a given value. Default: 100.
         */
        "maxValue": number;
        /**
          * Specifies whether the percentage text of progress value of the Progress Bar will be shown or not. Default: `true`.
         */
        "showPercentage": boolean;
        /**
          * The size of the Progress Bar. Available options are: 'sm', and 'md' Default: 'md'.
         */
        "size": 'sm' | 'md';
        /**
          * The status of the Progress Bar. Available options are: 'info', 'success', and 'error' Default: 'info'.
         */
        "status": ProgressBarStatusType;
        /**
          * The value being displayed by the bar, relative to maxValue. Default: 0.
         */
        "value": number;
    }
    interface HmcRadioButton {
        /**
          * If `true`, indicates that this radio button is selected one in the group.
         */
        "isChecked": boolean;
        /**
          * Specifies 'disabled' state of the radio button. Default, `false`.
         */
        "isDisabled": boolean;
        /**
          * Optional label to put beside button.
         */
        "label"?: string;
        "setButtonTabindex": (value: number) => Promise<void>;
        "setFocus": (ev: any) => Promise<void>;
        /**
          * The size of the radio button. Available options are: "xs" and "md". Default: "md".
         */
        "size": RadioSize;
        /**
          * Specifies internal value of the radio button. It used in setting/getting currently checked radio and emitting checked radio button's value.
         */
        "value": string;
    }
    interface HmcRadioGroup {
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * the value of the radio group.
         */
        "value"?: any | null;
    }
    interface HmcSegmentedButton {
        /**
          * If `true`, the user cannot interact with the segment button.
         */
        "isDisabled": boolean;
        /**
          * If `true`, the tab will be loaded with 'width: 100%'. Default: 'false'.
         */
        "isFullWidth": boolean;
        /**
          * If enabled, the button will be loaded with an only icon inside. Icon should be set via default slot. Default: `false`.
         */
        "isIconOnly": boolean;
        /**
          * Specifies if SegmentedButton is pressed/active.
         */
        "isPressed": boolean;
        "setFocus": (ev: any) => Promise<void>;
        /**
          * The size of the Segment Button. Available options are: "xs", "sm" and "md" . Default = "md".
         */
        "size": SegmentedButtonSize;
        /**
          * The value of the Segment Button.
         */
        "value": string;
    }
    interface HmcSegmentedControl {
        "isFullWidth": boolean;
        /**
          * the value of the SegmentedControl.
         */
        "value": string | null;
    }
    interface HmcSkeleton {
    }
    interface HmcSpinner {
        /**
          * The kind of spinner. Available options are: 'primary', 'secondary' and 'tertiary' Default: 'primary'.
         */
        "kind": SpinnerVariant;
        /**
          * The size of the spinner. Available options are: 'sm', and 'md' Default: 'sm'.
         */
        "size": SpinnerSize;
    }
    interface HmcTab {
        /**
          * If `true`, the user cannot interact with the tab. Default: 'false'.
         */
        "isDisabled": boolean;
        /**
          * If `true`, the tab will be loaded with 'width: 100%'. Default: 'false'.
         */
        "isFullWidth": boolean;
        /**
          * Tab panel will only be visible if this is set `true`. Default: 'false'.
         */
        "isSelected": boolean;
        /**
          * Specifies internal name of the tab. It used in work around setting/getting currently active tab
         */
        "panel": string;
        /**
          * The size of the tab. Determines font size and line height. Available options are: "xs", "sm" and "md". Default: "md".
         */
        "size": TabSize;
    }
    interface HmcTabGroup {
    }
    interface HmcTabPanel {
        /**
          * Tab panel will only be visible if this is set `true`. Default: 'false'.
         */
        "isSelected": boolean;
        /**
          * Specifies internal name of the tab. It is used for connecting the panel to the controlling tab.
         */
        "name": string;
    }
    interface HmcTag {
        /**
          * The amount of emphasis in the UI that the tag has. Available options are: 'subtle', and 'strong' Default: 'subtle'.
         */
        "emphasis": 'subtle' | 'strong';
        /**
          * Specifies iconName prop that provides icon from hmc-core-components icons. If not specified, the icon name will be taken from the status name.
         */
        "iconName": IconNames;
        /**
          * If enabled, input will be loaded with 'width: 100%'. Default, `false`.
         */
        "isFullWidth": boolean;
        /**
          * The size of the tag. Available options are: 'sm', and 'md' Default: 'md'.
         */
        "size": TagSize;
        /**
          * Specifies status prop that provides related status ('success' | 'warning' | 'error' | 'info' | 'highlight) with its styles Default: 'info'
         */
        "status"?: TagStatusType;
        /**
          * Toggles the display of an icon to the left of the tag main text.
         */
        "withIcon": boolean;
    }
    interface HmcTextarea {
        /**
          * If 'on', autocomplete prompts can be used. Default: 'off'.
         */
        "autoComplete"?: 'on' | 'off';
        /**
          * Specifies height of the area by number of rows of characters Default: '30'.
         */
        "cols": number;
        /**
          * If enabled, a counter will display the amount of characters. Default: 'false'.
         */
        "hasCounter": boolean;
        /**
          * If enabled, the browser's spellchecker will be run on the value of the textarea. Default: 'false'.
         */
        "hasSpellcheck": 'true' | 'false';
        /**
          * String for the issue displayed under input.
         */
        "helperText"?: string;
        /**
          * If enabled, input will be focused. Default: 'false'.
         */
        "isAutoFocused": boolean;
        /**
          * Specifies 'disabled' state of the icon. Default, `false`.
         */
        "isDisabled": boolean;
        /**
          * If enabled, input will be loaded with 'width: 100%'. Default, `false`.
         */
        "isFullWidth": boolean;
        /**
          * Based on this prop "optional" label could be shown or not. Default: 'undefined'.
         */
        "isRequired"?: boolean;
        /**
          * Specifies label text of the input. For accessibility, a label must be used to identify the input field. Default: ''.
         */
        "label": string;
        /**
          * The maxlength specifies the maximum length (in characters) of the textarea.
         */
        "maxLength": number | undefined;
        /**
          * The minlength specifies the minimum length (in characters) of the textarea.
         */
        "minLength": number | undefined;
        /**
          * The name of the input for form submission. Default: ''.
         */
        "name": string;
        /**
          * String to indicate the input is optional in a form, shown when required=false.
         */
        "optionalText"?: string;
        /**
          * Specifies placeholder of the textarea.
         */
        "placeholder": string;
        /**
          * If enabled, displays a resize handle, allowing you to scale the textarea vertically.
         */
        "resize": 'none' | 'vertical';
        /**
          * Specifies height of the area by number of rows of characters Default: '3'.
         */
        "rows": number;
        /**
          * The size of the input. Available options are: "xs", "sm" and "md". Default: "md".
         */
        "size": InputSize;
        /**
          * Provide issue type for input Default, `normal`.
         */
        "status"?: InputStatusType;
        /**
          * The value of the input. Default: ''.
         */
        "value": string;
        /**
          * How the control should wrap the value for form submission. Hard automatically adds line breaks and Soft uses existing ones. Default: 'soft'.
         */
        "wrap": 'hard' | 'soft';
    }
    interface HmcThemeProvider {
        /**
          * The theme to apply to the UI tokens. This will remap CSS variables for all child components. Available options are: 'light', and 'dark'
         */
        "theme": 'dark' | 'light';
    }
    interface HmcToastMessage {
        /**
          * Text label for the optional button. Providing a value will cause a button to render.
         */
        "actionText": string;
        /**
          * Density of the information conveyed. Higher density will occupy less space in the interface for the same information.
         */
        "density": 'low' | 'high';
        /**
          * If set `true`, the toast will display a button with a close icon. When the user clicks this button a `toastClosed` event will fire and the toast will close immediately.
         */
        "hasCloseButton": boolean;
        /**
          * Allows the optional override of the icon to the left of the text. If not provided, the icon will be determined based on status. Small icons should be used with the high density while medium icons work best with low.
         */
        "iconName": string;
        "isOpen": boolean;
        /**
          * Status to convery to the user with the message.
         */
        "status": MessageStatusType;
        "timeout": number;
        /**
          * Toggles the display of an icon to the left of the toast main text.
         */
        "withIcon": boolean;
    }
    interface HmcToggle {
        /**
          * If `true`, the toggle is selected. Default: `false`.
         */
        "isChecked": boolean;
        /**
          * Specifies 'disabled' state of the toggle. Default: `false`.
         */
        "isDisabled": boolean;
        /**
          * If full-width is set to true. The toggle will fill the width of its parent. Default: `false`.
         */
        "isFullWidth": boolean;
        /**
          * Set toggle's label Default: undefined
         */
        "label": string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Specifies size of component, reflected in label font. Default: "md".
         */
        "size": ToggleSize;
        /**
          * The value of the toggle does not mean if it's checked or not, use the `isChecked` property for that.  The value of a toggle is analogous to the value of an `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
         */
        "value": any | null;
    }
    interface HmcTooltip {
        /**
          * Specifies whether the component fits content or is fixed width. Default: 'false'.
         */
        "isFixedWidth": boolean;
        /**
          * Use to programatically set the initial open state of the tooltip. Default: 'false'.
         */
        "isOpen": boolean;
        /**
          * Specifies whether the component is a toggletip. Default: 'false'.
         */
        "isToggle": boolean;
        /**
          * Specifies placement where tooltip will be render relatively to the triggerElement. Default: 'bottom'.
         */
        "placement": TooltipPlacement;
        /**
          * Specifies the size of the tooltip. Available options are: "xs", "sm". Default: 'sm'.
         */
        "size": TooltipSize;
        /**
          * Adds a title to a toggletip element. Default: `''`
         */
        "toggleTitle": string;
        /**
          * Specifies id of the element (triggerElement) that will be show/hide tooltip.
         */
        "triggerId": string;
    }
}
export interface HmcAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcAccordionElement;
}
export interface HmcBannerMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcBannerMessageElement;
}
export interface HmcCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcCheckboxElement;
}
export interface HmcChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcChipElement;
}
export interface HmcDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcDropdownElement;
}
export interface HmcDropdownMenuButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcDropdownMenuButtonElement;
}
export interface HmcDropdownOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcDropdownOptionElement;
}
export interface HmcInputFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcInputFieldElement;
}
export interface HmcModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcModalElement;
}
export interface HmcModalOverlayCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcModalOverlayElement;
}
export interface HmcNavLinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcNavLinkElement;
}
export interface HmcRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcRadioGroupElement;
}
export interface HmcSegmentedButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcSegmentedButtonElement;
}
export interface HmcSegmentedControlCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcSegmentedControlElement;
}
export interface HmcTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcTabElement;
}
export interface HmcTabGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcTabGroupElement;
}
export interface HmcTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcTextareaElement;
}
export interface HmcToastMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcToastMessageElement;
}
export interface HmcToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHmcToggleElement;
}
declare global {
    interface HTMLHmcAccordionElement extends Components.HmcAccordion, HTMLStencilElement {
    }
    var HTMLHmcAccordionElement: {
        prototype: HTMLHmcAccordionElement;
        new (): HTMLHmcAccordionElement;
    };
    interface HTMLHmcBadgeElement extends Components.HmcBadge, HTMLStencilElement {
    }
    var HTMLHmcBadgeElement: {
        prototype: HTMLHmcBadgeElement;
        new (): HTMLHmcBadgeElement;
    };
    interface HTMLHmcBannerMessageElement extends Components.HmcBannerMessage, HTMLStencilElement {
    }
    var HTMLHmcBannerMessageElement: {
        prototype: HTMLHmcBannerMessageElement;
        new (): HTMLHmcBannerMessageElement;
    };
    interface HTMLHmcButtonElement extends Components.HmcButton, HTMLStencilElement {
    }
    var HTMLHmcButtonElement: {
        prototype: HTMLHmcButtonElement;
        new (): HTMLHmcButtonElement;
    };
    interface HTMLHmcCardElement extends Components.HmcCard, HTMLStencilElement {
    }
    var HTMLHmcCardElement: {
        prototype: HTMLHmcCardElement;
        new (): HTMLHmcCardElement;
    };
    interface HTMLHmcCheckboxElement extends Components.HmcCheckbox, HTMLStencilElement {
    }
    var HTMLHmcCheckboxElement: {
        prototype: HTMLHmcCheckboxElement;
        new (): HTMLHmcCheckboxElement;
    };
    interface HTMLHmcChipElement extends Components.HmcChip, HTMLStencilElement {
    }
    var HTMLHmcChipElement: {
        prototype: HTMLHmcChipElement;
        new (): HTMLHmcChipElement;
    };
    interface HTMLHmcContainerHeaderElement extends Components.HmcContainerHeader, HTMLStencilElement {
    }
    var HTMLHmcContainerHeaderElement: {
        prototype: HTMLHmcContainerHeaderElement;
        new (): HTMLHmcContainerHeaderElement;
    };
    interface HTMLHmcDropdownElement extends Components.HmcDropdown, HTMLStencilElement {
    }
    var HTMLHmcDropdownElement: {
        prototype: HTMLHmcDropdownElement;
        new (): HTMLHmcDropdownElement;
    };
    interface HTMLHmcDropdownGroupElement extends Components.HmcDropdownGroup, HTMLStencilElement {
    }
    var HTMLHmcDropdownGroupElement: {
        prototype: HTMLHmcDropdownGroupElement;
        new (): HTMLHmcDropdownGroupElement;
    };
    interface HTMLHmcDropdownMenuElement extends Components.HmcDropdownMenu, HTMLStencilElement {
    }
    var HTMLHmcDropdownMenuElement: {
        prototype: HTMLHmcDropdownMenuElement;
        new (): HTMLHmcDropdownMenuElement;
    };
    interface HTMLHmcDropdownMenuButtonElement extends Components.HmcDropdownMenuButton, HTMLStencilElement {
    }
    var HTMLHmcDropdownMenuButtonElement: {
        prototype: HTMLHmcDropdownMenuButtonElement;
        new (): HTMLHmcDropdownMenuButtonElement;
    };
    interface HTMLHmcDropdownOptionElement extends Components.HmcDropdownOption, HTMLStencilElement {
    }
    var HTMLHmcDropdownOptionElement: {
        prototype: HTMLHmcDropdownOptionElement;
        new (): HTMLHmcDropdownOptionElement;
    };
    interface HTMLHmcIconElement extends Components.HmcIcon, HTMLStencilElement {
    }
    var HTMLHmcIconElement: {
        prototype: HTMLHmcIconElement;
        new (): HTMLHmcIconElement;
    };
    interface HTMLHmcInputFieldElement extends Components.HmcInputField, HTMLStencilElement {
    }
    var HTMLHmcInputFieldElement: {
        prototype: HTMLHmcInputFieldElement;
        new (): HTMLHmcInputFieldElement;
    };
    interface HTMLHmcMessageElement extends Components.HmcMessage, HTMLStencilElement {
    }
    var HTMLHmcMessageElement: {
        prototype: HTMLHmcMessageElement;
        new (): HTMLHmcMessageElement;
    };
    interface HTMLHmcModalElement extends Components.HmcModal, HTMLStencilElement {
    }
    var HTMLHmcModalElement: {
        prototype: HTMLHmcModalElement;
        new (): HTMLHmcModalElement;
    };
    interface HTMLHmcModalOverlayElement extends Components.HmcModalOverlay, HTMLStencilElement {
    }
    var HTMLHmcModalOverlayElement: {
        prototype: HTMLHmcModalOverlayElement;
        new (): HTMLHmcModalOverlayElement;
    };
    interface HTMLHmcNavBarElement extends Components.HmcNavBar, HTMLStencilElement {
    }
    var HTMLHmcNavBarElement: {
        prototype: HTMLHmcNavBarElement;
        new (): HTMLHmcNavBarElement;
    };
    interface HTMLHmcNavLinkElement extends Components.HmcNavLink, HTMLStencilElement {
    }
    var HTMLHmcNavLinkElement: {
        prototype: HTMLHmcNavLinkElement;
        new (): HTMLHmcNavLinkElement;
    };
    interface HTMLHmcProgressBarElement extends Components.HmcProgressBar, HTMLStencilElement {
    }
    var HTMLHmcProgressBarElement: {
        prototype: HTMLHmcProgressBarElement;
        new (): HTMLHmcProgressBarElement;
    };
    interface HTMLHmcRadioButtonElement extends Components.HmcRadioButton, HTMLStencilElement {
    }
    var HTMLHmcRadioButtonElement: {
        prototype: HTMLHmcRadioButtonElement;
        new (): HTMLHmcRadioButtonElement;
    };
    interface HTMLHmcRadioGroupElement extends Components.HmcRadioGroup, HTMLStencilElement {
    }
    var HTMLHmcRadioGroupElement: {
        prototype: HTMLHmcRadioGroupElement;
        new (): HTMLHmcRadioGroupElement;
    };
    interface HTMLHmcSegmentedButtonElement extends Components.HmcSegmentedButton, HTMLStencilElement {
    }
    var HTMLHmcSegmentedButtonElement: {
        prototype: HTMLHmcSegmentedButtonElement;
        new (): HTMLHmcSegmentedButtonElement;
    };
    interface HTMLHmcSegmentedControlElement extends Components.HmcSegmentedControl, HTMLStencilElement {
    }
    var HTMLHmcSegmentedControlElement: {
        prototype: HTMLHmcSegmentedControlElement;
        new (): HTMLHmcSegmentedControlElement;
    };
    interface HTMLHmcSkeletonElement extends Components.HmcSkeleton, HTMLStencilElement {
    }
    var HTMLHmcSkeletonElement: {
        prototype: HTMLHmcSkeletonElement;
        new (): HTMLHmcSkeletonElement;
    };
    interface HTMLHmcSpinnerElement extends Components.HmcSpinner, HTMLStencilElement {
    }
    var HTMLHmcSpinnerElement: {
        prototype: HTMLHmcSpinnerElement;
        new (): HTMLHmcSpinnerElement;
    };
    interface HTMLHmcTabElement extends Components.HmcTab, HTMLStencilElement {
    }
    var HTMLHmcTabElement: {
        prototype: HTMLHmcTabElement;
        new (): HTMLHmcTabElement;
    };
    interface HTMLHmcTabGroupElement extends Components.HmcTabGroup, HTMLStencilElement {
    }
    var HTMLHmcTabGroupElement: {
        prototype: HTMLHmcTabGroupElement;
        new (): HTMLHmcTabGroupElement;
    };
    interface HTMLHmcTabPanelElement extends Components.HmcTabPanel, HTMLStencilElement {
    }
    var HTMLHmcTabPanelElement: {
        prototype: HTMLHmcTabPanelElement;
        new (): HTMLHmcTabPanelElement;
    };
    interface HTMLHmcTagElement extends Components.HmcTag, HTMLStencilElement {
    }
    var HTMLHmcTagElement: {
        prototype: HTMLHmcTagElement;
        new (): HTMLHmcTagElement;
    };
    interface HTMLHmcTextareaElement extends Components.HmcTextarea, HTMLStencilElement {
    }
    var HTMLHmcTextareaElement: {
        prototype: HTMLHmcTextareaElement;
        new (): HTMLHmcTextareaElement;
    };
    interface HTMLHmcThemeProviderElement extends Components.HmcThemeProvider, HTMLStencilElement {
    }
    var HTMLHmcThemeProviderElement: {
        prototype: HTMLHmcThemeProviderElement;
        new (): HTMLHmcThemeProviderElement;
    };
    interface HTMLHmcToastMessageElement extends Components.HmcToastMessage, HTMLStencilElement {
    }
    var HTMLHmcToastMessageElement: {
        prototype: HTMLHmcToastMessageElement;
        new (): HTMLHmcToastMessageElement;
    };
    interface HTMLHmcToggleElement extends Components.HmcToggle, HTMLStencilElement {
    }
    var HTMLHmcToggleElement: {
        prototype: HTMLHmcToggleElement;
        new (): HTMLHmcToggleElement;
    };
    interface HTMLHmcTooltipElement extends Components.HmcTooltip, HTMLStencilElement {
    }
    var HTMLHmcTooltipElement: {
        prototype: HTMLHmcTooltipElement;
        new (): HTMLHmcTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "hmc-accordion": HTMLHmcAccordionElement;
        "hmc-badge": HTMLHmcBadgeElement;
        "hmc-banner-message": HTMLHmcBannerMessageElement;
        "hmc-button": HTMLHmcButtonElement;
        "hmc-card": HTMLHmcCardElement;
        "hmc-checkbox": HTMLHmcCheckboxElement;
        "hmc-chip": HTMLHmcChipElement;
        "hmc-container-header": HTMLHmcContainerHeaderElement;
        "hmc-dropdown": HTMLHmcDropdownElement;
        "hmc-dropdown-group": HTMLHmcDropdownGroupElement;
        "hmc-dropdown-menu": HTMLHmcDropdownMenuElement;
        "hmc-dropdown-menu-button": HTMLHmcDropdownMenuButtonElement;
        "hmc-dropdown-option": HTMLHmcDropdownOptionElement;
        "hmc-icon": HTMLHmcIconElement;
        "hmc-input-field": HTMLHmcInputFieldElement;
        "hmc-message": HTMLHmcMessageElement;
        "hmc-modal": HTMLHmcModalElement;
        "hmc-modal-overlay": HTMLHmcModalOverlayElement;
        "hmc-nav-bar": HTMLHmcNavBarElement;
        "hmc-nav-link": HTMLHmcNavLinkElement;
        "hmc-progress-bar": HTMLHmcProgressBarElement;
        "hmc-radio-button": HTMLHmcRadioButtonElement;
        "hmc-radio-group": HTMLHmcRadioGroupElement;
        "hmc-segmented-button": HTMLHmcSegmentedButtonElement;
        "hmc-segmented-control": HTMLHmcSegmentedControlElement;
        "hmc-skeleton": HTMLHmcSkeletonElement;
        "hmc-spinner": HTMLHmcSpinnerElement;
        "hmc-tab": HTMLHmcTabElement;
        "hmc-tab-group": HTMLHmcTabGroupElement;
        "hmc-tab-panel": HTMLHmcTabPanelElement;
        "hmc-tag": HTMLHmcTagElement;
        "hmc-textarea": HTMLHmcTextareaElement;
        "hmc-theme-provider": HTMLHmcThemeProviderElement;
        "hmc-toast-message": HTMLHmcToastMessageElement;
        "hmc-toggle": HTMLHmcToggleElement;
        "hmc-tooltip": HTMLHmcTooltipElement;
    }
}
declare namespace LocalJSX {
    interface HmcAccordion {
        /**
          * Specifies isOpen prop, if `true`, the panel will be opened. Default: false.
         */
        "isOpen"?: boolean;
        /**
          * 'accordionChange' event emitted when user clicks on the header and the panel visibility is toggled.
         */
        "onAccordionChange"?: (event: HmcAccordionCustomEvent<{ open: boolean }>) => void;
        /**
          * The size of the accordion header. Available options are: "xs" and "md". Default: "md".
         */
        "size"?: AccordionSize;
    }
    interface HmcBadge {
        /**
          * The kind of the badge. Available options are: 'digits', and 'dots' Default: 'digits'.
         */
        "kind"?: BadgeVariant;
        /**
          * The max number of the badge. Maximum number to appear on the label. A number greater than the max number will appear in the label as '{maxNumber}+'. Maximum Number can only take non-negative integer numbers. Default: 999.
         */
        "maxNumber"?: number;
        /**
          * The label of the badge. Number can only take non-negative integer numbers. Default: 1.
         */
        "number"?: number;
        /**
          * The status of the badge. Available options are: 'urgent', and 'information' Default: 'urgent'.
         */
        "status"?: BadgeStatusType;
    }
    interface HmcBannerMessage {
        /**
          * Text label for the optional button. Providing a value will cause a button to render.
         */
        "actionText"?: string;
        /**
          * Density of the information conveyed. Higher density will occupy less space in the interface for the same information.
         */
        "density"?: 'low' | 'high';
        /**
          * Allows the optional override of the icon to the left of the text. If not provided, the icon will be determined based on status. Small icons should be used with the high density while medium icons work best with low.
         */
        "iconName"?: string;
        /**
          * If set `true`, the banner will display a button with a close icon. When the user clicks this button a `bannerCloseRequested` event will fire.
         */
        "isClosable"?: boolean;
        /**
          * This event will fire when the user clicks the optional button which appears when `actionText` is provided.
         */
        "onActionClicked"?: (event: HmcBannerMessageCustomEvent<any>) => void;
        /**
          * This event fires when the user clicks the close button. The app can then respond to this and remove the banner from the UI.
         */
        "onBannerCloseRequested"?: (event: HmcBannerMessageCustomEvent<any>) => void;
        /**
          * Status to convery to the user with the message.
         */
        "status"?: MessageStatusType;
        /**
          * Toggles the display of an icon to the left of the banner main text.
         */
        "withIcon"?: boolean;
    }
    interface HmcButton {
        /**
          * Specifies whether the button should have input focus when the page loads. Default: `false`.
         */
        "autofocus"?: boolean;
        /**
          * Causes the browser to treat the linked URL as a download. Can be used with or without a value. Passing in "", the browser will suggest a filename/extension. Passing in a value suggests it as the filename.
         */
        "download"?: string | undefined;
        /**
          * When supplied, the button will internally use an `<a>` element rather than `<button>`.
         */
        "href"?: string | undefined;
        /**
          * Specifies 'disabled' state of the button. Default: `false`.
         */
        "isDisabled"?: boolean;
        /**
          * If enabled, the button will be loaded with 'width: 100%'. Default: `false`.
         */
        "isFullWidth"?: boolean;
        /**
          * If enabled, the button will be loaded with an only icon inside. Icon should be set via default slot. Default: `false`.
         */
        "isIconOnly"?: boolean;
        /**
          * Invert the colours for a dark background context.
         */
        "isInverse"?: boolean;
        /**
          * Specifies 'processing' state of the button. Default: `false`.
         */
        "isProcessing"?: boolean;
        /**
          * The kind of the button. Available options are: 'primary', 'secondary', 'tertiary' and 'ghost'. Default: 'primary'.
         */
        "kind"?: VariantType;
        /**
          * The relationship of the linked URL as space-separated link types. https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel
         */
        "rel"?: string | undefined;
        /**
          * The size of the button. Available options are: "xs" - h-24, "sm" - h-32, "md" - h-40. Default: "md".
         */
        "size"?: ButtonSize;
        /**
          * Where to display the linked URL. Options are: `_self`, `_blank`, `_parent`, `_top`
         */
        "target"?: string | undefined;
        /**
          * The type of the broswer button element. Default: 'button'.
         */
        "type"?: 'button' | 'submit' | 'reset';
    }
    interface HmcCard {
        /**
          * Specifies the density of information in the header and body. Similar to the size prop in other components. Specifying 'high' will display a smaller font size allowing more information to be conveyed. Default: 'medium'
         */
        "density"?: 'high' | 'medium';
    }
    interface HmcCheckbox {
        /**
          * If `true`, indicates that this checkbox is selected. Default: `false`.
         */
        "isChecked"?: boolean;
        /**
          * Specifies 'disabled' state of the checkbox. Default, `false`.
         */
        "isDisabled"?: boolean;
        /**
          * Specifies the readonly attribute of the checkbox. In this mode, the checked status of the checkbox is controlled by the isChecked prop and user interaction is disabled. Unlike the disabled state, the look does not change and the inner input is not disabled. Default, `false`.
         */
        "isReadonly"?: boolean;
        /**
          * Set checkbox label.
         */
        "label"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the checked property has changed and its current status is passed as a param.
         */
        "onChanged"?: (event: HmcCheckboxCustomEvent<{ checked: boolean }>) => void;
        /**
          * Specifies size of component, reflected in label font. Default: "md".
         */
        "size"?: CheckboxSize;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the `isChecked` property for that.  The value of a checkbox is analogous to the value of an `<input type="checkbox">`, it's only used when the checkbox participates in a native `<form>`.
         */
        "value"?: any | null;
    }
    interface HmcChip {
        /**
          * Specifies whether the chip should have input focus when the page loads. Default: `false`.
         */
        "autofocus"?: boolean;
        /**
          * If true, adds a checkmark to the chip when it is selected.
         */
        "hasCheckmark"?: boolean;
        /**
          * Specifies 'disabled' state of the chip. Default: `false`.
         */
        "isDisabled"?: boolean;
        /**
          * Specifies whether the chip is selected. Default: `false`.
         */
        "isSelected"?: boolean;
        /**
          * Fires when user clicks the chip and the selection state is toggled.
         */
        "onHmcChange"?: (event: HmcChipCustomEvent<{ selected: boolean }>) => void;
        /**
          * The size of the chip. Available options are: "xs" - h-24, "sm" - h-32, "md" - h-40. Default: "md".
         */
        "size"?: ButtonSize;
    }
    interface HmcContainerHeader {
        /**
          * Specifies the density of information in the header. Similar to the size prop in other components. Specifying 'high' will display a smaller font size allowing more information to be conveyed. Default: 'low'
         */
        "density"?: 'high' | 'medium' | 'low';
        /**
          * This is the larger of the two labels for the card header.
         */
        "heading"?: string;
        /**
          * This prop provides an additional subtitle for the header. It is optional.
         */
        "subtitle"?: string;
    }
    interface HmcDropdown {
        /**
          * Specifies alignment of dropdown, relative to component
         */
        "alignment"?: DropdownAlignment;
        /**
          * Forces placement of the list of options to be opened according to placement received (bottom or top). If not provided the Dropdown determines its own position automatically.
         */
        "forcePlacement"?: DropdownPlacement;
        /**
          * Specifies helper text for component (optional).
         */
        "helperText"?: string;
        /**
          * Specifies whether the selection can be cleared once a selection is made. Only applies when `multiple=true`. Default, `false`.
         */
        "isClearable"?: boolean;
        /**
          * Specifies 'disabled' state of the component. Default, `false`.
         */
        "isDisabled"?: boolean;
        /**
          * Based on this prop "optional" label could be shown or not. Default: 'undefined'.
         */
        "isRequired"?: boolean;
        /**
          * Specifies label text of the input. Default: ''.
         */
        "label"?: string;
        /**
          * Specifies the number of options that can be displayed in the dropdown before the container displays a scroll bar. Default: `8`
         */
        "maxVisibleOpts"?: number;
        /**
          * Specifies the option selection is multiple. True - multiple options selected, false - single option selected Default: `false`
         */
        "multiple"?: boolean;
        /**
          * Name for form submission. Default: "".
         */
        "name"?: string;
        /**
          * Emitted when the selected value changes. Event detail: { value: string | string[] | undefined }.
         */
        "onChanged"?: (event: HmcDropdownCustomEvent<{ value: string | string[] | undefined }>) => void;
        /**
          * Emitted when the dropdown's expanded state is toggled. Event detail: { isActive: boolean }.
         */
        "onToggled"?: (event: HmcDropdownCustomEvent<{ isActive: boolean }>) => void;
        /**
          * String to indicate the input is optional in a form, shown when required=false.
         */
        "optionalText"?: string;
        /**
          * Placeholder for component. Shown if component not processing and has no value provided
         */
        "placeholder"?: string;
        /**
          * Specifies scroll container Id or fallbacks to documentElement To calculate and select visible placement for dropdown
         */
        "scrollContainerId"?: string;
        /**
          * Overrides the text displayed when one or more options are selected.
         */
        "selectedText"?: string;
        /**
          * Specifies size of component via wrapper padding. Default: "md".
         */
        "size"?: DropdownSize;
        /**
          * Provide status for dropdown Default, `error`.
         */
        "status"?: DropdownStatusType;
        /**
          * Specifies whether external value changes to the dropdown are disabled. When set to `true`, the dropdown will not respond to changes made from outside the component. Defaults: `false`.
         */
        "v3EventBehaviour"?: boolean;
        /**
          * Current value of the dropdown, can be used to preselect an option. Default: undefined.
         */
        "value"?: string | string[] | undefined;
    }
    interface HmcDropdownGroup {
        "groupTitle"?: string;
        /**
          * The size of the input. Available options are: "xs", "sm" and "md". Default: "md".
         */
        "size"?: DropdownGroupSize;
    }
    interface HmcDropdownMenu {
        /**
          * Use to programatically set the initial open state of the tooltip. Default: 'false'.
         */
        "isOpen"?: boolean;
        /**
          * Specifies id of the element (triggerElement) that will be show/hide tooltip.
         */
        "triggerId"?: string;
    }
    interface HmcDropdownMenuButton {
        /**
          * Specifies 'disabled' state of the component. Default, `false`.
         */
        "isDisabled"?: boolean;
        "isInverse"?: boolean;
        "isLoading"?: boolean;
        /**
          * The kind of the button. Available options are: 'primary', 'secondary', 'tertiary' and 'ghost'. Default: 'primary'.
         */
        "kind"?: VariantType;
        /**
          * Emitted when the dropdown menu button's expanded state is toggled. Event detail: { isExpanded: boolean }.
         */
        "onToggled"?: (event: HmcDropdownMenuButtonCustomEvent<{ isExpanded: boolean }>) => void;
        /**
          * The size of the Dropdown Menu Button. Available options are: "xs" - h-24, "sm" - h-32, "md" - h-40. Default: "md".
         */
        "size"?: ButtonSize;
    }
    interface HmcDropdownOption {
        /**
          * This prop changes the look of the option depending on whether it is for use with an action. Default, `false`.
         */
        "isAction"?: boolean;
        /**
          * Specifies 'disabled' state of the option. Default, `false`.
         */
        "isDisabled"?: boolean;
        /**
          * This prop changes the look of the option depending on whether it is for use with a multiple or single selection dropdown. Default, `false`.
         */
        "isMultiple"?: boolean;
        /**
          * Specifies 'selected' state of the option. Default, `false`.
         */
        "isSelected"?: boolean;
        "onHmcDropdownSelection"?: (event: HmcDropdownOptionCustomEvent<any>) => void;
        /**
          * The size of the input. Available options are: "xs", "sm" and "md". Default: "md".
         */
        "size"?: DropdownOptionSize;
        /**
          * The value of the option.
         */
        "value"?: any;
    }
    interface HmcIcon {
        /**
          * Deprecated, style the color of these icons using CSS.
         */
        "color"?: string;
        "name": IconNames;
    }
    interface HmcInputField {
        /**
          * If 'on', autocomplete prompts can be used. Default: 'off'.
         */
        "autoComplete"?: string;
        /**
          * A hint to the browser for which enter key to display. Possible values: `"enter"`, `"done"`, `"go"`, `"next"`, `"previous"`, `"search"`, and `"send"`.
         */
        "enterKeyHint"?: | 'enter'
    | 'done'
    | 'go'
    | 'next'
    | 'previous'
    | 'search'
    | 'send';
        /**
          * Specifies type of the input.
         */
        "fieldType"?: string;
        /**
          * If enabled, the browser's spellchecker will be run on the value of the textarea. Default: 'false'.
         */
        "hasSpellcheck"?: 'true' | 'false';
        /**
          * String for the issue displayed under input.
         */
        "helperText"?: string;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputMode"?: | 'none'
    | 'text'
    | 'tel'
    | 'url'
    | 'email'
    | 'numeric'
    | 'decimal'
    | 'search';
        /**
          * If enabled, input will be focused. Default: 'false'.
         */
        "isAutoFocused"?: boolean;
        /**
          * Specifies isClearable prop to remove input content with clear icon. Default: false
         */
        "isClearable"?: boolean;
        /**
          * Specifies 'disabled' state of the icon. Default, `false`.
         */
        "isDisabled"?: boolean;
        /**
          * If enabled, input will be loaded with 'width: 100%'. Default, `false`.
         */
        "isFullWidth"?: boolean;
        /**
          * Based on this prop "optional" label could be shown or not. Default: 'undefined'.
         */
        "isRequired"?: boolean;
        /**
          * Specifies label text of the input. For accessibility, a label must be used to identify the input field. Default: ''.
         */
        "label"?: string;
        /**
          * For `field-type="number"` sets the maximum numeric value of the input.
         */
        "max"?: number;
        /**
          * The maxlength specifies the maximum length (in characters) of the textarea.
         */
        "maxLength"?: number | undefined;
        /**
          * For `field-type="number"` sets the minimum numeric value of the input.
         */
        "min"?: number;
        /**
          * The minlength specifies the minimum length (in characters) of the textarea.
         */
        "minLength"?: number | undefined;
        /**
          * The name of the input for form submission. Default: ''.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onHmcBlur"?: (event: HmcInputFieldCustomEvent<FocusEvent>) => void;
        /**
          * This maps to the native onchange event and typically occurs when the input loses focus or the user hits `Enter`.
         */
        "onHmcChange"?: (event: HmcInputFieldCustomEvent<HmcInputEventDetail>) => void;
        /**
          * Emitted when the input gains focus.
         */
        "onHmcFocus"?: (event: HmcInputFieldCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onHmcInput"?: (event: HmcInputFieldCustomEvent<HmcInputEventDetail>) => void;
        /**
          * String to indicate the input is optional in a form, shown when required=false.
         */
        "optionalText"?: string;
        /**
          * Specifies placeholder of the input.
         */
        "placeholder"?: string;
        /**
          * The size of the input. Available options are: "xs", "sm" and "md". Default: "md".
         */
        "size"?: InputSize;
        /**
          * Provide issue type for input Default, `normal`.
         */
        "status"?: InputStatusType;
        /**
          * For `field-type="number"` sets the increment when using arrow keys to change the value.
         */
        "step"?: number;
        /**
          * The value of the input. Default: ''.
         */
        "value"?: string;
        /**
          * Specifies width of the input in pixels. Default: '200'.
         */
        "width"?: string;
    }
    interface HmcMessage {
        /**
          * Specifies iconName prop that provides icon from hmc-core-components icons. If not specified, the icon name will be taken from the status name.
         */
        "iconName"?: IconNames;
        /**
          * If enabled, input will be loaded with 'width: 100%'. Default, `false`.
         */
        "isFullWidth"?: boolean;
        /**
          * Specifies status prop that provides related status ('success' | 'warning' | 'error' | 'info') with its styles Default: 'info'
         */
        "status"?: MessageStatusType;
    }
    interface HmcModal {
        /**
          * Specifies the density of information in the header. Similar to the size prop in other components. Specifying 'medium' will display a smaller padding allowing more information to be conveyed. Default: 'low'
         */
        "density"?: 'medium' | 'low';
        /**
          * Specifies isFullScreen prop that set full screen size of modal. Default: false
         */
        "isFullScreen"?: boolean;
        /**
          * Specifies isOpen prop for both modal and overlay. Default: false
         */
        "isOpen"?: any;
        /**
          * 'modalCloseRequest' event emitted when user click on overlay or close icon.
         */
        "onModalCloseRequest"?: (event: HmcModalCustomEvent<any>) => void;
        /**
          * If 'true', the modal will request to be dismissed when the overlay is clicked. Default: true
         */
        "overlayDismiss"?: boolean;
    }
    interface HmcModalOverlay {
        /**
          * Specifies isOpen prop, if `true`, the overlay will be visible. Default: false
         */
        "isOpen"?: boolean;
        /**
          * 'overlayClick' event emitted when a user clicks on a overlay listens to this event to handle self-closing.
         */
        "onOverlayClick"?: (event: HmcModalOverlayCustomEvent<any>) => void;
    }
    interface HmcNavBar {
        /**
          * This prop sets whether content passed into the left actions slot will render.
         */
        "leftActionsEnabled"?: boolean;
    }
    interface HmcNavLink {
        /**
          * Causes the browser to treat the linked URL as a download. Can be used with or without a value. Passing in "", the browser will suggest a filename/extension. Passing in a value suggests it as the filename.
         */
        "download"?: string | undefined;
        "href"?: string;
        "isDisabled"?: boolean;
        "isIconOnly"?: boolean;
        "linkActive"?: boolean;
        "onLinkClick"?: (event: HmcNavLinkCustomEvent<any>) => void;
        /**
          * The relationship of the linked URL as space-separated link types. https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel
         */
        "rel"?: string | undefined;
        "size"?: 'md' | 'sm';
        /**
          * Where to display the linked URL. Options are: `_self`, `_blank`, `_parent`, `_top`
         */
        "target"?: string | undefined;
    }
    interface HmcProgressBar {
        /**
          * The kind of the Progress Bar. If enabled, the Progress Bar will be indeterminate type otherwise is determinate. Default: `false`.
         */
        "indeterminate"?: boolean;
        /**
          * Specifies Inline Message text of the Progress Bar. If no text is entered, the inline message section will not be displayed. Default: undefined.
         */
        "inlineMessage"?: | string
    | undefined;
        /**
          * Specifies Label text of the Progress Bar. If no text is entered, Label section will not be displayed. Default: undefined.
         */
        "label"?: string | undefined;
        /**
          * The maximum allowed value, this determines how filled the bar is for a given value. Default: 100.
         */
        "maxValue"?: number;
        /**
          * Specifies whether the percentage text of progress value of the Progress Bar will be shown or not. Default: `true`.
         */
        "showPercentage"?: boolean;
        /**
          * The size of the Progress Bar. Available options are: 'sm', and 'md' Default: 'md'.
         */
        "size"?: 'sm' | 'md';
        /**
          * The status of the Progress Bar. Available options are: 'info', 'success', and 'error' Default: 'info'.
         */
        "status"?: ProgressBarStatusType;
        /**
          * The value being displayed by the bar, relative to maxValue. Default: 0.
         */
        "value"?: number;
    }
    interface HmcRadioButton {
        /**
          * If `true`, indicates that this radio button is selected one in the group.
         */
        "isChecked"?: boolean;
        /**
          * Specifies 'disabled' state of the radio button. Default, `false`.
         */
        "isDisabled"?: boolean;
        /**
          * Optional label to put beside button.
         */
        "label"?: string;
        /**
          * The size of the radio button. Available options are: "xs" and "md". Default: "md".
         */
        "size"?: RadioSize;
        /**
          * Specifies internal value of the radio button. It used in setting/getting currently checked radio and emitting checked radio button's value.
         */
        "value": string;
    }
    interface HmcRadioGroup {
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * 'radioChanged' event emitted when user clicks on particular radio button and value of that radio is passed as a param.
         */
        "onRadioChanged"?: (event: HmcRadioGroupCustomEvent<string>) => void;
        /**
          * the value of the radio group.
         */
        "value"?: any | null;
    }
    interface HmcSegmentedButton {
        /**
          * If `true`, the user cannot interact with the segment button.
         */
        "isDisabled"?: boolean;
        /**
          * If `true`, the tab will be loaded with 'width: 100%'. Default: 'false'.
         */
        "isFullWidth"?: boolean;
        /**
          * If enabled, the button will be loaded with an only icon inside. Icon should be set via default slot. Default: `false`.
         */
        "isIconOnly"?: boolean;
        /**
          * Specifies if SegmentedButton is pressed/active.
         */
        "isPressed"?: boolean;
        /**
          * Event emitter that is triggered when any item is clicked
         */
        "onSegmentClicked"?: (event: HmcSegmentedButtonCustomEvent<string>) => void;
        /**
          * The size of the Segment Button. Available options are: "xs", "sm" and "md" . Default = "md".
         */
        "size"?: SegmentedButtonSize;
        /**
          * The value of the Segment Button.
         */
        "value"?: string;
    }
    interface HmcSegmentedControl {
        "isFullWidth"?: boolean;
        /**
          * Emitted when the value property has changed.
         */
        "onSegmentChanged"?: (event: HmcSegmentedControlCustomEvent<any>) => void;
        /**
          * the value of the SegmentedControl.
         */
        "value"?: string | null;
    }
    interface HmcSkeleton {
    }
    interface HmcSpinner {
        /**
          * The kind of spinner. Available options are: 'primary', 'secondary' and 'tertiary' Default: 'primary'.
         */
        "kind"?: SpinnerVariant;
        /**
          * The size of the spinner. Available options are: 'sm', and 'md' Default: 'sm'.
         */
        "size"?: SpinnerSize;
    }
    interface HmcTab {
        /**
          * If `true`, the user cannot interact with the tab. Default: 'false'.
         */
        "isDisabled"?: boolean;
        /**
          * If `true`, the tab will be loaded with 'width: 100%'. Default: 'false'.
         */
        "isFullWidth"?: boolean;
        /**
          * Tab panel will only be visible if this is set `true`. Default: 'false'.
         */
        "isSelected"?: boolean;
        /**
          * 'tabClicked' event emitted when user clicks on the particular tab and its name is passed as a param
         */
        "onTabClicked"?: (event: HmcTabCustomEvent<string>) => void;
        /**
          * Specifies internal name of the tab. It used in work around setting/getting currently active tab
         */
        "panel": string;
        /**
          * The size of the tab. Determines font size and line height. Available options are: "xs", "sm" and "md". Default: "md".
         */
        "size"?: TabSize;
    }
    interface HmcTabGroup {
        /**
          * 'tabSelected' event emitted when user clicks on header of particular tab and name of that tab is passed as param
         */
        "onTabSelected"?: (event: HmcTabGroupCustomEvent<string>) => void;
    }
    interface HmcTabPanel {
        /**
          * Tab panel will only be visible if this is set `true`. Default: 'false'.
         */
        "isSelected"?: boolean;
        /**
          * Specifies internal name of the tab. It is used for connecting the panel to the controlling tab.
         */
        "name": string;
    }
    interface HmcTag {
        /**
          * The amount of emphasis in the UI that the tag has. Available options are: 'subtle', and 'strong' Default: 'subtle'.
         */
        "emphasis"?: 'subtle' | 'strong';
        /**
          * Specifies iconName prop that provides icon from hmc-core-components icons. If not specified, the icon name will be taken from the status name.
         */
        "iconName"?: IconNames;
        /**
          * If enabled, input will be loaded with 'width: 100%'. Default, `false`.
         */
        "isFullWidth"?: boolean;
        /**
          * The size of the tag. Available options are: 'sm', and 'md' Default: 'md'.
         */
        "size"?: TagSize;
        /**
          * Specifies status prop that provides related status ('success' | 'warning' | 'error' | 'info' | 'highlight) with its styles Default: 'info'
         */
        "status"?: TagStatusType;
        /**
          * Toggles the display of an icon to the left of the tag main text.
         */
        "withIcon"?: boolean;
    }
    interface HmcTextarea {
        /**
          * If 'on', autocomplete prompts can be used. Default: 'off'.
         */
        "autoComplete"?: 'on' | 'off';
        /**
          * Specifies height of the area by number of rows of characters Default: '30'.
         */
        "cols"?: number;
        /**
          * If enabled, a counter will display the amount of characters. Default: 'false'.
         */
        "hasCounter"?: boolean;
        /**
          * If enabled, the browser's spellchecker will be run on the value of the textarea. Default: 'false'.
         */
        "hasSpellcheck"?: 'true' | 'false';
        /**
          * String for the issue displayed under input.
         */
        "helperText"?: string;
        /**
          * If enabled, input will be focused. Default: 'false'.
         */
        "isAutoFocused"?: boolean;
        /**
          * Specifies 'disabled' state of the icon. Default, `false`.
         */
        "isDisabled"?: boolean;
        /**
          * If enabled, input will be loaded with 'width: 100%'. Default, `false`.
         */
        "isFullWidth"?: boolean;
        /**
          * Based on this prop "optional" label could be shown or not. Default: 'undefined'.
         */
        "isRequired"?: boolean;
        /**
          * Specifies label text of the input. For accessibility, a label must be used to identify the input field. Default: ''.
         */
        "label"?: string;
        /**
          * The maxlength specifies the maximum length (in characters) of the textarea.
         */
        "maxLength"?: number | undefined;
        /**
          * The minlength specifies the minimum length (in characters) of the textarea.
         */
        "minLength"?: number | undefined;
        /**
          * The name of the input for form submission. Default: ''.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onHmcBlur"?: (event: HmcTextareaCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onHmcChange"?: (event: HmcTextareaCustomEvent<HmcTextareaEventDetail>) => void;
        /**
          * Emitted when the input loses focus.
         */
        "onHmcFocus"?: (event: HmcTextareaCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onHmcInput"?: (event: HmcTextareaCustomEvent<HmcTextareaEventDetail>) => void;
        /**
          * String to indicate the input is optional in a form, shown when required=false.
         */
        "optionalText"?: string;
        /**
          * Specifies placeholder of the textarea.
         */
        "placeholder"?: string;
        /**
          * If enabled, displays a resize handle, allowing you to scale the textarea vertically.
         */
        "resize"?: 'none' | 'vertical';
        /**
          * Specifies height of the area by number of rows of characters Default: '3'.
         */
        "rows"?: number;
        /**
          * The size of the input. Available options are: "xs", "sm" and "md". Default: "md".
         */
        "size"?: InputSize;
        /**
          * Provide issue type for input Default, `normal`.
         */
        "status"?: InputStatusType;
        /**
          * The value of the input. Default: ''.
         */
        "value"?: string;
        /**
          * How the control should wrap the value for form submission. Hard automatically adds line breaks and Soft uses existing ones. Default: 'soft'.
         */
        "wrap"?: 'hard' | 'soft';
    }
    interface HmcThemeProvider {
        /**
          * The theme to apply to the UI tokens. This will remap CSS variables for all child components. Available options are: 'light', and 'dark'
         */
        "theme"?: 'dark' | 'light';
    }
    interface HmcToastMessage {
        /**
          * Text label for the optional button. Providing a value will cause a button to render.
         */
        "actionText"?: string;
        /**
          * Density of the information conveyed. Higher density will occupy less space in the interface for the same information.
         */
        "density"?: 'low' | 'high';
        /**
          * If set `true`, the toast will display a button with a close icon. When the user clicks this button a `toastClosed` event will fire and the toast will close immediately.
         */
        "hasCloseButton"?: boolean;
        /**
          * Allows the optional override of the icon to the left of the text. If not provided, the icon will be determined based on status. Small icons should be used with the high density while medium icons work best with low.
         */
        "iconName"?: string;
        "isOpen"?: boolean;
        /**
          * This event will fire when the user clicks the optional button which appears when `actionText` is provided.
         */
        "onActionClicked"?: (event: HmcToastMessageCustomEvent<any>) => void;
        /**
          * This event fires when the user clicks the close button or the closing timeout completes. The app can then respond to this and remove the toast from the UI.
         */
        "onToastClosed"?: (event: HmcToastMessageCustomEvent<any>) => void;
        /**
          * This event fires when the toast opens and the timeout counter begins. The app can use preventDefault() on the event to cancel the timeout.
         */
        "onToastClosing"?: (event: HmcToastMessageCustomEvent<any>) => void;
        /**
          * Status to convery to the user with the message.
         */
        "status"?: MessageStatusType;
        "timeout"?: number;
        /**
          * Toggles the display of an icon to the left of the toast main text.
         */
        "withIcon"?: boolean;
    }
    interface HmcToggle {
        /**
          * If `true`, the toggle is selected. Default: `false`.
         */
        "isChecked"?: boolean;
        /**
          * Specifies 'disabled' state of the toggle. Default: `false`.
         */
        "isDisabled"?: boolean;
        /**
          * If full-width is set to true. The toggle will fill the width of its parent. Default: `false`.
         */
        "isFullWidth"?: boolean;
        /**
          * Set toggle's label Default: undefined
         */
        "label"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the toggle has changed state.
         */
        "onChanged"?: (event: HmcToggleCustomEvent<{ checked: boolean }>) => void;
        /**
          * Specifies size of component, reflected in label font. Default: "md".
         */
        "size"?: ToggleSize;
        /**
          * The value of the toggle does not mean if it's checked or not, use the `isChecked` property for that.  The value of a toggle is analogous to the value of an `<input type="checkbox">`, it's only used when the toggle participates in a native `<form>`.
         */
        "value"?: any | null;
    }
    interface HmcTooltip {
        /**
          * Specifies whether the component fits content or is fixed width. Default: 'false'.
         */
        "isFixedWidth"?: boolean;
        /**
          * Use to programatically set the initial open state of the tooltip. Default: 'false'.
         */
        "isOpen"?: boolean;
        /**
          * Specifies whether the component is a toggletip. Default: 'false'.
         */
        "isToggle"?: boolean;
        /**
          * Specifies placement where tooltip will be render relatively to the triggerElement. Default: 'bottom'.
         */
        "placement"?: TooltipPlacement;
        /**
          * Specifies the size of the tooltip. Available options are: "xs", "sm". Default: 'sm'.
         */
        "size"?: TooltipSize;
        /**
          * Adds a title to a toggletip element. Default: `''`
         */
        "toggleTitle"?: string;
        /**
          * Specifies id of the element (triggerElement) that will be show/hide tooltip.
         */
        "triggerId"?: string;
    }
    interface IntrinsicElements {
        "hmc-accordion": HmcAccordion;
        "hmc-badge": HmcBadge;
        "hmc-banner-message": HmcBannerMessage;
        "hmc-button": HmcButton;
        "hmc-card": HmcCard;
        "hmc-checkbox": HmcCheckbox;
        "hmc-chip": HmcChip;
        "hmc-container-header": HmcContainerHeader;
        "hmc-dropdown": HmcDropdown;
        "hmc-dropdown-group": HmcDropdownGroup;
        "hmc-dropdown-menu": HmcDropdownMenu;
        "hmc-dropdown-menu-button": HmcDropdownMenuButton;
        "hmc-dropdown-option": HmcDropdownOption;
        "hmc-icon": HmcIcon;
        "hmc-input-field": HmcInputField;
        "hmc-message": HmcMessage;
        "hmc-modal": HmcModal;
        "hmc-modal-overlay": HmcModalOverlay;
        "hmc-nav-bar": HmcNavBar;
        "hmc-nav-link": HmcNavLink;
        "hmc-progress-bar": HmcProgressBar;
        "hmc-radio-button": HmcRadioButton;
        "hmc-radio-group": HmcRadioGroup;
        "hmc-segmented-button": HmcSegmentedButton;
        "hmc-segmented-control": HmcSegmentedControl;
        "hmc-skeleton": HmcSkeleton;
        "hmc-spinner": HmcSpinner;
        "hmc-tab": HmcTab;
        "hmc-tab-group": HmcTabGroup;
        "hmc-tab-panel": HmcTabPanel;
        "hmc-tag": HmcTag;
        "hmc-textarea": HmcTextarea;
        "hmc-theme-provider": HmcThemeProvider;
        "hmc-toast-message": HmcToastMessage;
        "hmc-toggle": HmcToggle;
        "hmc-tooltip": HmcTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "hmc-accordion": LocalJSX.HmcAccordion & JSXBase.HTMLAttributes<HTMLHmcAccordionElement>;
            "hmc-badge": LocalJSX.HmcBadge & JSXBase.HTMLAttributes<HTMLHmcBadgeElement>;
            "hmc-banner-message": LocalJSX.HmcBannerMessage & JSXBase.HTMLAttributes<HTMLHmcBannerMessageElement>;
            "hmc-button": LocalJSX.HmcButton & JSXBase.HTMLAttributes<HTMLHmcButtonElement>;
            "hmc-card": LocalJSX.HmcCard & JSXBase.HTMLAttributes<HTMLHmcCardElement>;
            "hmc-checkbox": LocalJSX.HmcCheckbox & JSXBase.HTMLAttributes<HTMLHmcCheckboxElement>;
            "hmc-chip": LocalJSX.HmcChip & JSXBase.HTMLAttributes<HTMLHmcChipElement>;
            "hmc-container-header": LocalJSX.HmcContainerHeader & JSXBase.HTMLAttributes<HTMLHmcContainerHeaderElement>;
            "hmc-dropdown": LocalJSX.HmcDropdown & JSXBase.HTMLAttributes<HTMLHmcDropdownElement>;
            "hmc-dropdown-group": LocalJSX.HmcDropdownGroup & JSXBase.HTMLAttributes<HTMLHmcDropdownGroupElement>;
            "hmc-dropdown-menu": LocalJSX.HmcDropdownMenu & JSXBase.HTMLAttributes<HTMLHmcDropdownMenuElement>;
            "hmc-dropdown-menu-button": LocalJSX.HmcDropdownMenuButton & JSXBase.HTMLAttributes<HTMLHmcDropdownMenuButtonElement>;
            "hmc-dropdown-option": LocalJSX.HmcDropdownOption & JSXBase.HTMLAttributes<HTMLHmcDropdownOptionElement>;
            "hmc-icon": LocalJSX.HmcIcon & JSXBase.HTMLAttributes<HTMLHmcIconElement>;
            "hmc-input-field": LocalJSX.HmcInputField & JSXBase.HTMLAttributes<HTMLHmcInputFieldElement>;
            "hmc-message": LocalJSX.HmcMessage & JSXBase.HTMLAttributes<HTMLHmcMessageElement>;
            "hmc-modal": LocalJSX.HmcModal & JSXBase.HTMLAttributes<HTMLHmcModalElement>;
            "hmc-modal-overlay": LocalJSX.HmcModalOverlay & JSXBase.HTMLAttributes<HTMLHmcModalOverlayElement>;
            "hmc-nav-bar": LocalJSX.HmcNavBar & JSXBase.HTMLAttributes<HTMLHmcNavBarElement>;
            "hmc-nav-link": LocalJSX.HmcNavLink & JSXBase.HTMLAttributes<HTMLHmcNavLinkElement>;
            "hmc-progress-bar": LocalJSX.HmcProgressBar & JSXBase.HTMLAttributes<HTMLHmcProgressBarElement>;
            "hmc-radio-button": LocalJSX.HmcRadioButton & JSXBase.HTMLAttributes<HTMLHmcRadioButtonElement>;
            "hmc-radio-group": LocalJSX.HmcRadioGroup & JSXBase.HTMLAttributes<HTMLHmcRadioGroupElement>;
            "hmc-segmented-button": LocalJSX.HmcSegmentedButton & JSXBase.HTMLAttributes<HTMLHmcSegmentedButtonElement>;
            "hmc-segmented-control": LocalJSX.HmcSegmentedControl & JSXBase.HTMLAttributes<HTMLHmcSegmentedControlElement>;
            "hmc-skeleton": LocalJSX.HmcSkeleton & JSXBase.HTMLAttributes<HTMLHmcSkeletonElement>;
            "hmc-spinner": LocalJSX.HmcSpinner & JSXBase.HTMLAttributes<HTMLHmcSpinnerElement>;
            "hmc-tab": LocalJSX.HmcTab & JSXBase.HTMLAttributes<HTMLHmcTabElement>;
            "hmc-tab-group": LocalJSX.HmcTabGroup & JSXBase.HTMLAttributes<HTMLHmcTabGroupElement>;
            "hmc-tab-panel": LocalJSX.HmcTabPanel & JSXBase.HTMLAttributes<HTMLHmcTabPanelElement>;
            "hmc-tag": LocalJSX.HmcTag & JSXBase.HTMLAttributes<HTMLHmcTagElement>;
            "hmc-textarea": LocalJSX.HmcTextarea & JSXBase.HTMLAttributes<HTMLHmcTextareaElement>;
            "hmc-theme-provider": LocalJSX.HmcThemeProvider & JSXBase.HTMLAttributes<HTMLHmcThemeProviderElement>;
            "hmc-toast-message": LocalJSX.HmcToastMessage & JSXBase.HTMLAttributes<HTMLHmcToastMessageElement>;
            "hmc-toggle": LocalJSX.HmcToggle & JSXBase.HTMLAttributes<HTMLHmcToggleElement>;
            "hmc-tooltip": LocalJSX.HmcTooltip & JSXBase.HTMLAttributes<HTMLHmcTooltipElement>;
        }
    }
}
