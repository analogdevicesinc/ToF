/// <reference types="node" />
/// <reference types="react" />
import { EventEmitter } from '../../stencil-public-runtime';
import { MessageStatusType } from '../type/status.type';
/**
 * @slot - An unnamed slot is used to pass the main text content of the toast.
 */
export declare class HmcToastMessage {
  el: HTMLElement;
  /**
   * Status to convery to the user with the message.
   */
  status: MessageStatusType;
  /**
   * Density of the information conveyed. Higher density will occupy less space in the
   * interface for the same information.
   */
  density: 'low' | 'high';
  /**
   * Text label for the optional button. Providing a value will cause a button to render.
   */
  actionText: string;
  /**
   * If set `true`, the toast will display a button with a close icon. When the user clicks
   * this button a `toastClosed` event will fire and the toast will close immediately.
   */
  hasCloseButton: boolean;
  /**
   * Toggles the display of an icon to the left of the toast main text.
   */
  withIcon: boolean;
  /**
   * Allows the optional override of the icon to the left of the text. If not provided, the icon will be
   * determined based on status. Small icons should be used with the high density while medium icons work best with low.
   */
  iconName: string;
  isOpen: boolean;
  timeout: number;
  timeoutRef: NodeJS.Timeout;
  /**
   * This event will fire when the user clicks the optional button which appears when `actionText` is provided.
   */
  actionClicked: EventEmitter;
  /**
   * This event fires when the toast opens and the timeout counter begins. The app can use preventDefault() on the event
   * to cancel the timeout.
   */
  toastClosing: EventEmitter;
  /**
   * This event fires when the user clicks the close button or the closing timeout completes. The app can then respond to this and remove the
   * toast from the UI.
   */
  toastClosed: EventEmitter;
  handleOpen(newValue: boolean, oldValue: boolean): void;
  initiateClosing(): void;
  closeToast(): void;
  startToastCloseTimer(): void;
  stopToastCloseTimer(): void;
  componentDidLoad(): void;
  render(): JSX.Element;
}
