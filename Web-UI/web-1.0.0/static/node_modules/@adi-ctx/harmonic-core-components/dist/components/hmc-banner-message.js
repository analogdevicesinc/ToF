import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$4 } from './button.js';
import { d as defineCustomElement$3 } from './icon.js';
import { d as defineCustomElement$2 } from './spinner.js';

const bannerMessageCss = ":host{display:block;width:100%;color:var(--hmc-color-notification-info-default-text, var(--hmc-color-system-info-default, var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))));font-family:var(--font-family-body, \"Inter\", sans-serif);font-size:var(--font-size-medium, 16px);line-height:24px}.banner{display:flex;justify-content:space-between;width:100%;box-sizing:border-box;padding:12px 16px;background-color:var(--hmc-color-notification-info-default-background, var(--hmc-color-system-info-silent, var(--hmc-color-gray-100, #f0f1f3)))}.banner .main-content{padding-top:3px}.banner .content-container hmc-icon{color:var(--hmc-color-notification-info-default-graphic, var(--hmc-color-system-info-default, var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))))}.banner.high-density{padding:8px 16px;font-size:14px;line-height:20px}.banner.high-density .content-container{padding-top:1px}.banner.high-density .main-content{padding-top:0}.banner.success{color:var(--hmc-color-notification-success-default-text, var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820)));background-color:var(--hmc-color-notification-success-default-background, var(--hmc-color-system-success-silent, var(--hmc-color-green-100, #e4f6ef)))}.banner.success .content-container hmc-icon{color:var(--hmc-color-notification-success-default-graphic, var(--hmc-color-system-success-default, var(--hmc-color-green-500, #2e9e6f)))}.banner.warning{color:var(--hmc-color-notification-warning-default-text, var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820)));background-color:var(--hmc-color-notification-warning-default-background, var(--hmc-color-system-warning-silent, var(--hmc-color-orange-100, #feefe7)))}.banner.warning .content-container hmc-icon{color:var(--hmc-color-notification-warning-default-graphic, var(--hmc-color-system-warning-default, var(--hmc-color-orange-500, #e76423)))}.banner.error{color:var(--hmc-color-notification-danger-default-text, var(--hmc-color-system-danger-default, var(--hmc-color-red-700, #c81a28)));background-color:var(--hmc-color-notification-danger-default-background, var(--hmc-color-system-danger-silent, var(--hmc-color-red-100, #feeeef)))}.banner.error .content-container hmc-icon{color:var(--hmc-color-notification-danger-default-graphic, var(--hmc-color-system-danger-default, var(--hmc-color-red-700, #c81a28)))}.content-container,.action-container{display:flex;gap:8px}.content-container{margin-right:12px}.content-container hmc-icon{padding-top:2px;height:100%}";

const statusIconMap = {
  low: {
    success: 'check-round-m',
    warning: 'warning-m',
    error: 'error-m',
    info: 'info-m',
  },
  high: {
    success: 'check-circle-s',
    warning: 'warning-s',
    error: 'error-s',
    info: 'info-s',
  },
};
const HmcBannerMessage$1 = /*@__PURE__*/ proxyCustomElement(class HmcBannerMessage extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.actionClicked = createEvent(this, "actionClicked", 7);
    this.bannerCloseRequested = createEvent(this, "bannerCloseRequested", 7);
    this.status = 'info';
    this.density = 'low';
    this.actionText = '';
    this.isClosable = false;
    this.withIcon = true;
    this.iconName = undefined;
  }
  render() {
    const { actionText, density, iconName, isClosable, status, withIcon, } = this;
    const classList = {
      'banner': true,
      [status]: true,
      'high-density': density === 'high',
    };
    const icon = (iconName || statusIconMap[density][status]);
    return (h(Host, null, h("div", { class: classList }, h("div", { class: "content-container" }, withIcon && h("hmc-icon", { name: icon }), h("div", { class: "main-content" }, h("slot", null))), h("div", { class: "action-container" }, actionText !== '' && (h("hmc-button", { size: density === 'low' ? 'sm' : 'xs', kind: "secondary", onClick: () => this.actionClicked.emit() }, actionText)), isClosable && (h("hmc-button", { "icon-only": true, size: density === 'low' ? 'sm' : 'xs', kind: "ghost", onClick: () => this.bannerCloseRequested.emit() }, h("hmc-icon", { name: "close-m" })))))));
  }
  static get style() { return bannerMessageCss; }
}, [1, "hmc-banner-message", {
    "status": [1],
    "density": [1],
    "actionText": [1, "action-text"],
    "isClosable": [4, "closable"],
    "withIcon": [4, "with-icon"],
    "iconName": [1, "icon-name"]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["hmc-banner-message", "hmc-button", "hmc-icon", "hmc-spinner"];
  components.forEach(tagName => { switch (tagName) {
    case "hmc-banner-message":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, HmcBannerMessage$1);
      }
      break;
    case "hmc-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "hmc-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "hmc-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const HmcBannerMessage = HmcBannerMessage$1;
const defineCustomElement = defineCustomElement$1;

export { HmcBannerMessage, defineCustomElement };
