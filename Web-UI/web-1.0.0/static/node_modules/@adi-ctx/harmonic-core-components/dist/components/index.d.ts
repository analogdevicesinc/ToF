/* HarmonicCoreComponents custom elements */
export { HmcAccordion as HmcAccordion } from '../types/components/accordion/accordion';
export { defineCustomElement as defineCustomElementHmcAccordion } from './hmc-accordion';
export { HmcBadge as HmcBadge } from '../types/components/badge/badge';
export { defineCustomElement as defineCustomElementHmcBadge } from './hmc-badge';
export { HmcBannerMessage as HmcBannerMessage } from '../types/components/banner-message/banner-message';
export { defineCustomElement as defineCustomElementHmcBannerMessage } from './hmc-banner-message';
export { HmcButton as HmcButton } from '../types/components/button/button';
export { defineCustomElement as defineCustomElementHmcButton } from './hmc-button';
export { HmcCard as HmcCard } from '../types/components/card/card';
export { defineCustomElement as defineCustomElementHmcCard } from './hmc-card';
export { HmcCheckbox as HmcCheckbox } from '../types/components/checkbox/checkbox';
export { defineCustomElement as defineCustomElementHmcCheckbox } from './hmc-checkbox';
export { HmcChip as HmcChip } from '../types/components/chip/chip';
export { defineCustomElement as defineCustomElementHmcChip } from './hmc-chip';
export { HmcContainerHeader as HmcContainerHeader } from '../types/components/container-header/container-header';
export { defineCustomElement as defineCustomElementHmcContainerHeader } from './hmc-container-header';
export { HmcDropdown as HmcDropdown } from '../types/components/dropdown/dropdown';
export { defineCustomElement as defineCustomElementHmcDropdown } from './hmc-dropdown';
export { HmcDropdownGroup as HmcDropdownGroup } from '../types/components/dropdown-group/dropdown-group';
export { defineCustomElement as defineCustomElementHmcDropdownGroup } from './hmc-dropdown-group';
export { HmcDropdownMenu as HmcDropdownMenu } from '../types/components/dropdown-menu/dropdown-menu';
export { defineCustomElement as defineCustomElementHmcDropdownMenu } from './hmc-dropdown-menu';
export { HmcDropdownMenuButton as HmcDropdownMenuButton } from '../types/components/dropdown-menu-button/dropdown-menu-button';
export { defineCustomElement as defineCustomElementHmcDropdownMenuButton } from './hmc-dropdown-menu-button';
export { HmcDropdownOption as HmcDropdownOption } from '../types/components/dropdown-option/dropdown-option';
export { defineCustomElement as defineCustomElementHmcDropdownOption } from './hmc-dropdown-option';
export { HmcIcon as HmcIcon } from '../types/components/icon/icon';
export { defineCustomElement as defineCustomElementHmcIcon } from './hmc-icon';
export { HmcInputField as HmcInputField } from '../types/components/input-field/input-field';
export { defineCustomElement as defineCustomElementHmcInputField } from './hmc-input-field';
export { HmcMessage as HmcMessage } from '../types/components/message/message';
export { defineCustomElement as defineCustomElementHmcMessage } from './hmc-message';
export { HmcModal as HmcModal } from '../types/components/modals/modal/modal';
export { defineCustomElement as defineCustomElementHmcModal } from './hmc-modal';
export { HmcModalOverlay as HmcModalOverlay } from '../types/components/modals/modal-overlay/modal-overlay';
export { defineCustomElement as defineCustomElementHmcModalOverlay } from './hmc-modal-overlay';
export { HmcNavBar as HmcNavBar } from '../types/components/nav/nav-bar/nav-bar';
export { defineCustomElement as defineCustomElementHmcNavBar } from './hmc-nav-bar';
export { HmcNavLink as HmcNavLink } from '../types/components/nav/nav-link/nav-link';
export { defineCustomElement as defineCustomElementHmcNavLink } from './hmc-nav-link';
export { HmcProgressBar as HmcProgressBar } from '../types/components/progress-bar/progress-bar';
export { defineCustomElement as defineCustomElementHmcProgressBar } from './hmc-progress-bar';
export { HmcRadioButton as HmcRadioButton } from '../types/components/radio/radio-button/radio-button';
export { defineCustomElement as defineCustomElementHmcRadioButton } from './hmc-radio-button';
export { HmcRadioGroup as HmcRadioGroup } from '../types/components/radio/radio-group/radio-group';
export { defineCustomElement as defineCustomElementHmcRadioGroup } from './hmc-radio-group';
export { HmcSegmentedButton as HmcSegmentedButton } from '../types/components/segmented-control/segmented-button/segmented-button';
export { defineCustomElement as defineCustomElementHmcSegmentedButton } from './hmc-segmented-button';
export { HmcSegmentedControl as HmcSegmentedControl } from '../types/components/segmented-control/segmented-control/segmented-control';
export { defineCustomElement as defineCustomElementHmcSegmentedControl } from './hmc-segmented-control';
export { HmcSkeleton as HmcSkeleton } from '../types/components/skeleton/skeleton';
export { defineCustomElement as defineCustomElementHmcSkeleton } from './hmc-skeleton';
export { HmcSpinner as HmcSpinner } from '../types/components/spinner/spinner';
export { defineCustomElement as defineCustomElementHmcSpinner } from './hmc-spinner';
export { HmcTab as HmcTab } from '../types/components/tabs/tab/tab';
export { defineCustomElement as defineCustomElementHmcTab } from './hmc-tab';
export { HmcTabGroup as HmcTabGroup } from '../types/components/tabs/tab-group/tab-group';
export { defineCustomElement as defineCustomElementHmcTabGroup } from './hmc-tab-group';
export { HmcTabPanel as HmcTabPanel } from '../types/components/tabs/tab-panel/tab-panel';
export { defineCustomElement as defineCustomElementHmcTabPanel } from './hmc-tab-panel';
export { HmcTag as HmcTag } from '../types/components/tag/tag';
export { defineCustomElement as defineCustomElementHmcTag } from './hmc-tag';
export { HmcTextarea as HmcTextarea } from '../types/components/textarea/textarea';
export { defineCustomElement as defineCustomElementHmcTextarea } from './hmc-textarea';
export { HmcThemeProvider as HmcThemeProvider } from '../types/components/theme-provider/theme-provider';
export { defineCustomElement as defineCustomElementHmcThemeProvider } from './hmc-theme-provider';
export { HmcToastMessage as HmcToastMessage } from '../types/components/toast-message/toast-message';
export { defineCustomElement as defineCustomElementHmcToastMessage } from './hmc-toast-message';
export { HmcToggle as HmcToggle } from '../types/components/toggle/toggle';
export { defineCustomElement as defineCustomElementHmcToggle } from './hmc-toggle';
export { HmcTooltip as HmcTooltip } from '../types/components/tooltip/tooltip';
export { defineCustomElement as defineCustomElementHmcTooltip } from './hmc-tooltip';

/**
 * Used to manually set the base path where assets can be found.
 * If the script is used as "module", it's recommended to use "import.meta.url",
 * such as "setAssetPath(import.meta.url)". Other options include
 * "setAssetPath(document.currentScript.src)", or using a bundler's replace plugin to
 * dynamically set the path at build time, such as "setAssetPath(process.env.ASSET_PATH)".
 * But do note that this configuration depends on how your script is bundled, or lack of
 * bundling, and where your assets can be loaded from. Additionally custom bundling
 * will have to ensure the static assets are copied to its build directory.
 */
export declare const setAssetPath: (path: string) => void;

/**
 * Used to specify a nonce value that corresponds with an application's CSP.
 * When set, the nonce will be added to all dynamically created script and style tags at runtime.
 * Alternatively, the nonce value can be set on a meta tag in the DOM head
 * (<meta name="csp-nonce" content="{ nonce value here }" />) which
 * will result in the same behavior.
 */
export declare const setNonce: (nonce: string) => void

export interface SetPlatformOptions {
  raf?: (c: FrameRequestCallback) => number;
  ael?: (el: EventTarget, eventName: string, listener: EventListenerOrEventListenerObject, options: boolean | AddEventListenerOptions) => void;
  rel?: (el: EventTarget, eventName: string, listener: EventListenerOrEventListenerObject, options: boolean | AddEventListenerOptions) => void;
}
export declare const setPlatformOptions: (opts: SetPlatformOptions) => void;
export * from '../types';
