import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { r as renderHiddenInput } from './utils.js';

const toggleCss = ":host{display:inline-block;position:relative;box-sizing:border-box;user-select:none}:host(.disabled){pointer-events:none}:host(:hover) .toggle{background-color:var(--hmc-color-interactive-subtle-hover, var(--hmc-color-gray-700, #5e6773))}:host(:hover) .toggle.checked{background-color:var(--hmc-color-interactive-primary-hover, var(--hmc-color-system-primary-strong, var(--hmc-color-blue-900, #00427a)))}.container{display:inline-flex;align-items:center;line-height:20px}.container label{align-items:center;margin-right:8px;font-family:var(--font-family-body, \"Inter\", sans-serif);font-size:var(--font-size-default, 14px);font-weight:400;color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))}.container label.disabled{color:var(--hmc-color-content-silent, var(--hmc-color-gray-400, #9fa4ad))}.container.xs label{font-size:var(--font-size-small, 12px);line-height:16px}:host(.full-width){width:100%}:host(.full-width) .container{width:100%;justify-content:space-between}:host(:focus-visible){outline:none}input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}.toggle{display:flex;align-items:center;height:16px;width:35px;border-radius:8px;background-color:var(--hmc-color-interactive-subtle-idle, var(--hmc-color-gray-500, #848b95))}.toggle.disabled{background-color:var(--hmc-color-interactive-subtle-disabled, var(--hmc-color-gray-200, #d5d8dc))}.toggle.checked{background-color:var(--hmc-color-interactive-primary-idle, var(--hmc-color-system-primary-default, var(--hmc-color-blue-700, #0067b9)))}.toggle.checked:hover{background-color:var(--hmc-color-interactive-primary-hover, var(--hmc-color-system-primary-strong, var(--hmc-color-blue-900, #00427a)))}.toggle.checked.disabled{background-color:var(--hmc-color-interactive-primary-disabled, var(--hmc-color-system-primary-subtle, var(--hmc-color-blue-300, #92befc)))}.toggle.checked .toggle-inner{transform:translateX(19px)}.toggle.focused{outline-offset:2px;outline:2px solid var(--hmc-color-interactive-focus, var(--hmc-color-system-highlight-default, var(--hmc-color-purple-500, #b16ee0)))}.toggle .toggle-inner{margin:1px;width:14px;height:14px;border-radius:50%;background-color:var(--hmc-color-content-inverse, var(--hmc-color-gray-white, #fff));transition:all 200ms linear;transform:translateX(0)}";

const HmcToggle$1 = /*@__PURE__*/ proxyCustomElement(class HmcToggle extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.changed = createEvent(this, "changed", 7);
    this.onClick = (e) => {
      e.stopPropagation();
      this.isChecked = !this.isChecked;
    };
    this._focused = false;
    this.label = undefined;
    this.isChecked = false;
    this.isDisabled = false;
    this.isFullWidth = false;
    this.size = 'md';
    this.name = undefined;
    this.value = 'on';
  }
  checkedChanged(isChecked) {
    this.changed.emit({
      checked: isChecked,
    });
  }
  setFocus() {
    this._focused = true;
    if (this.focusEl) {
      this.focusEl.focus();
    }
  }
  render() {
    const { isDisabled, isChecked, label, isFullWidth, size, name, value, _focused, } = this;
    const containerClass = {
      'container': true,
      [size]: true
    };
    const toggleClass = {
      toggle: true,
      disabled: isDisabled,
      checked: isChecked,
      focused: _focused,
    };
    const labelClass = {
      label: true,
      disabled: isDisabled,
    };
    renderHiddenInput(this.el, name, isDisabled, isChecked ? value : '');
    return (h(Host, { onFocusin: () => this.setFocus(), class: {
        'disabled': isDisabled,
        'full-width': isFullWidth,
      }, "aria-checked": `${isChecked}`, role: "switch", tabindex: isDisabled ? -1 : 0 }, h("div", { class: containerClass }, label && (h("label", { htmlFor: "hmc-toggle", class: labelClass }, label)), h("div", { onClick: this.onClick, class: toggleClass }, h("div", { class: "toggle-inner" })), h("input", { type: "checkbox", role: "switch", "aria-checked": `${isChecked}`, disabled: isDisabled, id: 'hmc-toggle', tabindex: "-1", onClick: e => {
        this.onClick(e);
      }, onBlur: () => {
        this._focused = false;
      }, ref: el => {
        this.focusEl = el;
      } }))));
  }
  get el() { return this; }
  static get watchers() { return {
    "isChecked": ["checkedChanged"]
  }; }
  static get style() { return toggleCss; }
}, [1, "hmc-toggle", {
    "label": [1],
    "isChecked": [1028, "checked"],
    "isDisabled": [4, "disabled"],
    "isFullWidth": [4, "full-width"],
    "size": [1],
    "name": [1],
    "value": [8],
    "_focused": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["hmc-toggle"];
  components.forEach(tagName => { switch (tagName) {
    case "hmc-toggle":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, HmcToggle$1);
      }
      break;
  } });
}

const HmcToggle = HmcToggle$1;
const defineCustomElement = defineCustomElement$1;

export { HmcToggle, defineCustomElement };
