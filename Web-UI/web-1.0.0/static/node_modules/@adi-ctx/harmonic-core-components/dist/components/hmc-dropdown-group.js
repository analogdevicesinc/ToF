import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';

const dropdownGroupCss = ":host{font-family:var(--font-family-body, \"Inter\", sans-serif);width:100%}.group{display:flex;flex-direction:column;gap:2px;border-radius:8px}.group.sm .title{padding-bottom:4px;padding-right:4px;padding-left:4px}.group.sm .divider{margin:0 4px}.group.xs .title{padding-bottom:4px;padding-right:4px;padding-left:4px}.group.xs .divider{margin:0 4px}.group .title{padding-bottom:4px;padding-right:8px;padding-left:8px;height:16px;overflow:hidden;color:var(--hmc-color-content-subtle, var(--hmc-color-gray-700, #5e6773));font-feature-settings:\"liga\" off, \"clig\" off;text-overflow:ellipsis;white-space:nowrap;font-family:var(--font-family-body, \"Inter\", sans-serif);font-size:var(--font-size-small, 12px);font-weight:500;letter-spacing:1px;text-transform:uppercase}.group .divider{height:1px;background-color:var(--hmc-color-layout-divider-default, var(--hmc-color-gray-300, #b7bbc3));margin-right:8px;margin-left:8px;margin-bottom:4px}";

const HmcDropdownGroup$1 = /*@__PURE__*/ proxyCustomElement(class HmcDropdownGroup extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.groupTitle = undefined;
    this.size = 'md';
    this.isFirstElement = null;
  }
  connectedCallback() {
    this.isFirstElement = !this.el.previousElementSibling;
  }
  render() {
    const { size } = this;
    const classes = {
      group: true,
      [size]: true,
    };
    return (h(Host, { role: "group" }, h("div", { class: classes, id: this.groupTitle ? 'group-title' : undefined }, !this.isFirstElement && h("div", { class: "divider" }), this.groupTitle && h("div", { class: "title" }, this.groupTitle), h("slot", null))));
  }
  get el() { return this; }
  static get style() { return dropdownGroupCss; }
}, [1, "hmc-dropdown-group", {
    "groupTitle": [1, "group-title"],
    "size": [1],
    "isFirstElement": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["hmc-dropdown-group"];
  components.forEach(tagName => { switch (tagName) {
    case "hmc-dropdown-group":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, HmcDropdownGroup$1);
      }
      break;
  } });
}

const HmcDropdownGroup = HmcDropdownGroup$1;
const defineCustomElement = defineCustomElement$1;

export { HmcDropdownGroup, defineCustomElement };
