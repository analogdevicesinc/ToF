import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';

const tabPanelCss = ":host{visibility:hidden;display:none;contain:layout;overflow-y:hidden;width:100%}:host(.selected){visibility:visible;display:flex}:host(:focus-visible){outline-offset:2px;outline:2px solid var(--hmc-color-interactive-focus, var(--hmc-color-system-highlight-default, var(--hmc-color-purple-500, #b16ee0)))}";

const PANEL_ID = 'hmc-panel-id-';
const HmcTabPanel$1 = /*@__PURE__*/ proxyCustomElement(class HmcTabPanel extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.name = undefined;
    this.isSelected = false;
  }
  handleKeyEvent(ev) {
    ev.stopPropagation();
  }
  componentWillLoad() {
    this._id = this.el.id.length > 0 ? this.el.id : PANEL_ID + panelCount++;
  }
  render() {
    const { isSelected } = this;
    const classList = {
      'title-container': true,
      'selected': isSelected,
    };
    return (h(Host, { role: "tabpanel", tabindex: "0", class: classList, id: this._id }, h("slot", null)));
  }
  get el() { return this; }
  static get style() { return tabPanelCss; }
}, [1, "hmc-tab-panel", {
    "name": [1],
    "isSelected": [4, "selected"]
  }, [[0, "keydown", "handleKeyEvent"]]]);
let panelCount = 0;
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["hmc-tab-panel"];
  components.forEach(tagName => { switch (tagName) {
    case "hmc-tab-panel":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, HmcTabPanel$1);
      }
      break;
  } });
}

const HmcTabPanel = HmcTabPanel$1;
const defineCustomElement = defineCustomElement$1;

export { HmcTabPanel, defineCustomElement };
