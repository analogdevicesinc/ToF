import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$1 } from './spinner.js';

const buttonCss = ":host(.button-disabled){cursor:no-drop;pointer-events:none}:host(.full-width){width:100%}:host(.full-width) button,:host(.full-width) a{width:100%}:host{display:flex}:host button,:host a{position:relative;border:none;border-radius:4px;box-sizing:border-box;display:flex;align-items:center;justify-content:center;font-style:normal;font-stretch:normal;font-family:var(--font-family-body, \"Inter\", sans-serif);font-size:var(--font-size-default, 14px);font-weight:500;line-height:20px;white-space:nowrap;cursor:pointer;user-select:none;outline:none;text-decoration:none}:host button:focus-visible,:host a:focus-visible{outline-offset:2px;outline:2px solid var(--hmc-color-interactive-focus, var(--hmc-color-system-highlight-default, var(--hmc-color-purple-500, #b16ee0)))}:host .xs,:host .sm{padding:4px}:host .xs{height:24px;font-size:var(--font-size-small, 12px)}:host .xs .text-wrapper{padding:0px 4px}:host .sm{height:32px}:host .sm .text-wrapper{padding:2px 4px}:host .md{height:40px;padding:8px}:host .md .text-wrapper{padding:2px 8px}:host .primary{background-color:var(--hmc-color-interactive-primary-idle, var(--hmc-color-system-primary-default, var(--hmc-color-blue-700, #0067b9)));color:var(--hmc-color-content-inverse, var(--hmc-color-gray-white, #fff))}:host .primary.disabled{background-color:var(--hmc-color-interactive-primary-disabled, var(--hmc-color-system-primary-subtle, var(--hmc-color-blue-300, #92befc)))}:host .primary.processing{background-color:var(--hmc-color-interactive-primary-disabled, var(--hmc-color-system-primary-subtle, var(--hmc-color-blue-300, #92befc)));color:var(--hmc-color-interactive-primary-idle, var(--hmc-color-system-primary-default, var(--hmc-color-blue-700, #0067b9)))}:host .primary:hover{background-color:var(--hmc-color-interactive-primary-hover, var(--hmc-color-system-primary-strong, var(--hmc-color-blue-900, #00427a)))}:host .primary:active{background-color:var(--hmc-color-interactive-primary-hover, var(--hmc-color-system-primary-strong, var(--hmc-color-blue-900, #00427a)))}:host .secondary{border:solid 1px var(--hmc-color-interactive-primary-idle, var(--hmc-color-system-primary-default, var(--hmc-color-blue-700, #0067b9)));background-color:transparent;color:var(--hmc-color-interactive-primary-idle, var(--hmc-color-system-primary-default, var(--hmc-color-blue-700, #0067b9)))}:host .secondary.disabled,:host .secondary.processing{border:solid 1px var(--hmc-color-interactive-primary-disabled, var(--hmc-color-system-primary-subtle, var(--hmc-color-blue-300, #92befc)));color:var(--hmc-color-interactive-primary-disabled, var(--hmc-color-system-primary-subtle, var(--hmc-color-blue-300, #92befc)))}:host .secondary:hover,:host .secondary:active{border:solid 1px var(--hmc-color-interactive-primary-hover, var(--hmc-color-system-primary-strong, var(--hmc-color-blue-900, #00427a)));color:var(--hmc-color-interactive-primary-hover, var(--hmc-color-system-primary-strong, var(--hmc-color-blue-900, #00427a)))}:host .tertiary{border:solid 1px var(--hmc-color-interactive-subtle-idle, var(--hmc-color-gray-500, #848b95));background-color:transparent;color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))}:host .tertiary.disabled{border:1px solid var(--hmc-color-interactive-subtle-disabled, var(--hmc-color-gray-200, #d5d8dc));color:var(--hmc-color-content-silent, var(--hmc-color-gray-400, #9fa4ad))}:host .tertiary:hover{border:solid 1px var(--hmc-color-interactive-subtle-hover, var(--hmc-color-gray-700, #5e6773));color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))}:host .tertiary:active{border:solid 1px var(--hmc-color-interactive-subtle-hover, var(--hmc-color-gray-700, #5e6773));color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))}:host .ghost{background-color:var(--button-ghost-bg, transparent);color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))}:host .ghost.disabled{color:var(--hmc-color-content-silent, var(--hmc-color-gray-400, #9fa4ad))}:host .ghost:hover,:host .ghost:active{background-color:var(--hmc-color-interactive-silent-hover, var(--hmc-color-gray-200, #d5d8dc))}:host .inverse.primary{background-color:var(--hmc-color-content-inverse, var(--hmc-color-gray-white, #fff));color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))}:host .inverse.primary:hover,:host .inverse.primary:active{background-color:var(--hmc-color-interactive-silent-hover, var(--hmc-color-gray-200, #d5d8dc))}:host .inverse.primary:disabled{background-color:var(--hmc-color-content-silent, var(--hmc-color-gray-400, #9fa4ad));color:var(--hmc-color-content-subtle, var(--hmc-color-gray-700, #5e6773))}:host .inverse.secondary,:host .inverse.tertiary{border-color:var(--hmc-color-content-inverse, var(--hmc-color-gray-white, #fff));color:var(--hmc-color-content-inverse, var(--hmc-color-gray-white, #fff))}:host .inverse.secondary:hover,:host .inverse.secondary:active,:host .inverse.tertiary:hover,:host .inverse.tertiary:active{border-color:var(--hmc-color-interactive-silent-hover, var(--hmc-color-gray-200, #d5d8dc));color:var(--hmc-color-interactive-silent-hover, var(--hmc-color-gray-200, #d5d8dc))}:host .inverse.secondary:disabled,:host .inverse.tertiary:disabled{border-color:var(--hmc-color-content-subtle, var(--hmc-color-gray-700, #5e6773));color:var(--hmc-color-content-subtle, var(--hmc-color-gray-700, #5e6773))}:host .inverse.ghost{color:var(--hmc-color-content-inverse, var(--hmc-color-gray-white, #fff))}:host .inverse.ghost:hover,:host .inverse.ghost:active{background-color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))}:host .inverse.ghost:disabled{color:var(--hmc-color-content-subtle, var(--hmc-color-gray-700, #5e6773))}:host .content-wrapper{display:flex;align-items:center;justify-content:center}:host .spinner-wrapper{display:flex;position:absolute;left:50%;top:50%;visibility:hidden;transform:translate(-50%, -50%)}:host .icon-only .text-wrapper{display:flex}:host .icon-only.md{width:40px}:host .icon-only.sm{width:32px}:host .icon-only.xs{width:24px}:host .processing .content-wrapper{visibility:hidden}:host .processing .spinner-wrapper{visibility:visible}";

const HmcButton = /*@__PURE__*/ proxyCustomElement(class HmcButton extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this._hasIconLeft = false;
    this._hasIconRight = false;
    // Taken from Ionic Framework https://github.com/ionic-team/ionic-framework
    this.clickHandler = (ev) => {
      if (this.type === 'submit' &&
        this.el.shadowRoot &&
        !!this.el.attachShadow) {
        // this button wants to specifically submit a form
        // climb up the dom to see if we're in a <form>
        // and if so, then use JS to submit it
        const form = this.el.closest('form');
        if (form) {
          ev.preventDefault();
          const fakeButton = document.createElement('button');
          fakeButton.type = this.type;
          fakeButton.style.display = 'none';
          form.appendChild(fakeButton);
          fakeButton.click();
          fakeButton.remove();
        }
      }
    };
    this.kind = 'primary';
    this.size = 'md';
    this.isInverse = false;
    this.isDisabled = false;
    this.isProcessing = false;
    this.isIconOnly = false;
    this.isFullWidth = false;
    this.type = 'button';
    this.autofocus = false;
    this.href = undefined;
    this.rel = undefined;
    this.target = undefined;
    this.download = undefined;
  }
  render() {
    const { autofocus, download, href, isInverse, isDisabled, isIconOnly, isFullWidth, isProcessing, kind, rel, size, target, type, } = this;
    this._hasIconLeft = Boolean(this.el.querySelector('[slot="icon-left"]'));
    this._hasIconRight = Boolean(this.el.querySelector('[slot="icon-right"]'));
    const TagType = href === undefined ? 'button' : 'a';
    const attrs = TagType === 'button' ? { type } : { href, download, rel, target };
    const classList = {
      'button-disabled': isDisabled || isProcessing,
      'full-width': isFullWidth && kind !== 'ghost',
    };
    const buttonClasses = {
      'disabled': isDisabled,
      'processing': isProcessing,
      'icon-only': isIconOnly,
      'icon-left': this._hasIconLeft,
      'icon-right': this._hasIconRight,
      [size]: true,
      [kind]: true,
      'inverse': isInverse,
    };
    const content = (h("div", { class: "content-wrapper" }, h("slot", { name: "icon-left" }), h("div", { class: "text-wrapper" }, h("slot", null)), h("slot", { name: "icon-right" })));
    const spinner = (h("div", { class: "spinner-wrapper" }, h("hmc-spinner", { kind: isInverse ? 'inverse' : kind === 'ghost' ? 'tertiary' : kind, size: size === 'xs' ? 'sm' : 'md' })));
    const button = (h(TagType, Object.assign({}, attrs, { class: buttonClasses, disabled: isDisabled || isProcessing, autoFocus: autofocus, tabindex: isDisabled || isProcessing ? -1 : 0 }), content, spinner));
    return (h(Host, { onClick: this.clickHandler, class: classList }, button));
  }
  get el() { return this; }
  static get style() { return buttonCss; }
}, [1, "hmc-button", {
    "kind": [1],
    "size": [1],
    "isInverse": [4, "inverse"],
    "isDisabled": [4, "disabled"],
    "isProcessing": [4, "processing"],
    "isIconOnly": [4, "icon-only"],
    "isFullWidth": [4, "full-width"],
    "type": [1],
    "autofocus": [4],
    "href": [1],
    "rel": [1],
    "target": [1],
    "download": [1]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["hmc-button", "hmc-spinner"];
  components.forEach(tagName => { switch (tagName) {
    case "hmc-button":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, HmcButton);
      }
      break;
    case "hmc-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { HmcButton as H, defineCustomElement as d };
