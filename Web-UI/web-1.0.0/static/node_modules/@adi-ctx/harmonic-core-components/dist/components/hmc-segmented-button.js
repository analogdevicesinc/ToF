import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';

const segmentedButtonCss = ":host(.full-width){width:100%}:host{display:inline-block}.segmented-button{display:flex;align-items:center;padding:8px 8px;height:40px;background:transparent;color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820));border:solid 1px var(--hmc-color-layout-divider-default, var(--hmc-color-gray-300, #b7bbc3));border-left-color:transparent;border-right-color:transparent;box-sizing:border-box;font-family:var(--font-family-body, \"Inter\", sans-serif);font-size:var(--font-size-default, 14px);line-height:20px;white-space:nowrap;cursor:pointer;user-select:none;outline:none;position:relative;gap:8px}.segmented-button.icon-only{width:40px;display:flex;align-items:center;justify-content:center;padding:0}.segmented-button.icon-only.sm{width:32px}.segmented-button.icon-only.xs{width:24px}.segmented-button.icon-only.full-width{width:100%}.segmented-button.sm{height:32px}.segmented-button.xs{height:24px;font-size:var(--font-size-small, 12px);line-height:16px;padding:0 4px}.segmented-button.full-width{width:100%;justify-content:center}.segmented-button.first-child{border-top-left-radius:4px;border-bottom-left-radius:4px;border-left-color:var(--hmc-color-layout-divider-default, var(--hmc-color-gray-300, #b7bbc3))}.segmented-button.last-child{border-top-right-radius:4px;border-bottom-right-radius:4px;border-right-color:var(--hmc-color-layout-divider-default, var(--hmc-color-gray-300, #b7bbc3))}.segmented-button:hover{background-color:var(--hmc-color-interactive-silent-hover, var(--hmc-color-gray-200, #d5d8dc))}.segmented-button.pressed{border:solid 1px var(--hmc-color-interactive-primary-idle, var(--hmc-color-system-primary-default, var(--hmc-color-blue-700, #0067b9)));border-radius:4px;color:var(--hmc-color-interactive-primary-idle, var(--hmc-color-system-primary-default, var(--hmc-color-blue-700, #0067b9)));background-color:var(--hmc-color-system-primary-silent, var(--hmc-color-blue-100, #edf3fc))}.segmented-button.pressed:hover:not(:focus-visible){border-color:var(--hmc-color-interactive-primary-hover, var(--hmc-color-system-primary-strong, var(--hmc-color-blue-900, #00427a)));color:var(--hmc-color-interactive-primary-hover, var(--hmc-color-system-primary-strong, var(--hmc-color-blue-900, #00427a)));background-color:var(--hmc-color-system-primary-faint, var(--hmc-color-blue-200, #c6d8f6))}.segmented-button.pressed.disabled{border-color:var(--hmc-color-interactive-primary-disabled, var(--hmc-color-system-primary-subtle, var(--hmc-color-blue-300, #92befc)));color:var(--hmc-color-interactive-primary-disabled, var(--hmc-color-system-primary-subtle, var(--hmc-color-blue-300, #92befc)));background-color:var(--hmc-color-system-primary-silent, var(--hmc-color-blue-100, #edf3fc))}.segmented-button.disabled{color:var(--hmc-color-content-silent, var(--hmc-color-gray-400, #9fa4ad));cursor:no-drop;pointer-events:none}.segmented-button:focus-visible::after{content:\"\";position:absolute;top:-4px;right:-4px;bottom:-4px;left:-4px;border:2px solid var(--hmc-color-interactive-focus, var(--hmc-color-system-highlight-default, var(--hmc-color-purple-500, #b16ee0)));border-radius:6px;pointer-events:none;}:host(.hovered) .segmented-button{background-color:var(--hmc-color-interactive-silent-hover, var(--hmc-color-gray-200, #d5d8dc))}:host(.hovered) .segmented-button.pressed{border:solid 1px var(--hmc-color-interactive-primary-hover, var(--hmc-color-system-primary-strong, var(--hmc-color-blue-900, #00427a)));color:var(--hmc-color-interactive-primary-hover, var(--hmc-color-system-primary-strong, var(--hmc-color-blue-900, #00427a)));background-color:var(--hmc-color-system-primary-faint, var(--hmc-color-blue-200, #c6d8f6))}";

const HmcSegmentedButton$1 = /*@__PURE__*/ proxyCustomElement(class HmcSegmentedButton extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.segmentClicked = createEvent(this, "segmentClicked", 7);
    this.isPressed = false;
    this.isDisabled = false;
    this.isFullWidth = false;
    this.isIconOnly = false;
    this.value = '';
    this.size = 'md';
    this.isFirstElement = null;
    this.isLastElement = null;
    this.buttonTabindex = -1;
  }
  async setFocus(ev) {
    ev.stopPropagation();
    ev.preventDefault();
    this.focusEl.focus();
  }
  onClick() {
    if (!this.isDisabled) {
      this.segmentClicked.emit(this.value);
    }
  }
  connectedCallback() {
    this.isFirstElement = !this.el.previousElementSibling;
    this.isLastElement = !this.el.nextElementSibling;
  }
  render() {
    const { size, isPressed, isDisabled, isFirstElement, isFullWidth, isIconOnly, isLastElement, } = this;
    const classList = {
      'segmented-button': true,
      'disabled': isDisabled,
      'pressed': isPressed,
      [size]: true,
      'icon-only': isIconOnly,
      'first-child': isFirstElement,
      'last-child': isLastElement,
      'full-width': isFullWidth,
    };
    return (h(Host, { class: { 'full-width': isFullWidth } }, h("button", { "aria-pressed": isPressed.toString(), class: classList, disabled: isDisabled, tabindex: !isDisabled && isPressed ? '0' : '-1', onClick: () => this.onClick(), ref: focusEl => (this.focusEl = focusEl) }, h("slot", null))));
  }
  get el() { return this; }
  static get style() { return segmentedButtonCss; }
}, [1, "hmc-segmented-button", {
    "isPressed": [516, "pressed"],
    "isDisabled": [4, "disabled"],
    "isFullWidth": [1028, "full-width"],
    "isIconOnly": [4, "icon-only"],
    "value": [1],
    "size": [1],
    "isFirstElement": [32],
    "isLastElement": [32],
    "buttonTabindex": [32],
    "setFocus": [64]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["hmc-segmented-button"];
  components.forEach(tagName => { switch (tagName) {
    case "hmc-segmented-button":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, HmcSegmentedButton$1);
      }
      break;
  } });
}

const HmcSegmentedButton = HmcSegmentedButton$1;
const defineCustomElement = defineCustomElement$1;

export { HmcSegmentedButton, defineCustomElement };
