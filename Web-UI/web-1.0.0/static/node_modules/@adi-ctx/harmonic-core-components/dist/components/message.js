import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';
import { d as defineCustomElement$1 } from './icon.js';

const messageCss = ".message{width:fit-content;font-family:var(--font-family-body, \"Inter\", sans-serif);font-size:var(--font-size-small, 12px);overflow:hidden;box-sizing:border-box;line-height:16px;border-radius:4px;display:flex;align-items:center;color:var(--hmc-color-notification-info-default-text, var(--hmc-color-system-info-default, var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))))}.message hmc-icon{margin-right:4px}.message.success{color:var(--hmc-color-notification-success-default-text, var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820)))}.message.success hmc-icon{color:var(--hmc-color-notification-success-default-graphic, var(--hmc-color-system-success-default, var(--hmc-color-green-500, #2e9e6f)))}.message.warning{color:var(--hmc-color-notification-warning-default-text, var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820)))}.message.warning hmc-icon{color:var(--hmc-color-notification-warning-default-graphic, var(--hmc-color-system-warning-default, var(--hmc-color-orange-500, #e76423)))}.message.error{color:var(--hmc-color-notification-danger-default-text, var(--hmc-color-system-danger-default, var(--hmc-color-red-700, #c81a28)))}.message.error hmc-icon{color:var(--hmc-color-notification-danger-default-graphic, var(--hmc-color-system-danger-default, var(--hmc-color-red-700, #c81a28)))}.message.fullWidth{width:100%}";

/**
 * @slot - An unnamed slot is used to pass a content to the Message.
 */
const statusIconMap = {
  success: 'check-circle-s',
  warning: 'warning-s',
  error: 'error-s',
  info: 'info-s',
};
const HmcMessage = /*@__PURE__*/ proxyCustomElement(class HmcMessage extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.isFullWidth = false;
    this.status = 'info';
    this.iconName = undefined;
  }
  render() {
    const { status, isFullWidth, iconName } = this;
    const classList = {
      message: true,
      [status]: true,
      fullWidth: isFullWidth,
    };
    const icon = (iconName !== null && iconName !== void 0 ? iconName : statusIconMap[status]);
    return (h("div", { class: classList }, h("hmc-icon", { name: icon }), h("slot", null)));
  }
  static get style() { return messageCss; }
}, [1, "hmc-message", {
    "isFullWidth": [4, "full-width"],
    "status": [1],
    "iconName": [1, "icon-name"]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["hmc-message", "hmc-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "hmc-message":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, HmcMessage);
      }
      break;
    case "hmc-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { HmcMessage as H, defineCustomElement as d };
