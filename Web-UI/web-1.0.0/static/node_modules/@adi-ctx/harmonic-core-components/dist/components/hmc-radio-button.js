import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';

const radioButtonCss = ":host{display:inline-block;position:relative;box-sizing:border-box;user-select:none}:host(.radio-disabled){pointer-events:none}.container{display:flex;align-items:center;padding:4px 0}:host(:hover) .radio-button{background-color:var(--hmc-color-layout-container, var(--hmc-color-gray-white, #fff));border-color:var(--hmc-color-interactive-subtle-hover, var(--hmc-color-gray-700, #5e6773))}:host(:hover) .radio-button.checked{background-color:var(--hmc-color-interactive-primary-hover, var(--hmc-color-system-primary-strong, var(--hmc-color-blue-900, #00427a)))}.radio-button{height:16px;width:16px;display:flex;position:relative;background-color:var(--hmc-color-layout-container, var(--hmc-color-gray-white, #fff));border-radius:50%;border:solid 1px var(--hmc-color-interactive-subtle-idle, var(--hmc-color-gray-500, #848b95));box-sizing:border-box}.radio-button.checked{border-color:var(--hmc-color-interactive-primary-idle, var(--hmc-color-system-primary-default, var(--hmc-color-blue-700, #0067b9)));background-color:var(--hmc-color-interactive-primary-idle, var(--hmc-color-system-primary-default, var(--hmc-color-blue-700, #0067b9)))}.radio-button.checked.disabled{border-color:var(--hmc-color-interactive-primary-disabled, var(--hmc-color-system-primary-subtle, var(--hmc-color-blue-300, #92befc)));background-color:var(--hmc-color-interactive-primary-disabled, var(--hmc-color-system-primary-subtle, var(--hmc-color-blue-300, #92befc)))}.radio-button.checked .radio-inner{display:block}.radio-button.disabled{border-color:var(--hmc-color-interactive-subtle-disabled, var(--hmc-color-gray-200, #d5d8dc));background:none;cursor:default}.radio-inner{top:4px;left:4px;width:6px;height:6px;position:absolute;display:none;border-radius:50%;background-color:var(--hmc-color-content-inverse, var(--hmc-color-gray-white, #fff))}:host(:focus-visible){outline:none}:host(:focus-visible) .radio-button{outline-offset:2px;outline:2px solid var(--hmc-color-interactive-focus, var(--hmc-color-system-highlight-default, var(--hmc-color-purple-500, #b16ee0)))}label{position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;appearance:none;outline:none;display:flex;align-items:center;color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820));font-family:var(--font-family-body, \"Inter\", sans-serif);font-size:var(--font-size-default, 14px);line-height:1.43;padding-left:24px}label::-moz-focus-inner{border:0}label.disabled{color:var(--hmc-color-content-silent, var(--hmc-color-gray-400, #9fa4ad))}label.xs{font-size:var(--font-size-small, 12px)}label .hint{margin-left:8px}input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}";

const HmcRadioButton$1 = /*@__PURE__*/ proxyCustomElement(class HmcRadioButton extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.inputId = `hmc-rb-${radioButtonIds++}`;
    this.radioGroup = null;
    this.updateState = () => {
      if (this.radioGroup) {
        this.isChecked = this.radioGroup.value === this.value;
      }
    };
    this.onClick = () => {
      this.isChecked = this.nativeInput.checked;
    };
    this.isChecked = undefined;
    this.value = undefined;
    this.label = undefined;
    this.size = 'md';
    this.isDisabled = false;
    this.buttonTabindex = -1;
  }
  async setFocus(ev) {
    ev.stopPropagation();
    ev.preventDefault();
    this.el.focus();
  }
  async setButtonTabindex(value) {
    this.buttonTabindex = value;
  }
  connectedCallback() {
    if (this.value === undefined) {
      this.value = this.inputId;
    }
    const radioGroup = (this.radioGroup = this.el.closest('hmc-radio-group'));
    if (radioGroup) {
      this.updateState();
      radioGroup.addEventListener('radioChanged', this.updateState);
    }
    if (this.isChecked) {
      this.setButtonTabindex(0);
    }
  }
  disconnectedCallback() {
    const radioGroup = this.radioGroup;
    if (radioGroup) {
      radioGroup.removeEventListener('radioChanged', this.updateState);
      this.radioGroup = null;
    }
  }
  render() {
    const { isChecked, isDisabled, label, buttonTabindex, inputId, size, } = this;
    const labelClass = {
      label: true,
      disabled: isDisabled,
      [size]: true,
    };
    const radioClassList = {
      'radio-button': true,
      'disabled': isDisabled,
      'checked': isChecked,
    };
    return (h(Host, { onClick: this.onClick, role: "radio", tabindex: buttonTabindex, class: { 'radio-disabled': isDisabled } }, h("div", { class: "container" }, h("div", { class: radioClassList }, h("div", { class: "radio-inner" })), h("label", { htmlFor: inputId, class: labelClass }, label, h("span", { class: "hint" }, h("slot", { name: "hint" })))), h("input", { type: "radio", checked: isChecked, disabled: isDisabled, tabindex: "-1", id: inputId, ref: nativeEl => (this.nativeInput = nativeEl) })));
  }
  get el() { return this; }
  static get style() { return radioButtonCss; }
}, [1, "hmc-radio-button", {
    "isChecked": [4, "checked"],
    "value": [1025],
    "label": [1],
    "size": [1],
    "isDisabled": [4, "disabled"],
    "buttonTabindex": [32],
    "setFocus": [64],
    "setButtonTabindex": [64]
  }]);
let radioButtonIds = 0;
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["hmc-radio-button"];
  components.forEach(tagName => { switch (tagName) {
    case "hmc-radio-button":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, HmcRadioButton$1);
      }
      break;
  } });
}

const HmcRadioButton = HmcRadioButton$1;
const defineCustomElement = defineCustomElement$1;

export { HmcRadioButton, defineCustomElement };
