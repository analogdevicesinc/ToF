import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';

const navLinkCss = ".link{font-family:var(--font-family-body, \"Inter\", sans-serif);font-size:var(--font-size-default, 14px);line-height:20px;font-weight:600;color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820));text-decoration:none;display:flex;align-items:center;justify-content:center;gap:8px;box-sizing:border-box;height:40px;padding:8px;border-radius:4px}.link:hover{background-color:var(--hmc-color-interactive-silent-hover, var(--hmc-color-gray-200, #d5d8dc))}.link:focus-visible{outline-offset:2px;outline:2px solid var(--hmc-color-interactive-focus, var(--hmc-color-system-highlight-default, var(--hmc-color-purple-500, #b16ee0)))}.link.active{color:var(--hmc-color-interactive-primary-idle, var(--hmc-color-system-primary-default, var(--hmc-color-blue-700, #0067b9)));background-color:var(--hmc-color-system-primary-silent, var(--hmc-color-blue-100, #edf3fc))}.link.active:hover{color:var(--hmc-color-interactive-primary-hover, var(--hmc-color-system-primary-strong, var(--hmc-color-blue-900, #00427a)));background-color:var(--hmc-color-system-primary-faint, var(--hmc-color-blue-200, #c6d8f6))}.link.disabled{pointer-events:none;color:var(--hmc-color-content-silent, var(--hmc-color-gray-400, #9fa4ad));background-color:var(--hmc-color-interactive-subtle-disabled, var(--hmc-color-gray-200, #d5d8dc))}.link.disabled.active{color:var(--hmc-color-interactive-primary-disabled, var(--hmc-color-system-primary-subtle, var(--hmc-color-blue-300, #92befc)));background-color:var(--hmc-color-system-primary-silent, var(--hmc-color-blue-100, #edf3fc))}.link.sm{height:32px;gap:4px}.link.icon-only{padding:0}.link.icon-only.md{width:40px}.link.icon-only.sm{width:32px}";

const HmcNavLink$1 = /*@__PURE__*/ proxyCustomElement(class HmcNavLink extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.linkClick = createEvent(this, "linkClick", 7);
    this.isDisabled = false;
    this.href = '';
    this.isIconOnly = false;
    this.linkActive = false;
    this.size = 'md';
    this.rel = undefined;
    this.target = undefined;
    this.download = undefined;
  }
  handleClick(event) {
    if (this.linkClick.emit().defaultPrevented) {
      event.preventDefault();
    }
  }
  render() {
    const { isDisabled, download, href, isIconOnly, linkActive, rel, size, target, } = this;
    const attrs = { download, href, rel, target };
    const classes = {
      'link': true,
      'active': linkActive,
      'disabled': isDisabled,
      'icon-only': isIconOnly,
      [size]: true,
    };
    return (h(Host, { role: "listitem" }, h("a", Object.assign({}, attrs, { class: classes, tabindex: isDisabled ? -1 : 0, onClick: e => this.handleClick(e) }), h("slot", { name: "icon" }), h("slot", null))));
  }
  get el() { return this; }
  static get style() { return navLinkCss; }
}, [1, "hmc-nav-link", {
    "isDisabled": [4, "disabled"],
    "href": [1],
    "isIconOnly": [4, "icon-only"],
    "linkActive": [4, "link-active"],
    "size": [1],
    "rel": [1],
    "target": [1],
    "download": [1]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["hmc-nav-link"];
  components.forEach(tagName => { switch (tagName) {
    case "hmc-nav-link":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, HmcNavLink$1);
      }
      break;
  } });
}

const HmcNavLink = HmcNavLink$1;
const defineCustomElement = defineCustomElement$1;

export { HmcNavLink, defineCustomElement };
