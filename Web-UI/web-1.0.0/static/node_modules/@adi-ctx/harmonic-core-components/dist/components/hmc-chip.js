import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$2 } from './icon.js';

const chipCss = ":host(.chip-disabled){cursor:no-drop;pointer-events:none}:host{display:flex}:host button{border-radius:32px;position:relative;border:none;box-sizing:border-box;display:flex;align-items:center;justify-content:center;font-style:normal;font-stretch:normal;font-family:var(--font-family-body, \"Inter\", sans-serif);font-size:var(--font-size-default, 14px);font-weight:500;line-height:20px;white-space:nowrap;cursor:pointer;user-select:none;outline:none;text-decoration:none;border:solid 1px var(--hmc-color-interactive-subtle-idle, var(--hmc-color-gray-500, #848b95));background:transparent;color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))}:host button.disabled{color:var(--hmc-color-content-silent, var(--hmc-color-gray-400, #9fa4ad));border:solid 1px var(--hmc-color-interactive-subtle-disabled, var(--hmc-color-gray-200, #d5d8dc))}:host button:hover,:host button:active{border:solid 1px var(--hmc-color-interactive-subtle-hover, var(--hmc-color-gray-700, #5e6773));background-color:var(--hmc-color-interactive-silent-hover, var(--hmc-color-gray-200, #d5d8dc));color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))}:host button.selected{border:solid 1px var(--hmc-color-interactive-primary-idle, var(--hmc-color-system-primary-default, var(--hmc-color-blue-700, #0067b9)));background-color:var(--hmc-color-system-primary-silent, var(--hmc-color-blue-100, #edf3fc));color:var(--hmc-color-interactive-primary-idle, var(--hmc-color-system-primary-default, var(--hmc-color-blue-700, #0067b9)))}:host button.selected.disabled{color:var(--hmc-color-interactive-primary-disabled, var(--hmc-color-system-primary-subtle, var(--hmc-color-blue-300, #92befc)));background-color:var(--hmc-color-system-primary-silent, var(--hmc-color-blue-100, #edf3fc));border:solid 1px var(--hmc-color-interactive-primary-disabled, var(--hmc-color-system-primary-subtle, var(--hmc-color-blue-300, #92befc)))}:host button.selected:hover,:host button.selected:active{border:solid 1px var(--hmc-color-interactive-primary-hover, var(--hmc-color-system-primary-strong, var(--hmc-color-blue-900, #00427a)));background-color:var(--hmc-color-system-primary-faint, var(--hmc-color-blue-200, #c6d8f6));color:var(--hmc-color-interactive-primary-hover, var(--hmc-color-system-primary-strong, var(--hmc-color-blue-900, #00427a)))}:host button:focus-visible{outline-offset:2px;outline:2px solid var(--hmc-color-interactive-focus, var(--hmc-color-system-highlight-default, var(--hmc-color-purple-500, #b16ee0)))}:host .xs{height:24px;padding:4px;font-size:var(--font-size-small, 12px)}:host .xs .text-wrapper{padding:0px 4px}:host .sm{height:32px;padding:4px 6px}:host .sm .text-wrapper{padding:2px 4px}:host .md{height:40px;padding:8px}:host .md .text-wrapper{padding:2px 8px}.content-wrapper{display:flex;align-items:center;justify-content:center}";

const HmcChip$1 = /*@__PURE__*/ proxyCustomElement(class HmcChip extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.hmcChange = createEvent(this, "hmcChange", 7);
    this.clickHandler = () => {
      this.isSelected = !this.isSelected;
      this.hmcChange.emit({ selected: this.isSelected });
    };
    this.size = 'md';
    this.isDisabled = false;
    this.autofocus = false;
    this.hasCheckmark = true;
    this.isSelected = false;
  }
  render() {
    const { autofocus, hasCheckmark, isDisabled, isSelected, size } = this;
    const classList = {
      'chip-disabled': isDisabled,
      'chip-selected': isSelected,
    };
    const chipClasses = {
      disabled: isDisabled,
      [size]: true,
      selected: isSelected,
    };
    const content = (h("div", { class: "content-wrapper" }, hasCheckmark && isSelected && (h("hmc-icon", { name: `check-${size === 'xs' ? 's' : 'm'}` })), h("slot", { name: "icon" }), h("div", { class: "text-wrapper" }, h("slot", null))));
    const chip = (h("button", { "aria-pressed": isSelected.toString(), class: chipClasses, onClick: () => this.clickHandler(), disabled: isDisabled, autoFocus: autofocus }, content));
    return h(Host, { class: classList }, chip);
  }
  get el() { return this; }
  static get style() { return chipCss; }
}, [1, "hmc-chip", {
    "size": [1],
    "isDisabled": [4, "disabled"],
    "autofocus": [4],
    "hasCheckmark": [4, "checkmark"],
    "isSelected": [1540, "selected"]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["hmc-chip", "hmc-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "hmc-chip":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, HmcChip$1);
      }
      break;
    case "hmc-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const HmcChip = HmcChip$1;
const defineCustomElement = defineCustomElement$1;

export { HmcChip, defineCustomElement };
