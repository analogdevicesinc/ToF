'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-d9134559.js');

const tabGroupCss = ":host{width:100%}.tabs-container{border-bottom:1px solid var(--hmc-color-layout-divider-default, var(--hmc-color-gray-300, #b7bbc3))}slot{display:flex;justify-content:start;position:relative;bottom:-1px;gap:4px}";

const HmcTabGroup = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.tabSelected = index.createEvent(this, "tabSelected", 7);
    this.activeTab = undefined;
  }
  tabClickedHandler(event) {
    const target = event.target;
    this.setActiveItem(target.closest('hmc-tab'));
  }
  onKeydown(ev) {
    const tabs = this.tabs.filter(tab => !tab.isDisabled);
    // Only move the radio if the current focus is in the radio group
    if (ev.target && tabs.includes(ev.target)) {
      const index = tabs.findIndex(tab => tab === ev.target);
      let next;
      // If hitting arrow down or arrow right, move to the next radio
      // If we're on the last radio, move to the first radio
      if (['ArrowDown', 'ArrowRight'].includes(ev.code)) {
        next = index === tabs.length - 1 ? tabs[0] : tabs[index + 1];
      }
      // If hitting arrow up or arrow left, move to the previous radio
      // If we're on the first radio, move to the last radio
      if (['ArrowUp', 'ArrowLeft'].includes(ev.code)) {
        next = index === 0 ? tabs[tabs.length - 1] : tabs[index - 1];
      }
      if (next && tabs.includes(next)) {
        next.focus();
        this.setActiveItem(next);
      }
    }
  }
  get panels() {
    var _a;
    return Array.from(((_a = this.el) === null || _a === void 0 ? void 0 : _a.querySelectorAll('hmc-tab-panel')) || []);
  }
  get tabs() {
    var _a;
    return Array.from(((_a = this.el) === null || _a === void 0 ? void 0 : _a.querySelectorAll('hmc-tab')) || []);
  }
  componentWillLoad() {
    const defaultTab = this.getActiveTab() || this.tabs[0];
    if (defaultTab) {
      this.setActiveItem(defaultTab);
    }
  }
  linkTabsToPanels() {
    this.tabs.forEach(tab => {
      const panel = this.panels.find(p => p.name === tab.panel);
      tab.setAttribute('aria-controls', panel.id);
    });
  }
  render() {
    return (index.h(index.Host, null, index.h("div", { class: "tabs-container", role: "tablist" }, index.h("slot", null)), index.h("div", { class: "tab-panels" }, index.h("slot", { name: "panel" }))));
  }
  getActiveTab() {
    return this.tabs.find(el => el.isSelected);
  }
  setActiveItem(tab) {
    if (tab !== this.activeTab && !tab.isDisabled) {
      this.tabs.forEach(t => {
        t.isSelected = t === tab;
      });
      this.panels.forEach(p => {
        p.isSelected = p.name === tab.panel;
      });
      this.activeTab = tab;
    }
    this.tabSelected.emit(tab.panel);
  }
  get el() { return index.getElement(this); }
};
HmcTabGroup.style = tabGroupCss;

exports.hmc_tab_group = HmcTabGroup;
