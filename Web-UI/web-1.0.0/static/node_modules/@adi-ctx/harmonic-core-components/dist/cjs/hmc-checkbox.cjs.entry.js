'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-d9134559.js');
const utils = require('./utils-0762db48.js');
const checkM = require('./check-m-47f411ee.js');

const checkboxCss = ":host{display:inline-block;position:relative;box-sizing:border-box;user-select:none}:host(.disabled),:host(.readonly){pointer-events:none}.container{display:flex;align-items:center;height:24px}.container label{color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820));font-family:var(--font-family-body, \"Inter\", sans-serif);font-size:var(--font-size-default, 14px);padding-left:24px;line-height:20px;color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))}.container.disabled label{color:var(--hmc-color-content-silent, var(--hmc-color-gray-400, #9fa4ad))}.container.xs label{font-size:var(--font-size-small, 12px);line-height:16px}.checkbox{display:flex;justify-content:center;align-items:center;border:1px solid var(--hmc-color-interactive-subtle-idle, var(--hmc-color-gray-500, #848b95));background-color:var(--hmc-color-layout-container, var(--hmc-color-gray-white, #fff));width:16px;height:16px;border-radius:4px;box-sizing:border-box;cursor:pointer}.checkbox.checked{border-color:var(--hmc-color-interactive-primary-idle, var(--hmc-color-system-primary-default, var(--hmc-color-blue-700, #0067b9)));background-color:var(--hmc-color-interactive-primary-idle, var(--hmc-color-system-primary-default, var(--hmc-color-blue-700, #0067b9)))}.checkbox.checked.disabled{border-color:var(--hmc-color-interactive-primary-disabled, var(--hmc-color-system-primary-subtle, var(--hmc-color-blue-300, #92befc)));background-color:var(--hmc-color-interactive-primary-disabled, var(--hmc-color-system-primary-subtle, var(--hmc-color-blue-300, #92befc)))}.checkbox.disabled{background-color:var(--hmc-color-layout-container, var(--hmc-color-gray-white, #fff));cursor:default}:host(:hover) .checkbox{border-color:var(--hmc-color-interactive-subtle-hover, var(--hmc-color-gray-700, #5e6773))}:host(:hover) .checkbox.checked{background-color:var(--hmc-color-interactive-primary-hover, var(--hmc-color-system-primary-strong, var(--hmc-color-blue-900, #00427a)))}:host(:focus-visible){outline:none}:host(:focus-visible) .checkbox{outline-offset:2px;outline:2px solid var(--hmc-color-interactive-focus, var(--hmc-color-system-highlight-default, var(--hmc-color-purple-500, #b16ee0)))}input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}label{position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;appearance:none;outline:none;display:flex;align-items:center}label::-moz-focus-inner{border:0}.checkmark{display:flex;justify-content:center;align-items:center;width:16px;color:var(--hmc-color-content-inverse, var(--hmc-color-gray-white, #fff))}.transparent{color:transparent}";

const HmcCheckbox = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.changed = index.createEvent(this, "changed", 7);
    this.onClick = (ev) => {
      ev.preventDefault();
      this.setFocus();
      this.isChecked = !this.isChecked;
      this.changed.emit({ checked: this.isChecked });
    };
    this.label = undefined;
    this.isChecked = false;
    this.isDisabled = false;
    this.isReadonly = false;
    this.size = 'md';
    this.name = undefined;
    this.value = 'on';
  }
  setFocus() {
    if (this.focusEl) {
      this.focusEl.focus();
    }
  }
  render() {
    const { isDisabled, isChecked, isReadonly, label, size, name, value, } = this;
    utils.renderHiddenInput(this.el, name, isDisabled, this.isChecked ? this.value : '');
    const containerClass = {
      container: true,
      disabled: isDisabled,
      [size]: true,
    };
    const checkboxClass = {
      checkbox: true,
      disabled: isDisabled,
      checked: isChecked,
    };
    const checkmarkClass = {
      checkmark: true,
      transparent: !isChecked,
    };
    return (index.h(index.Host, { onClick: this.onClick, class: { disabled: isDisabled, readonly: isReadonly }, tabindex: isDisabled ? -1 : 0 }, index.h("div", { class: containerClass }, index.h("div", { class: checkboxClass }, index.h("div", { class: checkmarkClass, innerHTML: checkM.Checkmark })), index.h("label", { htmlFor: "hmc-checkbox" }, label), index.h("input", { type: "checkbox", "aria-checked": `${isChecked}`, disabled: isDisabled, id: 'hmc-checkbox', tabindex: "-1", ref: focusEl => (this.focusEl = focusEl) }))));
  }
  get el() { return index.getElement(this); }
};
HmcCheckbox.style = checkboxCss;

exports.hmc_checkbox = HmcCheckbox;
