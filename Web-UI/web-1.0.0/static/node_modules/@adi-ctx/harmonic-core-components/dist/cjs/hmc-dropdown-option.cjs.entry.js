'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-d9134559.js');

const dropdownOptionCss = ".option{position:relative;box-sizing:border-box;width:auto;max-width:100%;padding:8px;display:flex;align-items:center;gap:4px;border:2px solid transparent;border-radius:4px;font-size:var(--font-size-default, 14px);font-family:var(--font-family-body, \"Inter\", sans-serif);font-weight:400;color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820));background-color:var(--hmc-color-layout-container, var(--hmc-color-gray-white, #fff))}.option:hover{cursor:pointer;background-color:var(--hmc-color-interactive-silent-hover, var(--hmc-color-gray-200, #d5d8dc))}.option:hover hmc-checkbox{--hmc-color-layout-container:var(--hmc-color-interactive-silent-hover);--hmc-color-interactive-subtle-idle:var(\n    --hmc-color-interactive-subtle-hover\n  );--hmc-color-interactive-primary-idle:var(\n    --hmc-color-interactive-primary-hover\n  )}.option:not(.action).selected:hover{background-color:var(--hmc-color-system-primary-faint, var(--hmc-color-blue-200, #c6d8f6))}.option:not(.action).selected:hover .checkmark{color:var(--hmc-color-interactive-primary-hover, var(--hmc-color-system-primary-strong, var(--hmc-color-blue-900, #00427a)))}.option.sm{padding:4px}.option.xs{font-size:var(--font-size-small, 12px);line-height:16px;padding:4px}.option:not(.multiple).xs .inner-option .content .title{padding:0px}.option .inner-option{width:100%;display:flex;align-items:flex-start;flex-shrink:0;flex-grow:1}.option .inner-option .content{display:flex;flex-direction:column;align-items:flex-start;flex:1 0 0;word-break:break-word;margin-right:4px}.option .inner-option .content .title{flex:1 0 0;display:flex;padding:3px 0px;align-items:center;gap:10px;align-self:stretch}.option .inner-option .content .caption{flex:1 0 0;display:flex;align-items:center;gap:10px;align-self:stretch;font-size:var(--font-size-small, 12px);font-family:var(--font-family-body, \"Inter\", sans-serif);font-weight:400;color:var(--hmc-color-content-subtle, var(--hmc-color-gray-700, #5e6773));line-height:16px}.option .inner-option hmc-checkbox{margin-right:4px}.option .inner-option .action-slot{display:flex;flex-shrink:0}.option .inner-option .action-slot slot[name=left-icon]::slotted(*){margin-right:4px}.option .inner-option .action-slot .value{display:flex;flex-direction:column;justify-content:center;align-items:flex-end;gap:10px;flex-shrink:0;color:var(--hmc-color-content-subtle, var(--hmc-color-gray-700, #5e6773));text-align:right}.option.multiple.xs .inner-option .content .title{padding:4px 0px}.option.multiple.xs .inner-option .action-slot slot[name=right-icon]::slotted(*){padding:4px 0px}.option:not(.xs).action .inner-option .action-slot slot[name=right-value]::slotted(*){padding:3px 0px}:host(:focus-visible){outline:none}:host(:focus-visible) .option{border:2px solid var(--hmc-color-interactive-focus, var(--hmc-color-system-highlight-default, var(--hmc-color-purple-500, #b16ee0)));border-radius:4px}.disabled{cursor:no-drop;pointer-events:none;background-color:var(--hmc-color-layout-container, var(--hmc-color-gray-white, #fff));color:var(--hmc-color-content-silent, var(--hmc-color-gray-400, #9fa4ad))}.disabled hmc-checkbox{background:transparent}:not(.action).selected{background-color:var(--hmc-color-system-primary-silent, var(--hmc-color-blue-100, #edf3fc))}:not(.action).selected .checkmark{color:var(--hmc-color-interactive-primary-idle, var(--hmc-color-system-primary-default, var(--hmc-color-blue-700, #0067b9)))}.disabled .checkmark{color:var(--hmc-color-interactive-primary-disabled, var(--hmc-color-system-primary-subtle, var(--hmc-color-blue-300, #92befc)))}";

const HmcDropdownOption = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.selection = index.createEvent(this, "hmcDropdownSelection", 7);
    this.handleItemSelect = (event) => {
      event.stopPropagation();
      if (this.isDisabled) {
        return;
      }
      this.selection.emit({ value: this.value, selected: !this.isSelected });
    };
    this.value = undefined;
    this.isMultiple = false;
    this.isAction = false;
    this.isSelected = false;
    this.isDisabled = false;
    this.size = 'md';
    this.role = 'option';
  }
  connectedCallback() {
    this.setRoleBasedOnAncestor();
  }
  setRoleBasedOnAncestor() {
    let parentElement = this.el.parentElement;
    while (parentElement) {
      if (parentElement.tagName.toLowerCase() === 'hmc-dropdown-menu') {
        this.role = 'menuitem';
        break;
      }
      else if (parentElement.tagName.toLowerCase() === 'hmc-dropdown') {
        this.role = 'option';
        break;
      }
      parentElement = parentElement.parentElement;
    }
  }
  renderSingleSelectOption() {
    return (index.h("div", { class: "inner-option" }, index.h("div", { class: "action-slot" }, index.h("slot", { name: "left-icon" })), index.h("div", { class: "content" }, index.h("div", { class: "title" }, index.h("slot", null)), index.h("div", { class: "caption" }, index.h("slot", { name: "caption" }))), this.isSelected && (index.h("hmc-icon", { class: "checkmark action-slot", name: this.size === 'xs' ? 'check-s' : 'check-m' }))));
  }
  renderMultiSelectOption() {
    return (index.h("div", { class: "inner-option" }, index.h("hmc-checkbox", { size: this.size === 'xs' ? 'xs' : 'md', class: "action-slot", isChecked: this.isSelected, isDisabled: this.isDisabled, isReadonly: true }), index.h("div", { class: "content" }, index.h("div", { class: "title" }, index.h("slot", null)), index.h("div", { class: "caption" }, index.h("slot", { name: "caption" }))), index.h("div", { class: "action-slot" }, index.h("slot", { name: "right-icon" }))));
  }
  renderActionOption() {
    return (index.h("div", { class: "inner-option" }, index.h("div", { class: "action-slot" }, index.h("slot", { name: "left-icon" }), index.h("div", { class: "value" }, index.h("slot", { name: "left-value" }))), index.h("div", { class: "content" }, index.h("div", { class: "title" }, index.h("slot", null)), index.h("div", { class: "caption" }, index.h("slot", { name: "caption" }))), index.h("div", { class: "action-slot" }, index.h("slot", { name: "right-icon" }), index.h("div", { class: "value" }, index.h("slot", { name: "right-value" })))));
  }
  renderSelectionIndicator() {
    if (this.isMultiple) {
      return this.renderMultiSelectOption();
    }
    else if (this.isAction) {
      return this.renderActionOption();
    }
    else {
      return this.renderSingleSelectOption();
    }
  }
  componentDidLoad() {
    if (this.isMultiple) {
      this.el.shadowRoot.querySelector('hmc-checkbox').tabIndex = -1;
    }
  }
  render() {
    const { isSelected, isMultiple, isAction, isDisabled, size } = this;
    // Used for title text where label is truncated
    const optionLabel = this.el.innerText.trim();
    const classes = {
      'option': true,
      'selected': isSelected,
      'multiple': isMultiple,
      'action': isAction,
      'disabled': isDisabled,
      'last-child': this.isLastChild(),
      [size]: true,
    };
    return (index.h(index.Host, { onClick: this.handleItemSelect, role: this.role, "aria-selected": isSelected, "aria-disabled": isDisabled, tabIndex: isDisabled ? -1 : 0, title: optionLabel }, index.h("div", { class: classes }, this.renderSelectionIndicator())));
  }
  isLastChild() {
    // Last element in the list is followed by the hidden input for form submission
    return (!this.el.nextElementSibling ||
      this.el.nextElementSibling.classList.contains('aux-input'));
  }
  get el() { return index.getElement(this); }
};
HmcDropdownOption.style = dropdownOptionCss;

exports.hmc_dropdown_option = HmcDropdownOption;
