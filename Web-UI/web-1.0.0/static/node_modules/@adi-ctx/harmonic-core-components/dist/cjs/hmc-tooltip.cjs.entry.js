'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-d9134559.js');
const popperLite = require('./popper-lite-9b63da5d.js');

const tooltipCss = ":host{box-sizing:border-box;font-family:Inter, sans-serif}.wrapper{position:relative;display:none;z-index:var(--z-index-popover, 9100)}.wrapper.show{display:block}.wrapper .tooltip{position:absolute;max-width:var(--tooltip-width, 200px);border-radius:4px;background-color:var(--hmc-color-notification-info-strong-background, var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820)));padding:var(--tooltip-padding, 8px 12px);font-family:var(--font-family-body, \"Inter\", sans-serif);font-size:var(--font-size-default, 14px);line-height:20px;text-align:left;font-weight:normal;word-wrap:break-word;color:var(--hmc-color-notification-info-strong-text, var(--hmc-color-content-inverse, var(--hmc-color-gray-white, #fff)));width:max-content}.wrapper .tooltip.xs{font-size:var(--font-size-small, 12px);line-height:16px}.wrapper .tooltip.xs .title{font-size:var(--font-size-small, 12px);line-height:20px}.wrapper .tooltip.toggle{padding:var(--tooltip-padding, 10px 16px 16px)}.wrapper .tooltip .title{font-weight:700;font-size:var(--font-size-medium, 16px);line-height:24px}.wrapper.fixed-width .tooltip{width:var(--tooltip-width, 200px)}#arrow,#arrow::before{position:absolute;width:8px;height:8px;z-index:-1}#arrow::before{content:\"\";transform:rotate(45deg);background-color:var(--hmc-color-notification-info-strong-background, var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820)));border-radius:1px}.wrapper[data-popper-placement=top]>.tooltip,.wrapper[data-popper-placement=top]>#arrow,.wrapper[data-popper-placement=bottom]>.tooltip,.wrapper[data-popper-placement=bottom]>#arrow{left:50%;transform:translateX(-50%)}.wrapper[data-popper-placement=top-start]>.tooltip,.wrapper[data-popper-placement=bottom-start]>.tooltip{left:100%}.wrapper[data-popper-placement=top-start]>#arrow,.wrapper[data-popper-placement=bottom-start]>#arrow{left:16px}.wrapper[data-popper-placement=top-end]>.tooltip,.wrapper[data-popper-placement=bottom-end]>.tooltip{right:100%}.wrapper[data-popper-placement=top-end]>#arrow,.wrapper[data-popper-placement=bottom-end]>#arrow{right:16px}.wrapper[data-popper-placement^=top]>.tooltip{bottom:calc(100% - var(--tooltip-y-offset, 0px))}.wrapper[data-popper-placement^=bottom]>.tooltip{top:calc(100% + var(--tooltip-y-offset, 0px))}.wrapper[data-popper-placement^=top] #arrow,.wrapper[data-popper-placement^=bottom] #arrow{bottom:calc(-4px - var(--tooltip-y-offset, 0px))}.wrapper[data-popper-placement^=top] #arrow::before,.wrapper[data-popper-placement^=bottom] #arrow::before{border-radius:1px 0}.wrapper[data-popper-placement=left] .tooltip,.wrapper[data-popper-placement=left] #arrow,.wrapper[data-popper-placement=right] .tooltip,.wrapper[data-popper-placement=right] #arrow{top:50%;transform:translateY(calc(-50% + var(--tooltip-y-offset, 0px)))}.wrapper[data-popper-placement=left] #arrow::before,.wrapper[data-popper-placement=right] #arrow::before{border-radius:0 1px}.wrapper[data-popper-placement^=left]>.tooltip{right:100%}.wrapper[data-popper-placement^=left]>#arrow,.wrapper[data-popper-placement^=right]>#arrow{right:-4px}.wrapper[data-popper-placement$=start]>.tooltip,.wrapper[data-popper-placement$=end]>.tooltip{transform:unset}";

const HmcTooltip = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.selectTooltipTarget = () => {
      var _a;
      if (this.triggerId !== '') {
        const rootElement = this.el.getRootNode();
        this.triggerElement =
          (_a = document.getElementById(this.triggerId)) !== null && _a !== void 0 ? _a : rootElement.querySelector(`#${this.triggerId}`);
      }
    };
    this.handleTooltip = () => {
      if (this.isOpen) {
        const xoffset = this.placement.endsWith('end')
          ? 12
          : this.placement.endsWith('start')
            ? -12
            : 0;
        this.tooltipInstance = popperLite.createPopper(this.triggerElement, this.tooltipEl, {
          placement: this.placement,
          strategy: 'absolute',
          modifiers: [
            {
              name: 'offset',
              options: {
                offset: [xoffset, 8],
              },
            },
            {
              name: 'flip',
              options: {
                flipVariations: false,
              },
            },
            popperLite.flip,
            popperLite.offset,
          ],
        });
      }
      else if (this.tooltipInstance) {
        this.tooltipInstance.destroy();
        this.tooltipInstance = null;
      }
    };
    this.triggerId = undefined;
    this.placement = 'bottom';
    this.toggleTitle = '';
    this.isOpen = false;
    this.isFixedWidth = false;
    this.isToggle = false;
    this.size = 'sm';
  }
  updateOnTriggerIdChange() {
    this.selectTooltipTarget();
  }
  closeTooltip(ev) {
    if (this.isOpen && (ev.code === 'Esc' || ev.code === 'Escape')) {
      this.isOpen = false;
    }
  }
  componentDidUpdate() {
    this.handleTooltip();
  }
  componentDidLoad() {
    this.selectTooltipTarget();
    if (this.triggerElement) {
      if (this.isToggle) {
        this.triggerElement.addEventListener('click', ev => {
          ev.stopPropagation();
          this.isOpen = !this.isOpen;
        });
      }
      else {
        this.triggerElement.addEventListener('mouseenter', ev => {
          ev.stopPropagation();
          this.isOpen = true;
        });
        this.triggerElement.addEventListener('mouseleave', ev => {
          ev.stopPropagation();
          this.isOpen = false;
        });
        this.triggerElement.addEventListener('focusin', ev => {
          ev.stopPropagation();
          this.isOpen = true;
        });
        this.triggerElement.addEventListener('focusout', ev => {
          ev.stopPropagation();
          this.isOpen = false;
        });
      }
      this.handleTooltip();
    }
  }
  render() {
    const { isOpen, isFixedWidth, isToggle, toggleTitle, size } = this;
    const wrapperClasses = {
      'wrapper': true,
      'show': isOpen,
      'fixed-width': isFixedWidth,
    };
    const tooltipClasses = {
      tooltip: true,
      toggle: isToggle,
      [size]: true,
    };
    return (index.h("div", { class: wrapperClasses, ref: ref => (this.tooltipEl = ref) }, index.h("div", { class: tooltipClasses }, index.h("div", { class: "title" }, toggleTitle), index.h("slot", null)), index.h("div", { id: "arrow" })));
  }
  get el() { return index.getElement(this); }
  static get watchers() { return {
    "triggerId": ["updateOnTriggerIdChange"]
  }; }
};
HmcTooltip.style = tooltipCss;

exports.hmc_tooltip = HmcTooltip;
