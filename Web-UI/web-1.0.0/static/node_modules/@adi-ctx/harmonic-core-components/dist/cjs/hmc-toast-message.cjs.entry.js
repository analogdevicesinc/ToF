'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-d9134559.js');

const toastMessageCss = ":host{display:block;position:fixed;right:16px;bottom:-200px;width:100%;max-width:400px;z-index:var(--z-index-overlay, 8000);color:var(--hmc-color-notification-info-default-text, var(--hmc-color-system-info-default, var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))));font-family:var(--font-family-body, \"Inter\", sans-serif);font-size:var(--font-size-medium, 16px);line-height:24px;transition:bottom 0.5s linear}:host(.open){bottom:16px}.toast{display:flex;justify-content:space-between;width:100%;box-sizing:border-box;padding:12px 12px;opacity:0;transition:opacity 0.1s linear;color:var(--hmc-color-notification-info-default-text, var(--hmc-color-system-info-default, var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))));background-color:var(--hmc-color-notification-info-default-background, var(--hmc-color-system-info-silent, var(--hmc-color-gray-100, #f0f1f3)));border:1px solid var(--hmc-color-notification-info-default-border, var(--hmc-color-gray-400, #9fa4ad));border-radius:4px;box-shadow:0px 0px 5px 0px rgba(34, 37, 47, 0.1), 0px 10px 10px 0px rgba(34, 37, 47, 0.1)}.toast .content-container hmc-icon{color:var(--hmc-color-notification-info-default-graphic, var(--hmc-color-system-info-default, var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))))}.toast.open{opacity:1}.toast .main-content{padding-top:3px;word-break:break-all}.toast.high-density{padding:8px 8px 8px 12px;font-size:14px;line-height:20px}.toast.high-density .content-container{padding-top:1px}.toast.high-density .main-content{padding-top:0}.toast.success{color:var(--hmc-color-notification-success-default-text, var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820)));background-color:var(--hmc-color-notification-success-default-background, var(--hmc-color-system-success-silent, var(--hmc-color-green-100, #e4f6ef)));border-color:var(--hmc-color-notification-success-default-border, var(--hmc-color-system-success-default, var(--hmc-color-green-500, #2e9e6f)))}.toast.success .content-container hmc-icon{color:var(--hmc-color-notification-success-default-graphic, var(--hmc-color-system-success-default, var(--hmc-color-green-500, #2e9e6f)))}.toast.warning{color:var(--hmc-color-notification-warning-default-text, var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820)));background-color:var(--hmc-color-notification-warning-default-background, var(--hmc-color-system-warning-silent, var(--hmc-color-orange-100, #feefe7)));border-color:var(--hmc-color-notification-warning-default-border, var(--hmc-color-system-warning-default, var(--hmc-color-orange-500, #e76423)))}.toast.warning .content-container hmc-icon{color:var(--hmc-color-notification-warning-default-graphic, var(--hmc-color-system-warning-default, var(--hmc-color-orange-500, #e76423)))}.toast.error{color:var(--hmc-color-notification-danger-default-text, var(--hmc-color-system-danger-default, var(--hmc-color-red-700, #c81a28)));background-color:var(--hmc-color-notification-danger-default-background, var(--hmc-color-system-danger-silent, var(--hmc-color-red-100, #feeeef)));border-color:var(--hmc-color-notification-danger-default-border, var(--hmc-color-system-danger-default, var(--hmc-color-red-700, #c81a28)))}.toast.error .content-container hmc-icon{color:var(--hmc-color-notification-danger-default-graphic, var(--hmc-color-system-danger-default, var(--hmc-color-red-700, #c81a28)))}.content-container,.action-container{display:flex;gap:8px}.content-container{margin-right:12px}.content-container hmc-icon{padding-top:3px;height:100%}.high-density .content-container hmc-icon{padding-top:1px}";

const statusIconMap = {
  low: {
    success: 'check-round-m',
    warning: 'warning-m',
    error: 'error-m',
    info: 'info-m',
  },
  high: {
    success: 'check-circle-s',
    warning: 'warning-s',
    error: 'error-s',
    info: 'info-s',
  },
};
const HmcToastMessage = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.actionClicked = index.createEvent(this, "actionClicked", 7);
    this.toastClosing = index.createEvent(this, "toastClosing", 7);
    this.toastClosed = index.createEvent(this, "toastClosed", 7);
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    this.timeoutRef = setTimeout(() => { }, null);
    this.status = 'info';
    this.density = 'low';
    this.actionText = '';
    this.hasCloseButton = false;
    this.withIcon = true;
    this.iconName = undefined;
    this.isOpen = false;
    this.timeout = 5000;
  }
  handleOpen(newValue, oldValue) {
    if (!oldValue && newValue) {
      this.initiateClosing();
    }
  }
  initiateClosing() {
    if (!this.toastClosing.emit().defaultPrevented) {
      this.startToastCloseTimer();
    }
  }
  closeToast() {
    this.toastClosed.emit();
    this.isOpen = false;
  }
  startToastCloseTimer() {
    if (this.isOpen) {
      this.timeoutRef = setTimeout(() => {
        this.closeToast();
      }, this.timeout);
    }
  }
  stopToastCloseTimer() {
    clearTimeout(this.timeoutRef);
  }
  componentDidLoad() {
    if (this.isOpen) {
      this.initiateClosing();
    }
    this.el.addEventListener('mouseover', () => this.stopToastCloseTimer());
    this.el.addEventListener('mouseout', () => this.startToastCloseTimer());
  }
  render() {
    const { actionText, density, iconName, hasCloseButton, status, withIcon, isOpen, } = this;
    const classList = {
      'toast': true,
      [status]: true,
      'high-density': density === 'high',
      'open': isOpen,
    };
    const icon = (iconName || statusIconMap[density][status]);
    return (index.h(index.Host, { class: isOpen ? 'open' : '' }, index.h("div", { class: classList, role: "status" }, index.h("div", { class: "content-container" }, withIcon && index.h("hmc-icon", { name: icon }), index.h("div", { class: "main-content" }, index.h("slot", null))), index.h("div", { class: "action-container" }, actionText !== '' && (index.h("hmc-button", { size: density === 'low' ? 'sm' : 'xs', kind: "secondary", onClick: () => this.actionClicked.emit() }, actionText)), hasCloseButton && (index.h("hmc-button", { "icon-only": true, size: density === 'low' ? 'sm' : 'xs', kind: "ghost", onClick: () => this.closeToast() }, index.h("hmc-icon", { name: "close-m" })))))));
  }
  get el() { return index.getElement(this); }
  static get watchers() { return {
    "isOpen": ["handleOpen"]
  }; }
};
HmcToastMessage.style = toastMessageCss;

exports.hmc_toast_message = HmcToastMessage;
