import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-9bcb3512.js';
import { r as renderHiddenInput } from './utils-c0344a71.js';

const dropdownCss = ":host{display:inline-block;position:relative;font-family:var(--font-family-body, \"Inter\", sans-serif);width:100%}.input-label{display:flex;flex-direction:row;justify-content:space-between;align-items:center;align-self:stretch}.input-label .label{font-size:var(--font-size-default, 14px);color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820));font-weight:normal;line-height:20px;margin-bottom:4px;display:inline-flex;align-items:center}.input-label.xs .label{font-size:var(--font-size-small, 12px);line-height:16px}.input-label .hint{margin:0 4px}.input-label .label-optional{font-size:var(--font-size-small, 12px);font-weight:normal;line-height:1.33;color:var(--hmc-color-content-subtle, var(--hmc-color-gray-700, #5e6773));margin-bottom:4px;margin-left:auto}.dropdown{width:100%;height:40px;position:relative;display:flex;align-items:center;padding:4px 8px;border:1px solid var(--hmc-color-interactive-subtle-idle, var(--hmc-color-gray-500, #848b95));border-radius:4px;font-size:var(--font-size-default, 14px);color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820));background-color:var(--hmc-color-layout-container, var(--hmc-color-gray-white, #fff))}.dropdown.sm{height:32px}.dropdown.xs{height:24px}.dropdown.xs .dropdown-content{font-size:var(--font-size-small, 12px);line-height:16px}.dropdown.error{border-color:var(--hmc-color-notification-danger-default-border, var(--hmc-color-system-danger-default, var(--hmc-color-red-700, #c81a28)))}.dropdown.warning{border-color:var(--hmc-color-notification-warning-default-border, var(--hmc-color-system-warning-default, var(--hmc-color-orange-500, #e76423)))}.dropdown:hover{cursor:pointer;border-color:var(--hmc-color-interactive-subtle-hover, var(--hmc-color-gray-700, #5e6773))}.dropdown:focus,.dropdown :focus-visible,.dropdown :focus-within{border-color:var(--hmc-color-interactive-focus, var(--hmc-color-system-highlight-default, var(--hmc-color-purple-500, #b16ee0)));box-shadow:inset 0 0 0 1px var(--hmc-color-interactive-focus, var(--hmc-color-system-highlight-default, var(--hmc-color-purple-500, #b16ee0)));outline:none}.dropdown.expanded .dropdown-arrow{transform:translateY(-50%) rotate(180deg)}.dropdown.disabled{pointer-events:none;background:var(--hmc-color-system-info-silent, var(--hmc-color-gray-100, #f0f1f3));color:var(--hmc-color-content-silent, var(--hmc-color-gray-400, #9fa4ad));border-color:var(--hmc-color-interactive-subtle-disabled, var(--hmc-color-gray-200, #d5d8dc));cursor:not-allowed}.dropdown.disabled .dropdown-arrow{fill:var(--hmc-color-content-silent, var(--hmc-color-gray-400, #9fa4ad))}.dropdown.disabled .dropdown-content{color:var(--hmc-color-content-silent, var(--hmc-color-gray-400, #9fa4ad))}.dropdown-content{display:inline-flex;align-items:center;border-radius:4px 0 0 4px;user-select:none;color:var(--hmc-color-content-subtle, var(--hmc-color-gray-700, #5e6773));max-width:100%}.dropdown-content.filled{color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))}.dropdown-content .dropdown-text{max-width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;margin-right:16px}.dropdown-content slot[name=icon]::slotted(*){margin-right:8px}.dropdown-arrow{display:block;position:absolute;top:50%;right:0;transform:translateY(-50%)}.list-container{gap:6px;display:grid;padding:6px 4px;border-radius:8px;border:1px solid var(--hmc-color-layout-divider-default, var(--hmc-color-gray-300, #b7bbc3));box-shadow:0px 5px 5px 0px rgba(34, 37, 47, 0.1), 0px 0px 5px 0px rgba(34, 37, 47, 0.1);background-color:var(--hmc-color-layout-container, var(--hmc-color-gray-white, #fff));position:absolute;min-width:100%;max-width:var(--hmc-dropdown-list-max-width, 100%);min-height:16px;overflow-x:hidden;overflow-y:auto;z-index:var(--z-index-dropdown, 7000);margin-top:4px;margin-left:-4px}.list-container.right{right:0px}.list-container.top{bottom:30px}.list-container.hidden{display:none;visibility:hidden}.helper-text{margin-top:4px}:host(.hovered) .dropdown{border-color:var(--hmc-color-interactive-subtle-hover, var(--hmc-color-gray-700, #5e6773))}:host(.hovered) .dropdown .dropdown-content{border-color:var(--hmc-color-interactive-subtle-hover, var(--hmc-color-gray-700, #5e6773))}";

const FIELD_ID = 'hmc-dropdown-id';
const HmcDropdown = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.toggled = createEvent(this, "toggled", 7);
    this.changed = createEvent(this, "changed", 7);
    this._hasIcon = false;
    this._didInit = false;
    this.placeholder = 'Select';
    this.size = 'md';
    this.value = undefined;
    this.name = undefined;
    this.label = '';
    this.isDisabled = false;
    this.isClearable = false;
    this.status = 'normal';
    this.helperText = undefined;
    this.selectedText = undefined;
    this.scrollContainerId = undefined;
    this.forcePlacement = undefined;
    this.isRequired = undefined;
    this.optionalText = undefined;
    this.multiple = false;
    this.maxVisibleOpts = 8;
    this.alignment = 'left';
    this.isExpanded = false;
    this.placement = 'bottom';
    this.v3EventBehaviour = false;
  }
  handleClick(e) {
    var _a;
    if ((_a = e === null || e === void 0 ? void 0 : e.composedPath()) === null || _a === void 0 ? void 0 : _a.includes(this.el)) {
      this.toggle();
    }
  }
  get childOpts() {
    var _a;
    return Array.from(((_a = this.el) === null || _a === void 0 ? void 0 : _a.querySelectorAll('hmc-dropdown-option')) || []);
  }
  toggle() {
    if (this.isDisabled) {
      return;
    }
    if (!this.isExpanded) {
      const containerElement = document.getElementById(this.scrollContainerId) ||
        document.documentElement;
      const elementDistanceToBottomOfViewport = this.el.getBoundingClientRect()
        .bottom;
      const containerDistanceToBottomOfViewport = containerElement.getBoundingClientRect()
        .bottom;
      const visibleSpaceBelowElement = containerDistanceToBottomOfViewport - elementDistanceToBottomOfViewport;
      // If the forcePlacement is not set the option list will be placed base on calculation
      if (this.forcePlacement) {
        this.placement = this.forcePlacement;
      }
      else {
        // When there is enough space, render the option list below the button.
        // Includes buffer for padding, scrollbar
        if (visibleSpaceBelowElement > this._maxListContainerHeight + 20) {
          this.placement = 'bottom';
        }
        else {
          this.placement = 'top';
        }
      }
    }
    this.isExpanded = !this.isExpanded;
    this.toggled.emit({ isActive: this.isExpanded });
  }
  handleSelection(event) {
    if (this.multiple) {
      this.handleMultipleSelection(event);
    }
    else {
      this.isExpanded = false;
      this.toggled.emit({ isActive: false });
      if (event.detail.selected) {
        this.value = event.detail.value;
      }
      else if (this.isClearable) {
        this.value = undefined;
      }
      if (this.v3EventBehaviour) {
        this.changed.emit({ value: this.value });
      }
    }
    this.setOptionSelection();
  }
  handleMultipleSelection(event) {
    if (event.detail.selected) {
      // Add to or create array
      if (Array.isArray(this.value)) {
        // Trigger rerender with new array
        this.value = [...this.value, event.detail.value];
      }
      else {
        this.value = [event.detail.value];
      }
    }
    else {
      if (Array.isArray(this.value)) {
        this.value = this.value.filter(val => val !== event.detail.value);
        if (!this.value.length) {
          this.value = undefined;
        }
      }
      else {
        this.value = undefined;
      }
    }
  }
  setOptionSelection() {
    this.childOpts.forEach(option => {
      option.isSelected = this.isOptionSelected(option.value);
    });
  }
  handleBlur(event) {
    var _a;
    if (this.isExpanded &&
      ((_a = event.relatedTarget) === null || _a === void 0 ? void 0 : _a.tagName) !== 'HMC-DROPDOWN-OPTION' &&
      event.relatedTarget !== this.el) {
      this.isExpanded = false;
      this.toggled.emit({ isActive: this.isExpanded });
    }
  }
  valueChanged() {
    if (this.multiple &&
      typeof this.value === 'string' &&
      this.value[0] === '[') {
      this.value = JSON.parse(this.value);
    }
    if (this._didInit && !this.v3EventBehaviour) {
      this.changed.emit({ value: this.value });
    }
    this.setOptionSelection();
  }
  setListHeight() {
    const heightMap = {
      xs: 24,
      md: 40,
    };
    const optionSize = this.childOpts.length > 0 ? this.childOpts[0].size : 'md';
    const listContainer = this.el.shadowRoot.querySelector('.list-container');
    // Add a buffer to max height to make scrolling obvious.
    this._maxListContainerHeight =
      heightMap[optionSize] * this.maxVisibleOpts + heightMap[optionSize] / 2;
    listContainer.style.maxHeight = this._maxListContainerHeight + 'px';
  }
  componentWillLoad() {
    if (this.multiple) {
      this.valueChanged();
    }
    if (this.multiple && this.value && !Array.isArray(this.value)) {
      this.value = [this.value];
    }
    this.setOptionSelection();
    this._didInit = true;
  }
  componentDidLoad() {
    this.setListHeight();
  }
  render() {
    const { size, value, name, label, optionalText, placeholder, placement, alignment, helperText, isDisabled, isExpanded, isRequired, status, } = this;
    renderHiddenInput(this.el, name, isDisabled, this.getText());
    this._hasIcon = Boolean(this.el.querySelector('[slot="icon"]'));
    const inputClasses = {
      dropdown: true,
      expanded: isExpanded,
      disabled: isDisabled,
      [size]: true,
      [status]: true,
    };
    const selectedValueClasses = {
      'dropdown-content': true,
      'filled': Boolean(value),
    };
    const listContainerClasses = {
      'list-container': true,
      'hidden': !isExpanded,
      [placement]: true,
      [alignment]: true,
      [size]: true,
    };
    return (h(Host, null, h("div", { class: 'input-label ' + size }, !!label && (h("span", { class: "label" }, h("label", { htmlFor: FIELD_ID }, label), h("span", { class: "hint" }, h("slot", { name: "hint" })))), isRequired === false && (h("span", { class: "label-optional" }, optionalText))), h("button", { class: inputClasses, "aria-haspopup": "listbox", disabled: isDisabled }, h("div", { class: selectedValueClasses }, h("slot", { name: "icon" }), h("div", { class: "dropdown-text" }, value ? this.getText() : placeholder)), h("hmc-icon", { class: "dropdown-arrow", name: "chevron-down-m" })), h("div", { role: "listbox", class: listContainerClasses }, h("slot", null)), status !== 'normal' && Boolean(helperText) && (h("div", { class: "helper-text" }, h("hmc-message", { status: status }, helperText)))));
  }
  getText() {
    if (Boolean(this.selectedText) && this.selectedText !== '') {
      return this.selectedText;
    }
    else {
      return this.childOpts
        .filter(opt => opt.isSelected)
        .map(opt => opt.textContent.trim())
        .join(', ');
    }
  }
  isOptionSelected(optionValue) {
    if (this.value === undefined) {
      return false;
    }
    if (Array.isArray(this.value)) {
      return this.value.some(val => val === optionValue);
    }
    else {
      return this.value === optionValue;
    }
  }
  get el() { return getElement(this); }
  static get watchers() { return {
    "value": ["valueChanged"],
    "maxVisibleOpts": ["setListHeight"]
  }; }
};
HmcDropdown.style = dropdownCss;

export { HmcDropdown as hmc_dropdown };
