import { r as registerInstance, h, H as Host, g as getElement } from './index-9bcb3512.js';

const progressBarCss = ":host{display:block;width:100%}.progress-bar{width:100%;flex-direction:column;display:flex;gap:4px}.content{align-self:stretch;justify-content:flex-end;align-items:center;display:flex}.label{padding:2px 0px;flex:1 0 0;color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820));font-feature-settings:\"clig\" off, \"liga\" off;font-size:14px;font-family:Inter;font-weight:400;line-height:20px;word-wrap:break-word}.label.sm{font-size:12px;line-height:16px}.label.md{font-size:14px;line-height:20px}.right{justify-content:flex-end;align-items:center;gap:4px;display:flex}.value{text-align:right;color:var(--hmc-color-content-subtle, var(--hmc-color-gray-700, #5e6773));font-size:14px;font-family:Inter;font-weight:400;line-height:20px;word-wrap:break-word}.value.sm{font-size:12px;line-height:16px}.value.md{font-size:14px;line-height:20px}.bar{width:100%;align-self:stretch;height:8px;flex-direction:column;justify-content:center;align-items:flex-start;display:flex;contain:strict}.bar.sm{height:4px}.bar.md{height:8px}.indicator{position:absolute;height:8px;width:100%;transform-origin:left top;background:var(--hmc-color-system-info-default, var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820)))}.indicator.success{background:var(--hmc-color-system-success-default, var(--hmc-color-green-500, #2e9e6f))}.indicator.error{background:var(--hmc-color-system-danger-default, var(--hmc-color-red-700, #c81a28))}.indicator.sm{height:4px}.indicator.md{height:8px}.indicator.indeterminate{background:none;transform:rotate(0)}.indicator.indeterminate::after{width:100%;position:absolute;animation-duration:1400ms;animation-iteration-count:infinite;animation-name:--progress-bar-indeterminate;animation-timing-function:ease-out;background-image:linear-gradient(90deg, var(--hmc-color-system-info-default, var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))) 20%, transparent 20%);background-position-x:0%;background-size:200% 100%;content:\"\";inset:0}@keyframes --progress-bar-indeterminate{0%{background-position-x:50%}80%,100%{background-position-x:-155%}}.track{align-self:stretch;height:8px;background:var(--hmc-color-layout-divider-silent, var(--hmc-color-gray-200, #d5d8dc))}.track.sm{height:4px}.track.md{height:8px}.inline-message{flex:1 1 0;align-self:stretch;justify-content:flex-start;align-items:center;gap:4px;display:flex}";

const HmcProgressBar = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.label = undefined;
    this.inlineMessage = undefined;
    this.value = 0;
    this.maxValue = 100;
    this.status = 'info';
    this.size = 'md';
    this.indeterminate = false;
    this.showPercentage = true;
  }
  getConstrainedValue() {
    return Math.max(0, Math.min(this.value, this.maxValue));
  }
  render() {
    const { indeterminate, inlineMessage, maxValue, status, size, value, } = this;
    const scaledValue = this.getConstrainedValue() / maxValue;
    const labelClass = {
      label: true,
      [size]: true,
    };
    const valueClass = {
      value: true,
      [size]: true,
    };
    const barClass = {
      bar: true,
      [size]: true,
    };
    const indicatorClass = {
      indicator: true,
      [status]: true,
      indeterminate,
      [size]: true,
    };
    const trackClass = {
      track: true,
      [size]: true,
    };
    return (h(Host, { role: "progressbar", "aria-valuenow": indeterminate ? null : value, "aria-valuemin": "0", "aria-valuemax": maxValue }, h("div", { class: "progress-bar" }, h("div", { class: "content" }, this.label && h("div", { class: labelClass }, this.label), h("div", { class: "right" }, this.showPercentage && (h("div", { class: valueClass }, Math.floor(scaledValue * 100), "%")), h("slot", { name: "action-button" }))), h("div", { class: barClass }, h("div", { class: indicatorClass, style: {
        transform: `scaleX(${indeterminate ? 1 : scaledValue})`,
      } }), h("div", { class: trackClass })), inlineMessage && (h("div", { class: "inline-message" }, h("hmc-message", { status: status }, inlineMessage))))));
  }
  get el() { return getElement(this); }
};
HmcProgressBar.style = progressBarCss;

export { HmcProgressBar as hmc_progress_bar };
