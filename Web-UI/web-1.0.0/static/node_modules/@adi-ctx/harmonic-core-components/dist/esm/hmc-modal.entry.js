import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-9bcb3512.js';

const modalCss = "*{box-sizing:border-box;margin:0;padding:0}.modal-container{display:flex;flex-direction:column;position:relative;width:100%;border-radius:6px;overflow:hidden;box-shadow:0px 45px 45px 0px rgba(34, 37, 47, 0.1), 0px 0px 5px 0px rgba(34, 37, 47, 0.1);background:var(--hmc-color-layout-container, var(--hmc-color-gray-white, #fff));margin:0 auto;align-self:unset;height:var(--hmc-modal-height, auto);max-width:var(--hmc-modal-width, 600px);max-height:calc(100vh - 20px)}.modal-container .p-x{padding:0 24px}.modal-container .modal-header{display:flex;align-items:center;width:100%;padding-top:17px;min-height:60px;border-bottom:1px solid var(--hmc-color-layout-divider-default, var(--hmc-color-gray-300, #b7bbc3));height:fit-content}.modal-container .modal-header .close-icon{align-self:flex-start;margin-left:auto}.modal-container .modal-content{flex:1;padding:var(--hmc-modal-content-padding, 24px);font-family:var(--font-family-body, \"Inter\", sans-serif);font-size:var(--font-size-medium, 16px);line-height:24px;color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820))}.modal-container.medium-density .p-x{padding:0 20px}.modal-container.medium-density .modal-footer{padding:20px 0px}.modal-container.medium-density .modal-header{padding-top:14px}.modal-container.medium-density .modal-content{padding:var(--hmc-modal-content-padding, 20px)}.modal-container.no-header-content .modal-header{border-bottom:none;padding:16px;padding-bottom:0}.modal-container.no-footer-content .modal-content{padding-bottom:32px}.modal-container .modal-footer{width:100%;border-top:1px solid var(--hmc-color-layout-divider-default, var(--hmc-color-gray-300, #b7bbc3));padding:24px 0px;height:fit-content}.modal-container .modal-content{overflow:var(--hmc-modal-content-overflow, auto);scroll-behavior:smooth;-webkit-overflow-scrolling:touch;}.modal-container .modal-content::-webkit-scrollbar-thumb{height:60px;border-radius:3px;background-color:var(--componentsContainerBg);background:var(--c-light-grey-two)}.modal-container.fullscreen{position:fixed;max-width:100%;height:100%;border-radius:initial}";

const DEFAULT_SCROLL_POSITION = 0;
const MODAL_OPEN_CLASSNAME = 'modal-open';
const HmcModal = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.modalCloseRequest = createEvent(this, "modalCloseRequest", 7);
    this.isOpen = undefined;
    this.isFullScreen = false;
    this.overlayDismiss = true;
    this.density = 'low';
    this.scrollY = DEFAULT_SCROLL_POSITION;
    this.hasHeader = false;
    this.hasFooter = false;
    this.label = undefined;
  }
  componentWillLoad() {
    var _a;
    this.hasHeader = !!this.el.querySelector('[slot="modal-header"]');
    this.hasFooter = !!this.el.querySelector('[slot="modal-footer"]');
    // Try to add an aria-label for the modal
    this.label =
      this.el.ariaLabel ||
        ((_a = this.el.querySelector('hmc-container-header')) === null || _a === void 0 ? void 0 : _a.heading) ||
        '';
  }
  disconnectedCallback() {
    this.removeClassModalOpen();
  }
  watchHandler(value) {
    if (value) {
      this.scrollY = window.scrollY;
      // disable body scroll when modal is open
      document.body.classList.add(MODAL_OPEN_CLASSNAME);
      // extra requirements for IOS base devises
      // https://css-tricks.com/prevent-page-scrolling-when-a-modal-is-open/
      document.body.style.top = `-${this.scrollY}px`;
    }
    else {
      this.removeClassModalOpen();
    }
  }
  overlayClickHandler() {
    this.overlayDismiss && this.handleModalClose();
  }
  onKeydown(ev) {
    if (this.isOpen && (ev.code === 'Esc' || ev.code === 'Escape')) {
      ev.preventDefault();
      this.modalCloseRequest.emit();
    }
  }
  handleModalClose() {
    this.modalCloseRequest.emit();
  }
  removeClassModalOpen() {
    if (!document.body.classList.contains(MODAL_OPEN_CLASSNAME)) {
      return;
    }
    document.body.classList.remove(MODAL_OPEN_CLASSNAME);
    document.body.style.top = '';
    window.scrollTo({ top: this.scrollY });
  }
  wrapFocus(ev, focusTrapEl) {
    if (ev.relatedTarget !== this._startTrapRef &&
      ev.relatedTarget !== this._endTrapRef) {
      ev.preventDefault();
      focusTrapEl.focus();
    }
  }
  render() {
    const { isOpen, isFullScreen, hasHeader, hasFooter, density, label } = this;
    const rootClass = {
      'modal-container': true,
      'medium-density': density === 'medium',
      'fullscreen': isFullScreen,
      'no-header-content': !hasHeader,
      'no-footer-content': !hasFooter,
    };
    return (h(Host, null, h("hmc-modal-overlay", { isOpen: isOpen }, h("a", { id: "start-trap", href: "javascript:void 0", role: "navigation", ref: el => (this._startTrapRef = el), onFocusin: ev => this.wrapFocus(ev, this._endTrapRef) }), h("div", { class: rootClass, role: "dialog", "aria-modal": "true", "aria-label": label }, h("div", { class: "p-x" }, h("div", { class: "modal-header" }, hasHeader && h("slot", { name: "modal-header" }), h("hmc-button", { class: "close-icon", kind: "ghost", size: "sm", "icon-only": true, onClick: () => this.handleModalClose() }, h("hmc-icon", { name: "close-m" })))), h("div", { class: "modal-content" }, h("slot", null)), hasFooter && (h("div", { class: "p-x" }, h("div", { class: "modal-footer" }, h("slot", { name: "modal-footer" }))))), h("a", { id: "end-trap", href: "javascript:void 0", role: "navigation", ref: el => (this._endTrapRef = el), onFocusin: ev => this.wrapFocus(ev, this._startTrapRef) }))));
  }
  get el() { return getElement(this); }
  static get watchers() { return {
    "isOpen": ["watchHandler"]
  }; }
};
HmcModal.style = modalCss;

export { HmcModal as hmc_modal };
