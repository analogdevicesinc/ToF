import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-9bcb3512.js';
import { r as renderHiddenInput } from './utils-c0344a71.js';

const textareaCss = "*{padding:0;box-sizing:border-box}:host{padding:0;box-sizing:border-box;display:inline-block}:host(.full-width){width:100%}.textarea-wrapper{position:relative;width:min-content;font-family:var(--font-family-body, \"Inter\", sans-serif)}.textarea-wrapper .bottom-text{display:flex;flex-direction:row;justify-content:space-between;align-items:center;align-self:stretch;height:20px;max-width:100%}.textarea-wrapper .bottom-text .counter{font-size:var(--font-size-small, 12px);padding-top:2px;font-weight:normal;line-height:20px;color:var(--hmc-color-content-subtle, var(--hmc-color-gray-700, #5e6773));margin-left:auto}.textarea-wrapper .bottom-text .helper-text{margin-top:4px;max-width:75%;overflow:auto}.textarea-wrapper.full-width{width:100%}.textarea-wrapper.full-width textarea{width:100%}.textarea-wrapper .textarea-label{display:flex;flex-direction:row;justify-content:space-between;align-items:center;align-self:stretch}.textarea-wrapper .textarea-label .label{font-size:var(--font-size-default, 14px);color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820));font-weight:normal;line-height:20px;margin-bottom:4px;display:inline-flex;align-items:center}.textarea-wrapper .textarea-label .hint{margin:0 4px;line-height:12px}.textarea-wrapper .textarea-label .label-required,.textarea-wrapper .textarea-label .label-optional{font-size:var(--font-size-small, 12px);font-weight:normal;line-height:1.33;color:var(--hmc-color-content-subtle, var(--hmc-color-gray-700, #5e6773));margin-bottom:4px;margin-left:auto}.textarea-wrapper.error textarea{border-color:var(--hmc-color-notification-danger-default-border, var(--hmc-color-system-danger-default, var(--hmc-color-red-700, #c81a28)))}.textarea-wrapper.warning textarea{border-color:var(--hmc-color-notification-warning-default-border, var(--hmc-color-system-warning-default, var(--hmc-color-orange-500, #e76423)))}.textarea-wrapper textarea{position:relative;display:flex;flex-direction:row;align-items:center;flex:1;resize:none;outline:none;font-weight:normal;line-height:20px;font-family:var(--font-family-body, \"Inter\", sans-serif);font-size:var(--font-size-default, 14px);background-color:var(--hmc-color-layout-container, var(--hmc-color-gray-white, #fff));color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820));border:solid 1px var(--hmc-color-interactive-subtle-idle, var(--hmc-color-gray-500, #848b95));border-radius:4px;padding:8px;}.textarea-wrapper textarea.resizable{resize:vertical}.textarea-wrapper textarea:hover{border-color:var(--hmc-color-interactive-subtle-hover, var(--hmc-color-gray-700, #5e6773))}.textarea-wrapper textarea:focus,.textarea-wrapper textarea:focus-visible{border-color:var(--hmc-color-interactive-focus, var(--hmc-color-system-highlight-default, var(--hmc-color-purple-500, #b16ee0)));box-shadow:inset 0px 0px 0px 1px var(--hmc-color-interactive-focus, var(--hmc-color-system-highlight-default, var(--hmc-color-purple-500, #b16ee0)))}.textarea-wrapper textarea::placeholder{color:var(--hmc-color-content-subtle, var(--hmc-color-gray-700, #5e6773))}.textarea-wrapper textarea::-webkit-outer-spin-button,.textarea-wrapper textarea::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}.textarea-wrapper textarea[type=number]{-moz-appearance:textfield-multiline}.textarea-wrapper.xs textarea{font-size:var(--font-size-small, 12px);padding:4px;line-height:16px}.textarea-wrapper.xs .label{font-size:var(--font-size-small, 12px);line-height:16px}.textarea-wrapper.sm textarea{padding:4px}.textarea-wrapper.disabled textarea{background:var(--hmc-color-system-info-silent, var(--hmc-color-gray-100, #f0f1f3));border-color:var(--hmc-color-interactive-subtle-disabled, var(--hmc-color-gray-200, #d5d8dc));resize:none}.textarea-wrapper.disabled textarea,.textarea-wrapper.disabled textarea::placeholder{color:var(--hmc-color-content-silent, var(--hmc-color-gray-400, #9fa4ad))}.textarea-wrapper:hover:not(.disabled) textarea:not(:focus){border-color:var(--hmc-color-interactive-subtle-hover, var(--hmc-color-gray-700, #5e6773))}.textarea-wrapper textarea:focus{border-color:var(--hmc-color-interactive-focus, var(--hmc-color-system-highlight-default, var(--hmc-color-purple-500, #b16ee0)))}";

const FIELD_ID = 'hmc-textarea-id';
const HmcTextarea = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.hmcInput = createEvent(this, "hmcInput", 7);
    this.hmcChange = createEvent(this, "hmcChange", 7);
    this.hmcBlur = createEvent(this, "hmcBlur", 7);
    this.hmcFocus = createEvent(this, "hmcFocus", 7);
    this.onBlur = event => {
      this.hmcBlur.emit(event);
    };
    this.onFocus = event => {
      this.hmcFocus.emit(event);
    };
    this.name = undefined;
    this.value = '';
    this.label = '';
    this.wrap = 'soft';
    this.isDisabled = false;
    this.isFullWidth = false;
    this.status = 'normal';
    this.helperText = undefined;
    this.isAutoFocused = false;
    this.autoComplete = 'off';
    this.isRequired = undefined;
    this.optionalText = undefined;
    this.hasCounter = false;
    this.hasSpellcheck = 'false';
    this.size = 'md';
    this.rows = 3;
    this.cols = 30;
    this.placeholder = undefined;
    this.minLength = undefined;
    this.maxLength = undefined;
    this.resize = 'none';
  }
  valueChanged() {
    if (this.textareaEl && this.textareaEl.value !== this.value) {
      // NOTE: don't use setAttribute ('value', ...) here, because that doesn't change the value of the input in every case.
      // example: the current value of input is '-200', if the new value should be '200',
      // 'setAttribute('value', 200)' won't change the value in the input
      this.textareaEl.value = this.value;
    }
  }
  onInput(event) {
    const input = event.target;
    if (input) {
      this.value = input.value || '';
    }
    this.hmcInput.emit({ value: this.value, nativeEvent: event });
  }
  onChange(event) {
    this.hmcChange.emit({ value: this.value, nativeEvent: event });
  }
  render() {
    const { isDisabled, isRequired, isFullWidth, label, placeholder, size, rows, cols, status, name, value, isAutoFocused, hasCounter, hasSpellcheck, minLength, maxLength, helperText, resize, wrap, autoComplete, optionalText, } = this;
    renderHiddenInput(this.el, name, isDisabled, this.value);
    const placeholderText = placeholder;
    const groupClassList = {
      'resizable': resize === 'vertical',
      'full-width': isFullWidth,
    };
    const inputGroup = (h("textarea", { rows: rows, cols: cols, class: groupClassList, id: FIELD_ID, ref: el => (this.textareaEl = el), onInput: event => this.onInput(event), onChange: event => this.onChange(event), onBlur: this.onBlur, onFocus: this.onFocus, autoFocus: isAutoFocused, name: name, value: value, autoComplete: autoComplete, spellcheck: hasSpellcheck, placeholder: placeholderText, disabled: isDisabled, maxLength: maxLength, minLength: minLength, wrap: wrap, onWheel: ev => ev.preventDefault() }));
    const wrapperClassList = {
      'textarea-wrapper': true,
      'disabled': isDisabled,
      'error': status === 'error',
      'warning': status === 'warning',
      'full-width': isFullWidth,
      [size]: true,
    };
    const fullWidth = {
      'full-width': isFullWidth,
    };
    return (h(Host, { ref: ref => (this.rootEl = ref), class: fullWidth }, h("div", { class: wrapperClassList }, h("div", { class: "textarea-label" }, !!label && (h("span", { class: "label" }, h("label", { htmlFor: FIELD_ID }, label), h("span", { class: "hint" }, h("slot", { name: "hint" })))), isRequired === false && (h("span", { class: "label-optional" }, optionalText))), inputGroup, h("div", { class: "bottom-text" }, ' ', status !== 'normal' && Boolean(helperText) && (h("div", { class: "helper-text" }, h("hmc-message", { status: status }, helperText))), hasCounter === true && (h("div", { class: "counter" }, this.value.toString().length, maxLength > 0 ? `/${maxLength}` : ''))))));
  }
  get el() { return getElement(this); }
  static get watchers() { return {
    "value": ["valueChanged"]
  }; }
};
HmcTextarea.style = textareaCss;

export { HmcTextarea as hmc_textarea };
