import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-9bcb3512.js';

const dropdownMenuButtonCss = ":host([aria-disabled=true]){cursor:no-drop;pointer-events:none}:host{font-family:var(--font-family-body, \"Inter\", sans-serif);width:100%}.menu-button .menu-item{padding-top:4px}.menu-button.expanded.primary,.menu-button.expanded.secondary{--hmc-color-interactive-primary-idle:var(\n    --hmc-color-interactive-primary-hover\n  )}.menu-button.expanded.tertiary{--hmc-color-interactive-subtle-idle:var(\n    --hmc-color-interactive-subtle-hover\n  )}.menu-button.expanded.ghost{--button-ghost-bg:var(--hmc-color-interactive-silent-hover)}.menu-button.expanded.inverse.primary{--hmc-color-content-inverse:var(--hmc-color-interactive-silent-hover)}.menu-button.expanded.inverse.secondary,.menu-button.expanded.inverse.tertiary{--hmc-color-content-inverse:var(--hmc-color-interactive-silent-hover)}.menu-button.expanded.inverse.ghost{--button-ghost-bg:var(--hmc-color-content-default)}";

const HmcDropdownMenuButton = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.toggled = createEvent(this, "toggled", 7);
    this.handleDocumentClick = (event) => {
      if (this.isExpanded) {
        const target = event.target;
        if (!this.el.contains(target)) {
          this.isExpanded = false;
          this.toggled.emit({ isExpanded: this.isExpanded });
          const dropdownMenu = this.el.querySelector('hmc-dropdown-menu');
          if (dropdownMenu) {
            dropdownMenu.isOpen = false;
          }
        }
      }
    };
    this.isDisabled = false;
    this.isLoading = false;
    this.kind = 'primary';
    this.isInverse = false;
    this.size = 'md';
    this.isExpanded = false;
  }
  connectedCallback() {
    document.addEventListener('click', this.handleDocumentClick);
  }
  disconnectedCallback() {
    document.removeEventListener('click', this.handleDocumentClick);
  }
  async toggleMenu() {
    if (!this.isDisabled) {
      this.isExpanded = !this.isExpanded;
      this.toggled.emit({ isExpanded: this.isExpanded });
    }
  }
  getRightIcon() {
    let expanded = 'down';
    if (this.isExpanded) {
      expanded = 'up';
    }
    return ('chevron-' + expanded + '-' + 's');
  }
  render() {
    const { size, kind, isLoading, isDisabled, isInverse, isExpanded } = this;
    const classes = {
      'menu-button': true,
      'inverse': isInverse,
      'disabled': isDisabled,
      'expanded': isExpanded,
      [kind]: true,
    };
    return (h(Host, { role: "button", "aria-haspopup": "true", "aria-expanded": this.isExpanded.toString(), "aria-disabled": isDisabled.toString(), onClick: () => this.toggleMenu() }, h("div", { class: classes }, h("hmc-button", { size: size, kind: kind, isProcessing: isLoading, isDisabled: isDisabled, isInverse: isInverse }, h("slot", { slot: "icon-left", name: "icon-left" }), h("slot", null), h("hmc-icon", { class: "right-icon", slot: "icon-right", name: this.getRightIcon() })), h("div", { class: "menu-item" }, h("slot", { name: "menu" })))));
  }
  get el() { return getElement(this); }
};
HmcDropdownMenuButton.style = dropdownMenuButtonCss;

export { HmcDropdownMenuButton as hmc_dropdown_menu_button };
