import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-9bcb3512.js';
import { r as renderHiddenInput } from './utils-c0344a71.js';

const inputFieldCss = "*{padding:0;box-sizing:border-box}.input-wrapper{position:relative;font-family:var(--font-family-body, \"Inter\", sans-serif)}.input-wrapper .input-label{display:flex;flex-direction:row;justify-content:space-between;align-items:center;align-self:stretch}.input-wrapper .input-label .label{font-size:var(--font-size-default, 14px);color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820));font-weight:normal;line-height:20px;margin-bottom:4px;display:inline-flex;align-items:center}.input-wrapper .input-label .hint{margin:0 4px;line-height:12px}.input-wrapper .input-label .label-optional{font-size:var(--font-size-small, 12px);font-weight:normal;line-height:1.33;color:var(--hmc-color-content-subtle, var(--hmc-color-gray-700, #5e6773));margin-bottom:4px;margin-left:auto}.input-wrapper.error .input-group{border-color:var(--hmc-color-notification-danger-default-border, var(--hmc-color-system-danger-default, var(--hmc-color-red-700, #c81a28)))}.input-wrapper.warning .input-group{border-color:var(--hmc-color-notification-warning-default-border, var(--hmc-color-system-warning-default, var(--hmc-color-orange-500, #e76423)))}.input-wrapper .input-group{position:relative;display:flex;flex-direction:row;align-items:center;flex:1;border:solid 1px var(--hmc-color-interactive-subtle-idle, var(--hmc-color-gray-500, #848b95));border-radius:4px;padding:0 8px}.input-wrapper .input-group.with-prefix{padding-left:0}.input-wrapper .input-group.with-suffix{padding-right:0}.input-wrapper .input-group:hover{border-color:var(--hmc-color-interactive-subtle-hover, var(--hmc-color-gray-700, #5e6773))}.input-wrapper .input-group:focus-within{border-color:var(--hmc-color-interactive-focus, var(--hmc-color-system-highlight-default, var(--hmc-color-purple-500, #b16ee0)));box-shadow:inset 0px 0px 0px 1px var(--hmc-color-interactive-focus, var(--hmc-color-system-highlight-default, var(--hmc-color-purple-500, #b16ee0)))}.input-wrapper .input-group input{width:100%;font-weight:normal;line-height:20px;font-size:var(--font-size-default, 14px);color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820));padding:8px 0;outline:none;border:none;border-radius:4px;background:transparent;}.input-wrapper .input-group input::placeholder{color:var(--hmc-color-content-subtle, var(--hmc-color-gray-700, #5e6773))}.input-wrapper .input-group input::-webkit-outer-spin-button,.input-wrapper .input-group input::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}.input-wrapper .input-group input[type=number]{-moz-appearance:textfield}.input-wrapper .input-group .prefix,.input-wrapper .input-group .suffix{display:flex;margin:0 8px}.input-wrapper .input-group .clear-icon{color:var(--hmc-color-content-default, var(--hmc-color-gray-black, #101820));cursor:pointer}.input-wrapper.xs{font-size:var(--font-size-small, 12px)}.input-wrapper.xs .input-group{height:24px}.input-wrapper.xs input{height:20px;line-height:16px}.input-wrapper.xs input::placeholder{font-size:var(--font-size-small, 12px);line-height:16px}.input-wrapper.xs .label{font-size:var(--font-size-small, 12px);line-height:16px}.input-wrapper.sm .input-group{height:32px}.input-wrapper.sm input{height:28px}.input-wrapper.xs .prefix,.input-wrapper.xs .suffix,.input-wrapper.sm .prefix,.input-wrapper.sm .suffix{margin:0 4px}.input-wrapper.md .input-group{height:40px}.input-wrapper.md input{height:36px}.input-wrapper.disabled .input-group{border-color:var(--hmc-color-interactive-subtle-disabled, var(--hmc-color-gray-200, #d5d8dc));background:var(--hmc-color-system-info-silent, var(--hmc-color-gray-100, #f0f1f3))}.input-wrapper.disabled input,.input-wrapper.disabled .input-group,.input-wrapper.disabled input::placeholder{color:var(--hmc-color-content-silent, var(--hmc-color-gray-400, #9fa4ad));-webkit-text-fill-color:currentcolor;opacity:1}.input-wrapper.disabled input{background:none}.input-wrapper .helper-text{margin-top:4px}:host(.hovered):not(.disabled) input:not(:focus),.input-wrapper:hover:not(.disabled) input:not(:focus){border-color:var(--hmc-color-interactive-subtle-hover, var(--hmc-color-gray-700, #5e6773))}";

const FIELD_ID = 'hmc-input-id';
const HmcInputField = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.hmcInput = createEvent(this, "hmcInput", 7);
    this.hmcChange = createEvent(this, "hmcChange", 7);
    this.hmcBlur = createEvent(this, "hmcBlur", 7);
    this.hmcFocus = createEvent(this, "hmcFocus", 7);
    this._hasPrefix = false;
    this._hasSuffix = false;
    this.onBlur = event => {
      this.hmcBlur.emit(event);
    };
    this.onFocus = event => {
      this.hmcFocus.emit(event);
    };
    this.name = undefined;
    this.value = '';
    this.label = '';
    this.isDisabled = false;
    this.isFullWidth = false;
    this.status = 'normal';
    this.helperText = undefined;
    this.isAutoFocused = false;
    this.autoComplete = 'off';
    this.hasSpellcheck = 'false';
    this.enterKeyHint = undefined;
    this.inputMode = undefined;
    this.isClearable = false;
    this.isRequired = undefined;
    this.optionalText = undefined;
    this.size = 'md';
    this.width = '200';
    this.placeholder = undefined;
    this.fieldType = 'string';
    this.minLength = undefined;
    this.maxLength = undefined;
    this.min = undefined;
    this.max = undefined;
    this.step = undefined;
    this.isFocused = false;
  }
  valueChanged() {
    if (this.inputEl && this.inputEl.value !== this.value) {
      // NOTE: don't use setAttribute ('value', ...) here, because that doesn't change the value of the input in every case.
      // example: the current value of input is '-200', if the new value should be '200',
      // 'setAttribute('value', 200)' won't change the value in the input
      this.inputEl.value = this.value;
    }
  }
  onInput(event) {
    const input = event.target;
    if (input) {
      this.value = input.value || '';
    }
    this.hmcInput.emit({ value: this.value, nativeEvent: event });
  }
  onChange(event) {
    this.hmcChange.emit({ value: this.value, nativeEvent: event });
  }
  handleClear(e) {
    e.stopPropagation();
    if (this.inputEl) {
      this.inputEl.value = '';
      this.inputEl.focus();
      this.value = '';
    }
    this.hmcInput.emit({ value: '', nativeEvent: e });
    this.hmcChange.emit({ value: '', nativeEvent: e });
  }
  render() {
    const { autoComplete, fieldType, hasSpellcheck, helperText, inputMode, isAutoFocused, isClearable, isDisabled, isFullWidth, isRequired, label, max, maxLength, min, minLength, name, optionalText, placeholder, size, status, step, value, } = this;
    renderHiddenInput(this.el, name, isDisabled, this.value);
    this._hasPrefix = Boolean(this.el.querySelector('[slot="prefix"]'));
    this._hasSuffix = Boolean(this.el.querySelector('[slot="suffix"]'));
    const width = isFullWidth ? '100%' : this.width + 'px';
    const placeholderText = placeholder;
    const groupClassList = {
      'input-group': true,
      'with-prefix': this._hasPrefix,
      'with-suffix': this._hasSuffix,
    };
    const inputGroup = (h("div", { class: groupClassList }, this._hasPrefix && (h("div", { class: "prefix" }, h("slot", { name: "prefix" }))), h("input", { id: FIELD_ID, ref: el => (this.inputEl = el), type: fieldType, onInput: event => this.onInput(event), onChange: event => this.onChange(event), onBlur: e => {
        this.isFocused = false;
        this.onBlur(e);
      }, onFocus: e => {
        this.isFocused = true;
        this.onFocus(e);
      }, autoComplete: autoComplete, autoFocus: isAutoFocused, enterKeyHint: this.enterKeyHint, inputMode: inputMode, name: name, value: value, placeholder: placeholderText, disabled: isDisabled, minLength: minLength, maxLength: maxLength, spellcheck: hasSpellcheck, min: min, max: max, step: step, onWheel: ev => {
        if (fieldType === 'number' && this.isFocused) {
          ev.preventDefault();
        }
      } }), isClearable && this.value.length > 0 && (h("hmc-icon", { name: "close-circle-s", onClick: event => this.handleClear(event), class: "clear-icon" })), this._hasSuffix && !isClearable && (h("div", { class: "suffix" }, h("slot", { name: "suffix" })))));
    const wrappperClassList = {
      'input-wrapper': true,
      'disabled': isDisabled,
      'error': status === 'error',
      'warning': status === 'warning',
      [size]: true,
    };
    return (h(Host, { ref: ref => (this.rootEl = ref) }, h("div", { class: wrappperClassList, style: { width } }, h("div", { class: "input-label" }, !!label && (h("span", { class: "label" }, h("label", { htmlFor: FIELD_ID }, label), h("span", { class: "hint" }, h("slot", { name: "hint" })))), isRequired === false && (h("span", { class: "label-optional" }, optionalText))), inputGroup, status !== 'normal' && Boolean(helperText) && (h("div", { class: "helper-text" }, h("hmc-message", { status: status }, helperText))))));
  }
  get el() { return getElement(this); }
  static get watchers() { return {
    "value": ["valueChanged"]
  }; }
};
HmcInputField.style = inputFieldCss;

export { HmcInputField as hmc_input_field };
