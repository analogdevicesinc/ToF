trigger:
  branches: 
    exclude:
    - no_ci_*

variables:
  WORK_DIR: "$(Agent.BuildDirectory)/s"  
  BUILD_DIR:  "$(WORK_DIR)/build"
  DEPS_DIR: "$(BUILD_DIR)/deps"
  DEFAULT_CMAKE_FLAGS: "-DUSE_DEPTH_COMPUTE_STUBS=1 \
                        -DWITH_NETWORK=1 \
                        -DWITH_PYTHON=1 \
                        -DWITH_ROS=0 \
                        -DWITH_OPENCV=1 \ 
                        -DWITH_EXAMPLES=1 \
                        -DWITH_DOC=0 \
                        -DWITH_OPEN3D=0 \ 
                        -DCI_BUILD=1"
  NUM_JOBS: 4
  IS_PULL_REQUEST: ${{ eq('$(Build.Reason)', 'PullRequest') }}
  BRANCH_NAME: $(Build.SourceBranchName)
  REPO_SLUG: $(Build.Repository.Name)
  CURRENT_COMMIT: $(Build.SourceVersion)
  

jobs:
- job: LinuxBuilds
  strategy:
    matrix:
      
      #PC
      ubuntu_20_04_x86_64:
        imageName: 'ubuntu-20.04'

      ubuntu_22_04_x86_64:
        imageName: 'ubuntu-22.04'

      #IMX
      ubuntu_20_04_imx:
        imageName: 'ubuntu-20.04'
        DOCKER: "septimiuvana/tof-imx8-docker"
        EXTRA_CMAKE_FLAGS: "-DNXP=1"

      #code quality, TO DO: once entire code is formatted enable clang-format
      clang_format:
        imageName: 'ubuntu-22.04'
        BUILD_TYPE: "clang_format"

      cppcheck:
        imageName: 'ubuntu-20.04'
        BUILD_TYPE: "cppcheck"

      deploy_doxygen:
        imageName: 'ubuntu-20.04'
        BUILD_TYPE: "deploy_doxygen"

  pool:
    vmImage: $(imageName)
  steps:
  - checkout: self
    fetchDepth: 1
    clean: true
    persistCredentials: true

  - task: Cache@2
    condition: and(
      eq(variables['DOCKER'], ''),
      ne(variables['BUILD_TYPE'], 'clang_format'),
      ne(variables['BUILD_TYPE'], 'cppcheck'),
      ne(variables['BUILD_TYPE'], 'deploy_doxygen')
      )

    inputs:
      key: mykeyx | "$(imageName)" 
      restoreKeys: mykeyx | "$(imageName)"
      path: $(DEPS_DIR)
      cacheHitVar: CACHE_RESTORED
    
  - script: ./ci/azure/deps.sh
    condition: or(
      eq(variables.CACHE_RESTORED, 'false'), 
      eq(variables['BUILD_TYPE'], 'clang_format'),
      eq(variables['BUILD_TYPE'], 'cppcheck'),
      eq(variables['BUILD_TYPE'], 'deploy_doxygen')
      )
      
    displayName: "Install Dependencies"

  - script: ./ci/azure/run_build.sh
    displayName: "Build"

- job: WindowsBuild
  strategy:
    matrix:

      VS2019_Win64:
        imageName: 'windows-2019'
        COMPILER: 'Visual Studio 16 2019'
        ARCH: 'x64'
        artifactName: 'Windows-VS-16-2019-x64'

      VS2022_Win64:
        imageName: 'windows-2022'
        COMPILER: 'Visual Studio 17 2022'
        ARCH: 'x64'
        artifactName: 'Windows-VS-17-2022-x64'

  pool:
      vmImage: $[ variables['imageName'] ]
  steps:
  - checkout: self
    fetchDepth: 1
    clean: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.9'
  - task: Cache@2
    inputs:
      key: deps_windowsZ | "$(imageName)" 
      restoreKeys: deps_windowsZ | "$(imageName)"
      path: $(Agent.BuildDirectory)/s/deps_installed
      cacheHitVar: CACHE_RESTORED
  - task: PowerShell@2
    inputs:
      targetType: 'filePath'
      filePath: ./ci/azure/windows-build/install_deps.ps1
    condition: eq(variables.CACHE_RESTORED, 'false')
    displayName: "Install Dependencies"
  - task: PowerShell@2
    inputs:
      targetType: 'filePath'
      filePath: ./ci/azure/windows-build/build_sdk.ps1
    displayName: "Build"
