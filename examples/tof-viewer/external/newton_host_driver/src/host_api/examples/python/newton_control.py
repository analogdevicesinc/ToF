# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_newton_control')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_newton_control')
    _newton_control = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_newton_control', [dirname(__file__)])
        except ImportError:
            import _newton_control
            return _newton_control
        try:
            _mod = imp.load_module('_newton_control', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _newton_control = swig_import_helper()
    del swig_import_helper
else:
    import _newton_control
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

MAX_REG_LIST = _newton_control.MAX_REG_LIST
HOST_API_VERSION = _newton_control.HOST_API_VERSION
RSTN = _newton_control.RSTN
i2cScl_spisSclk = _newton_control.i2cScl_spisSclk
I2C_SCL = _newton_control.I2C_SCL
i2cSda_spisMosi = _newton_control.i2cSda_spisMosi
I2C_SDA = _newton_control.I2C_SDA
GPIO0_spisMiso_trstDft = _newton_control.GPIO0_spisMiso_trstDft
GPIO0 = _newton_control.GPIO0
GPIO1_spisScs = _newton_control.GPIO1_spisScs
GPIO1 = _newton_control.GPIO1
GPIO2_uartSout = _newton_control.GPIO2_uartSout
GPIO2 = _newton_control.GPIO2
GPIO3_uartSin = _newton_control.GPIO3_uartSin
GPIO3 = _newton_control.GPIO3
GPIO4_mboxOut_tdoDft = _newton_control.GPIO4_mboxOut_tdoDft
GPIO4 = _newton_control.GPIO4
GPIO5_fsync_tmsDft = _newton_control.GPIO5_fsync_tmsDft
GPIO5 = _newton_control.GPIO5
GPIO6_lightEn_trstHsp = _newton_control.GPIO6_lightEn_trstHsp
GPIO6 = _newton_control.GPIO6
GPIO7_spimSclk_tdiHsp = _newton_control.GPIO7_spimSclk_tdiHsp
GPIO7 = _newton_control.GPIO7
GPIO8_spimMosi_tmsHsp = _newton_control.GPIO8_spimMosi_tmsHsp
GPIO8 = _newton_control.GPIO8
GPIO9_spimScs_tck = _newton_control.GPIO9_spimScs_tck
GPIO9 = _newton_control.GPIO9
GPIO10_spimMiso_tdoHsp = _newton_control.GPIO10_spimMiso_tdoHsp
GPIO10 = _newton_control.GPIO10
PIN_HIGH = _newton_control.PIN_HIGH
PIN_LOW = _newton_control.PIN_LOW
class adi_ErrorLog_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, adi_ErrorLog_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, adi_ErrorLog_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MSFTDebugData0"] = _newton_control.adi_ErrorLog_s_MSFTDebugData0_set
    __swig_getmethods__["MSFTDebugData0"] = _newton_control.adi_ErrorLog_s_MSFTDebugData0_get
    if _newclass:
        MSFTDebugData0 = _swig_property(_newton_control.adi_ErrorLog_s_MSFTDebugData0_get, _newton_control.adi_ErrorLog_s_MSFTDebugData0_set)
    __swig_setmethods__["errorStatus"] = _newton_control.adi_ErrorLog_s_errorStatus_set
    __swig_getmethods__["errorStatus"] = _newton_control.adi_ErrorLog_s_errorStatus_get
    if _newclass:
        errorStatus = _swig_property(_newton_control.adi_ErrorLog_s_errorStatus_get, _newton_control.adi_ErrorLog_s_errorStatus_set)
    __swig_setmethods__["MSFTDebugData1"] = _newton_control.adi_ErrorLog_s_MSFTDebugData1_set
    __swig_getmethods__["MSFTDebugData1"] = _newton_control.adi_ErrorLog_s_MSFTDebugData1_get
    if _newclass:
        MSFTDebugData1 = _swig_property(_newton_control.adi_ErrorLog_s_MSFTDebugData1_get, _newton_control.adi_ErrorLog_s_MSFTDebugData1_set)
    __swig_setmethods__["data16"] = _newton_control.adi_ErrorLog_s_data16_set
    __swig_getmethods__["data16"] = _newton_control.adi_ErrorLog_s_data16_get
    if _newclass:
        data16 = _swig_property(_newton_control.adi_ErrorLog_s_data16_get, _newton_control.adi_ErrorLog_s_data16_set)

    def __init__(self):
        this = _newton_control.new_adi_ErrorLog_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_adi_ErrorLog_s
    __del__ = lambda self: None
adi_ErrorLog_s_swigregister = _newton_control.adi_ErrorLog_s_swigregister
adi_ErrorLog_s_swigregister(adi_ErrorLog_s)

PIN_RSTN = _newton_control.PIN_RSTN
PIN_I2C_SCL = _newton_control.PIN_I2C_SCL
PIN_I2C_SDA = _newton_control.PIN_I2C_SDA
PIN_GPIO0 = _newton_control.PIN_GPIO0
PIN_GPIO1 = _newton_control.PIN_GPIO1
PIN_GPIO2 = _newton_control.PIN_GPIO2
PIN_GPIO3 = _newton_control.PIN_GPIO3
PIN_GPIO4 = _newton_control.PIN_GPIO4
PIN_GPIO5 = _newton_control.PIN_GPIO5
PIN_GPIO6 = _newton_control.PIN_GPIO6
PIN_GPIO7 = _newton_control.PIN_GPIO7
PIN_GPIO8 = _newton_control.PIN_GPIO8
PIN_GPIO9 = _newton_control.PIN_GPIO9
PIN_GPIO10 = _newton_control.PIN_GPIO10
PIN_MODE_FUNCTIONAL = _newton_control.PIN_MODE_FUNCTIONAL
PIN_MODE_HSP_DEBUG = _newton_control.PIN_MODE_HSP_DEBUG
PIN_MODE_DFT_JTAG = _newton_control.PIN_MODE_DFT_JTAG
PIN_MODE_PROD_SCAN = _newton_control.PIN_MODE_PROD_SCAN
PIN_MODE_FIELD_RETURN_SCAN = _newton_control.PIN_MODE_FIELD_RETURN_SCAN
PIN_MODE_KEEP_CURRENT_MODE = _newton_control.PIN_MODE_KEEP_CURRENT_MODE
NO_ATTR = _newton_control.NO_ATTR
WRITE_ATTR = _newton_control.WRITE_ATTR
SIGNED_ATTR = _newton_control.SIGNED_ATTR
ENCRYPTED_ATTR = _newton_control.ENCRYPTED_ATTR
GROUPED_ATTR = _newton_control.GROUPED_ATTR
MBX_UNSIGNED_SEQ_WFI = _newton_control.MBX_UNSIGNED_SEQ_WFI
MBX_UNSIGNED_SEQ_1SP = _newton_control.MBX_UNSIGNED_SEQ_1SP
MBX_ADI_SEQ_WFI = _newton_control.MBX_ADI_SEQ_WFI
MBX_ADI_SEQ_1SP = _newton_control.MBX_ADI_SEQ_1SP
MBX_ADI_SEQ_PROD_1SP = _newton_control.MBX_ADI_SEQ_PROD_1SP
MBX_MSFT_SEQ_PROD_1SP = _newton_control.MBX_MSFT_SEQ_PROD_1SP
MBX_MSFT_ADI_SEQ_PROD_1SP = _newton_control.MBX_MSFT_ADI_SEQ_PROD_1SP
CMD_GROUPED_DATA = _newton_control.CMD_GROUPED_DATA
CMD_SEQ_RAM = _newton_control.CMD_SEQ_RAM
CMD_WAVE_RAM = _newton_control.CMD_WAVE_RAM
CMD_MAP_RAM = _newton_control.CMD_MAP_RAM
CMD_DATAPATH_RAM = _newton_control.CMD_DATAPATH_RAM
CMD_DUMP_ENGINE_RAM = _newton_control.CMD_DUMP_ENGINE_RAM
CMD_LPS1_RAM = _newton_control.CMD_LPS1_RAM
CMD_LPS2_RAM = _newton_control.CMD_LPS2_RAM
CMD_REGISTER_CFG = _newton_control.CMD_REGISTER_CFG
CMD_1SP_IMAGE = _newton_control.CMD_1SP_IMAGE
CMD_ERROR_LOG = _newton_control.CMD_ERROR_LOG
CMD_PUBLIC_KEY = _newton_control.CMD_PUBLIC_KEY
CMD_SIGNATURE = _newton_control.CMD_SIGNATURE
CMD_OPERATING_MODE = _newton_control.CMD_OPERATING_MODE
USEQ_SEQ_RAM = _newton_control.USEQ_SEQ_RAM
USEQ_MAP_RAM = _newton_control.USEQ_MAP_RAM
USEQ_WAVE_RAM = _newton_control.USEQ_WAVE_RAM
DATAPATH_RAM = _newton_control.DATAPATH_RAM
DE_RAM = _newton_control.DE_RAM
LPS1_RAM = _newton_control.LPS1_RAM
LPS2_RAM = _newton_control.LPS2_RAM
CMD_FILE = _newton_control.CMD_FILE
HSP_ROM = _newton_control.HSP_ROM
HSP_RAM = _newton_control.HSP_RAM
EFUSE = _newton_control.EFUSE
HSP_ROM_WIDTH = _newton_control.HSP_ROM_WIDTH
HSP_RAM_WIDTH = _newton_control.HSP_RAM_WIDTH
EFUSE_WIDTH = _newton_control.EFUSE_WIDTH
USEQ_SEQ_RAM_WIDTH = _newton_control.USEQ_SEQ_RAM_WIDTH
USEQ_MAP_RAM_WIDTH = _newton_control.USEQ_MAP_RAM_WIDTH
USEQ_WAVE_RAM_WIDTH = _newton_control.USEQ_WAVE_RAM_WIDTH
DATAPATH_RAM_WIDTH = _newton_control.DATAPATH_RAM_WIDTH
DE_RAM_WIDTH = _newton_control.DE_RAM_WIDTH
LPS1_RAM_WIDTH = _newton_control.LPS1_RAM_WIDTH
LPS2_RAM_WIDTH = _newton_control.LPS2_RAM_WIDTH
USEQ_SEQ_RAM_WIDTH_BYTES = _newton_control.USEQ_SEQ_RAM_WIDTH_BYTES
USEQ_MAP_RAM_WIDTH_BYTES = _newton_control.USEQ_MAP_RAM_WIDTH_BYTES
USEQ_WAVE_RAM_WIDTH_BYTES = _newton_control.USEQ_WAVE_RAM_WIDTH_BYTES
DATAPATH_RAM_WIDTH_BYTES = _newton_control.DATAPATH_RAM_WIDTH_BYTES
DE_RAM_WIDTH_BYTES = _newton_control.DE_RAM_WIDTH_BYTES
LPS1_RAM_WIDTH_BYTES = _newton_control.LPS1_RAM_WIDTH_BYTES
LPS2_RAM_WIDTH_BYTES = _newton_control.LPS2_RAM_WIDTH_BYTES
USEQ_SEQ_RAM_DEPTH = _newton_control.USEQ_SEQ_RAM_DEPTH
USEQ_MAP_RAM_DEPTH = _newton_control.USEQ_MAP_RAM_DEPTH
USEQ_WAVE_RAM_DEPTH = _newton_control.USEQ_WAVE_RAM_DEPTH
DATAPATH_RAM_DEPTH = _newton_control.DATAPATH_RAM_DEPTH
DE_RAM_DEPTH = _newton_control.DE_RAM_DEPTH
LPS1_RAM_DEPTH = _newton_control.LPS1_RAM_DEPTH
LPS2_RAM_DEPTH = _newton_control.LPS2_RAM_DEPTH
USEQ_SEQ_RAM_MASK = _newton_control.USEQ_SEQ_RAM_MASK
USEQ_MAP_RAM_MASK = _newton_control.USEQ_MAP_RAM_MASK
USEQ_WAVE_RAM_MASK = _newton_control.USEQ_WAVE_RAM_MASK
DATAPATH_RAM_MASK = _newton_control.DATAPATH_RAM_MASK
DE_RAM_MASK = _newton_control.DE_RAM_MASK
LPS1_RAM_MASK = _newton_control.LPS1_RAM_MASK
LPS2_RAM_MASK = _newton_control.LPS2_RAM_MASK
CMD_LOAD_HEADER = _newton_control.CMD_LOAD_HEADER
CMD_GROUPED_DATA_WRITE = _newton_control.CMD_GROUPED_DATA_WRITE
CMD_LOAD_REG_WRITE = _newton_control.CMD_LOAD_REG_WRITE
CMD_LOAD_REG_READ = _newton_control.CMD_LOAD_REG_READ
CMD_LOAD_RAM_WRITE = _newton_control.CMD_LOAD_RAM_WRITE
CMD_LOAD_ERROR_LOG = _newton_control.CMD_LOAD_ERROR_LOG
CMD_LOAD_1SP_IMAGE = _newton_control.CMD_LOAD_1SP_IMAGE
CMD_LOAD_SIGNATURE = _newton_control.CMD_LOAD_SIGNATURE
CMD_LOAD_PUBLIC_KEY = _newton_control.CMD_LOAD_PUBLIC_KEY
CMD_LOAD_OPERATING_MODE = _newton_control.CMD_LOAD_OPERATING_MODE
CMD_LOAD_UNKNOWN = _newton_control.CMD_LOAD_UNKNOWN
HSP_SUCCESS = _newton_control.HSP_SUCCESS
HSP_UNKNOWN_ERROR = _newton_control.HSP_UNKNOWN_ERROR
HSP_INVALID_PARAMETER = _newton_control.HSP_INVALID_PARAMETER
HSP_NOT_IMPLEMENTED = _newton_control.HSP_NOT_IMPLEMENTED
HSP_COMMAND_ERROR = _newton_control.HSP_COMMAND_ERROR
HSP_BUS_ERROR = _newton_control.HSP_BUS_ERROR
HSP_FAULT_ERROR = _newton_control.HSP_FAULT_ERROR
HSP_NOT_OWNER_ERROR = _newton_control.HSP_NOT_OWNER_ERROR
HSP_BUSY_STATE = _newton_control.HSP_BUSY_STATE
HSP_SIGNATURE_MISMATCH = _newton_control.HSP_SIGNATURE_MISMATCH
HSP_AUTHENTICATION_FAILED = _newton_control.HSP_AUTHENTICATION_FAILED
HSP_IRQ_STATE = _newton_control.HSP_IRQ_STATE
HSP_FIQ_STATE = _newton_control.HSP_FIQ_STATE
HSP_KEY_NOT_ZERO_ERROR = _newton_control.HSP_KEY_NOT_ZERO_ERROR
HSP_BLANK_CHECK_FAIL = _newton_control.HSP_BLANK_CHECK_FAIL
HSP_ECC_CORRECTION_FAIL = _newton_control.HSP_ECC_CORRECTION_FAIL
HSP_SVN_VERSION_MISMATCH = _newton_control.HSP_SVN_VERSION_MISMATCH
HSP_INVALID_OPERATING_MODE = _newton_control.HSP_INVALID_OPERATING_MODE
HSP_INVALID_CEK_KEY = _newton_control.HSP_INVALID_CEK_KEY
HSP_DECRYPTION_FAILED = _newton_control.HSP_DECRYPTION_FAILED
HSP_SW_FAULT = _newton_control.HSP_SW_FAULT
HSP_HW_FAULT = _newton_control.HSP_HW_FAULT
HSP_FIQ_UNHANDLED = _newton_control.HSP_FIQ_UNHANDLED
HSP_FIQ_CRYPTO_ERR = _newton_control.HSP_FIQ_CRYPTO_ERR
HSP_FIQ_ACC_VIO = _newton_control.HSP_FIQ_ACC_VIO
HSP_FIQ_MEM_EDC_ERR = _newton_control.HSP_FIQ_MEM_EDC_ERR
HSP_FIQ_MEM_ERASE_ERR = _newton_control.HSP_FIQ_MEM_ERASE_ERR
HSP_FIQ_SP_BUS_ERR = _newton_control.HSP_FIQ_SP_BUS_ERR
HSP_FIQ_FATAL_UNHANDLED = _newton_control.HSP_FIQ_FATAL_UNHANDLED
HSP_MBX_INVALID_CMD_ERROR = _newton_control.HSP_MBX_INVALID_CMD_ERROR
HSP_MBX_INVALID_SIZE_ERROR = _newton_control.HSP_MBX_INVALID_SIZE_ERROR
HSP_MBX_INVALID_ADDR_ERROR = _newton_control.HSP_MBX_INVALID_ADDR_ERROR
HSP_MBX_INVALID_ATTRIBUTE_ERROR = _newton_control.HSP_MBX_INVALID_ATTRIBUTE_ERROR
HSP_MBX_REGISTER_ACCESS_ERROR = _newton_control.HSP_MBX_REGISTER_ACCESS_ERROR
HSP_MBX_EXCEED_ENCRYPT_ENTRIES_ERROR = _newton_control.HSP_MBX_EXCEED_ENCRYPT_ENTRIES_ERROR
HSP_MBX_SIGN_VERF_FAIL_ERROR = _newton_control.HSP_MBX_SIGN_VERF_FAIL_ERROR
HSP_MBX_INVALID_AUTH_CERT = _newton_control.HSP_MBX_INVALID_AUTH_CERT
HSP_MBX_GROUPED_DATA_SIZE_MISMATCH_ERROR = _newton_control.HSP_MBX_GROUPED_DATA_SIZE_MISMATCH_ERROR
HSP_MBX_SEQ_ERROR = _newton_control.HSP_MBX_SEQ_ERROR
USEQ_REGS_USEQRAMLOADADDR = _newton_control.USEQ_REGS_USEQRAMLOADADDR
USEQ_REGS_USEQRAMRDSTADDR = _newton_control.USEQ_REGS_USEQRAMRDSTADDR
USEQ_REGS_USEQRAMLOADDATA = _newton_control.USEQ_REGS_USEQRAMLOADDATA
USEQ_REGS_USEQRAMRDDATA = _newton_control.USEQ_REGS_USEQRAMRDDATA
LPS1_REGS_LPSRAMADDR = _newton_control.LPS1_REGS_LPSRAMADDR
LPS1_REGS_LPSRAMRDCMD = _newton_control.LPS1_REGS_LPSRAMRDCMD
LPS1_REGS_LPSRAMDATA = _newton_control.LPS1_REGS_LPSRAMDATA
LPS2_REGS_LPSRAMADDR = _newton_control.LPS2_REGS_LPSRAMADDR
LPS2_REGS_LPSRAMRDCMD = _newton_control.LPS2_REGS_LPSRAMRDCMD
LPS2_REGS_LPSRAMDATA = _newton_control.LPS2_REGS_LPSRAMDATA
DATAPATH_REGS_IA_SELECT = _newton_control.DATAPATH_REGS_IA_SELECT
DATAPATH_REGS_IA_ADDR_REG = _newton_control.DATAPATH_REGS_IA_ADDR_REG
DATAPATH_REGS_IA_WRDATA_REG = _newton_control.DATAPATH_REGS_IA_WRDATA_REG
DATAPATH_REGS_IA_RDDATA_REG = _newton_control.DATAPATH_REGS_IA_RDDATA_REG
DATAPATH_REGS_IA_BANK_TYPE = _newton_control.DATAPATH_REGS_IA_BANK_TYPE
DE_REGS_DE_IA_SELECT = _newton_control.DE_REGS_DE_IA_SELECT
DE_REGS_DE_IA_ADDR_REG = _newton_control.DE_REGS_DE_IA_ADDR_REG
DE_REGS_DE_IA_WRDATA_REG = _newton_control.DE_REGS_DE_IA_WRDATA_REG
DE_REGS_DE_IA_RDDATA_REG = _newton_control.DE_REGS_DE_IA_RDDATA_REG
class ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LD_RAM_SEL"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_LD_RAM_SEL_set
    __swig_getmethods__["LD_RAM_SEL"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_LD_RAM_SEL_get
    if _newclass:
        LD_RAM_SEL = _swig_property(_newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_LD_RAM_SEL_get, _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_LD_RAM_SEL_set)
    __swig_setmethods__["LD_ADDR"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_LD_ADDR_set
    __swig_getmethods__["LD_ADDR"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_LD_ADDR_get
    if _newclass:
        LD_ADDR = _swig_property(_newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_LD_ADDR_get, _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_LD_ADDR_set)
    __swig_setmethods__["RESERVED14"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_RESERVED14_set
    __swig_getmethods__["RESERVED14"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_RESERVED14_get
    if _newclass:
        RESERVED14 = _swig_property(_newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_RESERVED14_get, _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_RESERVED14_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_VALUE16_get, _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s
    __del__ = lambda self: None
ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_swigregister = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_swigregister
ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s_swigregister(ADI_USEQ_REGS_MAP1_USEQRAMLOADADDR_s)
cvar = _newton_control.cvar

class ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["RD_RAM_SEL"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_RD_RAM_SEL_set
    __swig_getmethods__["RD_RAM_SEL"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_RD_RAM_SEL_get
    if _newclass:
        RD_RAM_SEL = _swig_property(_newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_RD_RAM_SEL_get, _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_RD_RAM_SEL_set)
    __swig_setmethods__["RD_ADDR"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_RD_ADDR_set
    __swig_getmethods__["RD_ADDR"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_RD_ADDR_get
    if _newclass:
        RD_ADDR = _swig_property(_newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_RD_ADDR_get, _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_RD_ADDR_set)
    __swig_setmethods__["RESERVED14"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_RESERVED14_set
    __swig_getmethods__["RESERVED14"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_RESERVED14_get
    if _newclass:
        RESERVED14 = _swig_property(_newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_RESERVED14_get, _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_RESERVED14_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_VALUE16_get, _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s
    __del__ = lambda self: None
ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_swigregister = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_swigregister
ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s_swigregister(ADI_USEQ_REGS_MAP1_USEQRAMRDSTADDR_s)

class ADI_USEQ_REGS_MAP1_USEQRAMLOADDATA_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_USEQ_REGS_MAP1_USEQRAMLOADDATA_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_USEQ_REGS_MAP1_USEQRAMLOADDATA_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LD_DATA"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADDATA_s_LD_DATA_set
    __swig_getmethods__["LD_DATA"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADDATA_s_LD_DATA_get
    if _newclass:
        LD_DATA = _swig_property(_newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADDATA_s_LD_DATA_get, _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADDATA_s_LD_DATA_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADDATA_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADDATA_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADDATA_s_VALUE16_get, _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADDATA_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_USEQ_REGS_MAP1_USEQRAMLOADDATA_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_USEQ_REGS_MAP1_USEQRAMLOADDATA_s
    __del__ = lambda self: None
ADI_USEQ_REGS_MAP1_USEQRAMLOADDATA_s_swigregister = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADDATA_s_swigregister
ADI_USEQ_REGS_MAP1_USEQRAMLOADDATA_s_swigregister(ADI_USEQ_REGS_MAP1_USEQRAMLOADDATA_s)

class ADI_USEQ_REGS_MAP1_USEQRAMLOADDATAALIAS_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_USEQ_REGS_MAP1_USEQRAMLOADDATAALIAS_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_USEQ_REGS_MAP1_USEQRAMLOADDATAALIAS_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LD_DATA_ALIAS"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADDATAALIAS_s_LD_DATA_ALIAS_set
    __swig_getmethods__["LD_DATA_ALIAS"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADDATAALIAS_s_LD_DATA_ALIAS_get
    if _newclass:
        LD_DATA_ALIAS = _swig_property(_newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADDATAALIAS_s_LD_DATA_ALIAS_get, _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADDATAALIAS_s_LD_DATA_ALIAS_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADDATAALIAS_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADDATAALIAS_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADDATAALIAS_s_VALUE16_get, _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADDATAALIAS_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_USEQ_REGS_MAP1_USEQRAMLOADDATAALIAS_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_USEQ_REGS_MAP1_USEQRAMLOADDATAALIAS_s
    __del__ = lambda self: None
ADI_USEQ_REGS_MAP1_USEQRAMLOADDATAALIAS_s_swigregister = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMLOADDATAALIAS_s_swigregister
ADI_USEQ_REGS_MAP1_USEQRAMLOADDATAALIAS_s_swigregister(ADI_USEQ_REGS_MAP1_USEQRAMLOADDATAALIAS_s)

class ADI_USEQ_REGS_MAP1_USEQRAMRDDATA_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_USEQ_REGS_MAP1_USEQRAMRDDATA_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_USEQ_REGS_MAP1_USEQRAMRDDATA_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["USEQ_RAM_RD_DATA"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDDATA_s_USEQ_RAM_RD_DATA_set
    __swig_getmethods__["USEQ_RAM_RD_DATA"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDDATA_s_USEQ_RAM_RD_DATA_get
    if _newclass:
        USEQ_RAM_RD_DATA = _swig_property(_newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDDATA_s_USEQ_RAM_RD_DATA_get, _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDDATA_s_USEQ_RAM_RD_DATA_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDDATA_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDDATA_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDDATA_s_VALUE16_get, _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDDATA_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_USEQ_REGS_MAP1_USEQRAMRDDATA_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_USEQ_REGS_MAP1_USEQRAMRDDATA_s
    __del__ = lambda self: None
ADI_USEQ_REGS_MAP1_USEQRAMRDDATA_s_swigregister = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDDATA_s_swigregister
ADI_USEQ_REGS_MAP1_USEQRAMRDDATA_s_swigregister(ADI_USEQ_REGS_MAP1_USEQRAMRDDATA_s)

class ADI_USEQ_REGS_MAP1_USEQRAMRDDATAALIAS_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_USEQ_REGS_MAP1_USEQRAMRDDATAALIAS_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_USEQ_REGS_MAP1_USEQRAMRDDATAALIAS_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["USEQ_RAM_RD_DATA_ALIAS"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDDATAALIAS_s_USEQ_RAM_RD_DATA_ALIAS_set
    __swig_getmethods__["USEQ_RAM_RD_DATA_ALIAS"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDDATAALIAS_s_USEQ_RAM_RD_DATA_ALIAS_get
    if _newclass:
        USEQ_RAM_RD_DATA_ALIAS = _swig_property(_newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDDATAALIAS_s_USEQ_RAM_RD_DATA_ALIAS_get, _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDDATAALIAS_s_USEQ_RAM_RD_DATA_ALIAS_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDDATAALIAS_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDDATAALIAS_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDDATAALIAS_s_VALUE16_get, _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDDATAALIAS_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_USEQ_REGS_MAP1_USEQRAMRDDATAALIAS_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_USEQ_REGS_MAP1_USEQRAMRDDATAALIAS_s
    __del__ = lambda self: None
ADI_USEQ_REGS_MAP1_USEQRAMRDDATAALIAS_s_swigregister = _newton_control.ADI_USEQ_REGS_MAP1_USEQRAMRDDATAALIAS_s_swigregister
ADI_USEQ_REGS_MAP1_USEQRAMRDDATAALIAS_s_swigregister(ADI_USEQ_REGS_MAP1_USEQRAMRDDATAALIAS_s)

class ADI_LPS_REGS_YODA_LPSCTRL_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_LPS_REGS_YODA_LPSCTRL_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_LPS_REGS_YODA_LPSCTRL_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LPS_ENA"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_ENA_set
    __swig_getmethods__["LPS_ENA"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_ENA_get
    if _newclass:
        LPS_ENA = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_ENA_get, _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_ENA_set)
    __swig_setmethods__["RESERVED1"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_RESERVED1_set
    __swig_getmethods__["RESERVED1"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_RESERVED1_get
    if _newclass:
        RESERVED1 = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_RESERVED1_get, _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_RESERVED1_set)
    __swig_setmethods__["LPS_BUSY"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_BUSY_set
    __swig_getmethods__["LPS_BUSY"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_BUSY_get
    if _newclass:
        LPS_BUSY = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_BUSY_get, _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_BUSY_set)
    __swig_setmethods__["RESERVED"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_RESERVED_set
    __swig_getmethods__["RESERVED"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_RESERVED_get
    if _newclass:
        RESERVED = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_RESERVED_get, _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_RESERVED_set)
    __swig_setmethods__["LPS_START_EN"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_START_EN_set
    __swig_getmethods__["LPS_START_EN"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_START_EN_get
    if _newclass:
        LPS_START_EN = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_START_EN_get, _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_START_EN_set)
    __swig_setmethods__["LPS_RPT_EN"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_RPT_EN_set
    __swig_getmethods__["LPS_RPT_EN"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_RPT_EN_get
    if _newclass:
        LPS_RPT_EN = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_RPT_EN_get, _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_RPT_EN_set)
    __swig_setmethods__["LPS_ON"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_ON_set
    __swig_getmethods__["LPS_ON"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_ON_get
    if _newclass:
        LPS_ON = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_ON_get, _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_ON_set)
    __swig_setmethods__["LPS_OFF"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_OFF_set
    __swig_getmethods__["LPS_OFF"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_OFF_get
    if _newclass:
        LPS_OFF = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_OFF_get, _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_OFF_set)
    __swig_setmethods__["LPS_ON_IGNORE"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_ON_IGNORE_set
    __swig_getmethods__["LPS_ON_IGNORE"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_ON_IGNORE_get
    if _newclass:
        LPS_ON_IGNORE = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_ON_IGNORE_get, _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_LPS_ON_IGNORE_set)
    __swig_setmethods__["RESERVED9"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_RESERVED9_set
    __swig_getmethods__["RESERVED9"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_RESERVED9_get
    if _newclass:
        RESERVED9 = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_RESERVED9_get, _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_RESERVED9_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_VALUE16_get, _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_LPS_REGS_YODA_LPSCTRL_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_LPS_REGS_YODA_LPSCTRL_s
    __del__ = lambda self: None
ADI_LPS_REGS_YODA_LPSCTRL_s_swigregister = _newton_control.ADI_LPS_REGS_YODA_LPSCTRL_s_swigregister
ADI_LPS_REGS_YODA_LPSCTRL_s_swigregister(ADI_LPS_REGS_YODA_LPSCTRL_s)

class ADI_LPS_REGS_YODA_LPSWAVEFREQ_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_LPS_REGS_YODA_LPSWAVEFREQ_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_LPS_REGS_YODA_LPSWAVEFREQ_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LPS_WAVE_FREQ"] = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEFREQ_s_LPS_WAVE_FREQ_set
    __swig_getmethods__["LPS_WAVE_FREQ"] = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEFREQ_s_LPS_WAVE_FREQ_get
    if _newclass:
        LPS_WAVE_FREQ = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSWAVEFREQ_s_LPS_WAVE_FREQ_get, _newton_control.ADI_LPS_REGS_YODA_LPSWAVEFREQ_s_LPS_WAVE_FREQ_set)
    __swig_setmethods__["RESERVED8"] = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEFREQ_s_RESERVED8_set
    __swig_getmethods__["RESERVED8"] = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEFREQ_s_RESERVED8_get
    if _newclass:
        RESERVED8 = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSWAVEFREQ_s_RESERVED8_get, _newton_control.ADI_LPS_REGS_YODA_LPSWAVEFREQ_s_RESERVED8_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEFREQ_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEFREQ_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSWAVEFREQ_s_VALUE16_get, _newton_control.ADI_LPS_REGS_YODA_LPSWAVEFREQ_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_LPS_REGS_YODA_LPSWAVEFREQ_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_LPS_REGS_YODA_LPSWAVEFREQ_s
    __del__ = lambda self: None
ADI_LPS_REGS_YODA_LPSWAVEFREQ_s_swigregister = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEFREQ_s_swigregister
ADI_LPS_REGS_YODA_LPSWAVEFREQ_s_swigregister(ADI_LPS_REGS_YODA_LPSWAVEFREQ_s)

class ADI_LPS_REGS_YODA_LPSWAVEGENACC_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_LPS_REGS_YODA_LPSWAVEGENACC_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_LPS_REGS_YODA_LPSWAVEGENACC_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LPS_WG_ACC"] = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENACC_s_LPS_WG_ACC_set
    __swig_getmethods__["LPS_WG_ACC"] = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENACC_s_LPS_WG_ACC_get
    if _newclass:
        LPS_WG_ACC = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENACC_s_LPS_WG_ACC_get, _newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENACC_s_LPS_WG_ACC_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENACC_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENACC_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENACC_s_VALUE16_get, _newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENACC_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_LPS_REGS_YODA_LPSWAVEGENACC_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_LPS_REGS_YODA_LPSWAVEGENACC_s
    __del__ = lambda self: None
ADI_LPS_REGS_YODA_LPSWAVEGENACC_s_swigregister = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENACC_s_swigregister
ADI_LPS_REGS_YODA_LPSWAVEGENACC_s_swigregister(ADI_LPS_REGS_YODA_LPSWAVEGENACC_s)

class ADI_LPS_REGS_YODA_LPSRAMADDR_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_LPS_REGS_YODA_LPSRAMADDR_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_LPS_REGS_YODA_LPSRAMADDR_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LPS_RAM_ADDR"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMADDR_s_LPS_RAM_ADDR_set
    __swig_getmethods__["LPS_RAM_ADDR"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMADDR_s_LPS_RAM_ADDR_get
    if _newclass:
        LPS_RAM_ADDR = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSRAMADDR_s_LPS_RAM_ADDR_get, _newton_control.ADI_LPS_REGS_YODA_LPSRAMADDR_s_LPS_RAM_ADDR_set)
    __swig_setmethods__["RESERVED9"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMADDR_s_RESERVED9_set
    __swig_getmethods__["RESERVED9"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMADDR_s_RESERVED9_get
    if _newclass:
        RESERVED9 = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSRAMADDR_s_RESERVED9_get, _newton_control.ADI_LPS_REGS_YODA_LPSRAMADDR_s_RESERVED9_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMADDR_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMADDR_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSRAMADDR_s_VALUE16_get, _newton_control.ADI_LPS_REGS_YODA_LPSRAMADDR_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_LPS_REGS_YODA_LPSRAMADDR_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_LPS_REGS_YODA_LPSRAMADDR_s
    __del__ = lambda self: None
ADI_LPS_REGS_YODA_LPSRAMADDR_s_swigregister = _newton_control.ADI_LPS_REGS_YODA_LPSRAMADDR_s_swigregister
ADI_LPS_REGS_YODA_LPSRAMADDR_s_swigregister(ADI_LPS_REGS_YODA_LPSRAMADDR_s)

class ADI_LPS_REGS_YODA_LPSRAMRDCMD_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_LPS_REGS_YODA_LPSRAMRDCMD_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_LPS_REGS_YODA_LPSRAMRDCMD_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LPS_RAM_READ_EN"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_LPS_RAM_READ_EN_set
    __swig_getmethods__["LPS_RAM_READ_EN"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_LPS_RAM_READ_EN_get
    if _newclass:
        LPS_RAM_READ_EN = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_LPS_RAM_READ_EN_get, _newton_control.ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_LPS_RAM_READ_EN_set)
    __swig_setmethods__["LPS_RAM_READ_RDY"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_LPS_RAM_READ_RDY_set
    __swig_getmethods__["LPS_RAM_READ_RDY"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_LPS_RAM_READ_RDY_get
    if _newclass:
        LPS_RAM_READ_RDY = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_LPS_RAM_READ_RDY_get, _newton_control.ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_LPS_RAM_READ_RDY_set)
    __swig_setmethods__["RESERVED2"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_RESERVED2_get
    if _newclass:
        RESERVED2 = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_RESERVED2_get, _newton_control.ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_RESERVED2_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_VALUE16_get, _newton_control.ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_LPS_REGS_YODA_LPSRAMRDCMD_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_LPS_REGS_YODA_LPSRAMRDCMD_s
    __del__ = lambda self: None
ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_swigregister = _newton_control.ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_swigregister
ADI_LPS_REGS_YODA_LPSRAMRDCMD_s_swigregister(ADI_LPS_REGS_YODA_LPSRAMRDCMD_s)

class ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LPS_RAM_START"] = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s_LPS_RAM_START_set
    __swig_getmethods__["LPS_RAM_START"] = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s_LPS_RAM_START_get
    if _newclass:
        LPS_RAM_START = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s_LPS_RAM_START_get, _newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s_LPS_RAM_START_set)
    __swig_setmethods__["LPS_RAM_END"] = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s_LPS_RAM_END_set
    __swig_getmethods__["LPS_RAM_END"] = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s_LPS_RAM_END_get
    if _newclass:
        LPS_RAM_END = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s_LPS_RAM_END_get, _newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s_LPS_RAM_END_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s_VALUE16_get, _newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s
    __del__ = lambda self: None
ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s_swigregister = _newton_control.ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s_swigregister
ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s_swigregister(ADI_LPS_REGS_YODA_LPSWAVEGENADDR_s)

class ADI_LPS_REGS_YODA_LPSMARGIN_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_LPS_REGS_YODA_LPSMARGIN_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_LPS_REGS_YODA_LPSMARGIN_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LPS_PORT0_MARGIN"] = _newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_LPS_PORT0_MARGIN_set
    __swig_getmethods__["LPS_PORT0_MARGIN"] = _newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_LPS_PORT0_MARGIN_get
    if _newclass:
        LPS_PORT0_MARGIN = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_LPS_PORT0_MARGIN_get, _newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_LPS_PORT0_MARGIN_set)
    __swig_setmethods__["LPS_PORT1_MARGIN"] = _newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_LPS_PORT1_MARGIN_set
    __swig_getmethods__["LPS_PORT1_MARGIN"] = _newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_LPS_PORT1_MARGIN_get
    if _newclass:
        LPS_PORT1_MARGIN = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_LPS_PORT1_MARGIN_get, _newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_LPS_PORT1_MARGIN_set)
    __swig_setmethods__["RESERVED2"] = _newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_RESERVED2_get
    if _newclass:
        RESERVED2 = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_RESERVED2_get, _newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_RESERVED2_set)
    __swig_setmethods__["LPS_PARITY_ERR"] = _newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_LPS_PARITY_ERR_set
    __swig_getmethods__["LPS_PARITY_ERR"] = _newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_LPS_PARITY_ERR_get
    if _newclass:
        LPS_PARITY_ERR = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_LPS_PARITY_ERR_get, _newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_LPS_PARITY_ERR_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_VALUE16_get, _newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_LPS_REGS_YODA_LPSMARGIN_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_LPS_REGS_YODA_LPSMARGIN_s
    __del__ = lambda self: None
ADI_LPS_REGS_YODA_LPSMARGIN_s_swigregister = _newton_control.ADI_LPS_REGS_YODA_LPSMARGIN_s_swigregister
ADI_LPS_REGS_YODA_LPSMARGIN_s_swigregister(ADI_LPS_REGS_YODA_LPSMARGIN_s)

class ADI_LPS_REGS_YODA_LPSDBG_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_LPS_REGS_YODA_LPSDBG_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_LPS_REGS_YODA_LPSDBG_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LPSDBGSEL"] = _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_LPSDBGSEL_set
    __swig_getmethods__["LPSDBGSEL"] = _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_LPSDBGSEL_get
    if _newclass:
        LPSDBGSEL = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_LPSDBGSEL_get, _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_LPSDBGSEL_set)
    __swig_setmethods__["RESERVED3"] = _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_RESERVED3_set
    __swig_getmethods__["RESERVED3"] = _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_RESERVED3_get
    if _newclass:
        RESERVED3 = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_RESERVED3_get, _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_RESERVED3_set)
    __swig_setmethods__["LPSDBGCOM"] = _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_LPSDBGCOM_set
    __swig_getmethods__["LPSDBGCOM"] = _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_LPSDBGCOM_get
    if _newclass:
        LPSDBGCOM = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_LPSDBGCOM_get, _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_LPSDBGCOM_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_RESERVED10_get, _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_RESERVED10_set)
    __swig_setmethods__["LPSDBGEN"] = _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_LPSDBGEN_set
    __swig_getmethods__["LPSDBGEN"] = _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_LPSDBGEN_get
    if _newclass:
        LPSDBGEN = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_LPSDBGEN_get, _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_LPSDBGEN_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_VALUE16_get, _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_LPS_REGS_YODA_LPSDBG_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_LPS_REGS_YODA_LPSDBG_s
    __del__ = lambda self: None
ADI_LPS_REGS_YODA_LPSDBG_s_swigregister = _newton_control.ADI_LPS_REGS_YODA_LPSDBG_s_swigregister
ADI_LPS_REGS_YODA_LPSDBG_s_swigregister(ADI_LPS_REGS_YODA_LPSDBG_s)

class ADI_LPS_REGS_YODA_LPSRAMDATA_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_LPS_REGS_YODA_LPSRAMDATA_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_LPS_REGS_YODA_LPSRAMDATA_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LPS_RAM_DATA"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMDATA_s_LPS_RAM_DATA_set
    __swig_getmethods__["LPS_RAM_DATA"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMDATA_s_LPS_RAM_DATA_get
    if _newclass:
        LPS_RAM_DATA = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSRAMDATA_s_LPS_RAM_DATA_get, _newton_control.ADI_LPS_REGS_YODA_LPSRAMDATA_s_LPS_RAM_DATA_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMDATA_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMDATA_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSRAMDATA_s_VALUE16_get, _newton_control.ADI_LPS_REGS_YODA_LPSRAMDATA_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_LPS_REGS_YODA_LPSRAMDATA_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_LPS_REGS_YODA_LPSRAMDATA_s
    __del__ = lambda self: None
ADI_LPS_REGS_YODA_LPSRAMDATA_s_swigregister = _newton_control.ADI_LPS_REGS_YODA_LPSRAMDATA_s_swigregister
ADI_LPS_REGS_YODA_LPSRAMDATA_s_swigregister(ADI_LPS_REGS_YODA_LPSRAMDATA_s)

class ADI_LPS_REGS_YODA_LPSRAMDATA_ALIAS_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_LPS_REGS_YODA_LPSRAMDATA_ALIAS_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_LPS_REGS_YODA_LPSRAMDATA_ALIAS_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LPS_RAM_DATA_ALIAS"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMDATA_ALIAS_s_LPS_RAM_DATA_ALIAS_set
    __swig_getmethods__["LPS_RAM_DATA_ALIAS"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMDATA_ALIAS_s_LPS_RAM_DATA_ALIAS_get
    if _newclass:
        LPS_RAM_DATA_ALIAS = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSRAMDATA_ALIAS_s_LPS_RAM_DATA_ALIAS_get, _newton_control.ADI_LPS_REGS_YODA_LPSRAMDATA_ALIAS_s_LPS_RAM_DATA_ALIAS_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMDATA_ALIAS_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_LPS_REGS_YODA_LPSRAMDATA_ALIAS_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_LPS_REGS_YODA_LPSRAMDATA_ALIAS_s_VALUE16_get, _newton_control.ADI_LPS_REGS_YODA_LPSRAMDATA_ALIAS_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_LPS_REGS_YODA_LPSRAMDATA_ALIAS_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_LPS_REGS_YODA_LPSRAMDATA_ALIAS_s
    __del__ = lambda self: None
ADI_LPS_REGS_YODA_LPSRAMDATA_ALIAS_s_swigregister = _newton_control.ADI_LPS_REGS_YODA_LPSRAMDATA_ALIAS_s_swigregister
ADI_LPS_REGS_YODA_LPSRAMDATA_ALIAS_s_swigregister(ADI_LPS_REGS_YODA_LPSRAMDATA_ALIAS_s)

class ADI_DATAPATH_CORRECTION_CONFIG_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_CORRECTION_CONFIG_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_CORRECTION_CONFIG_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BYPASS_PC_GAIN"] = _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BYPASS_PC_GAIN_set
    __swig_getmethods__["BYPASS_PC_GAIN"] = _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BYPASS_PC_GAIN_get
    if _newclass:
        BYPASS_PC_GAIN = _swig_property(_newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BYPASS_PC_GAIN_get, _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BYPASS_PC_GAIN_set)
    __swig_setmethods__["BYPASS_PC_OFFSET"] = _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BYPASS_PC_OFFSET_set
    __swig_getmethods__["BYPASS_PC_OFFSET"] = _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BYPASS_PC_OFFSET_get
    if _newclass:
        BYPASS_PC_OFFSET = _swig_property(_newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BYPASS_PC_OFFSET_get, _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BYPASS_PC_OFFSET_set)
    __swig_setmethods__["BYPASS_SCALE"] = _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BYPASS_SCALE_set
    __swig_getmethods__["BYPASS_SCALE"] = _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BYPASS_SCALE_get
    if _newclass:
        BYPASS_SCALE = _swig_property(_newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BYPASS_SCALE_get, _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BYPASS_SCALE_set)
    __swig_setmethods__["BYPASS_SATTAG"] = _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BYPASS_SATTAG_set
    __swig_getmethods__["BYPASS_SATTAG"] = _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BYPASS_SATTAG_get
    if _newclass:
        BYPASS_SATTAG = _swig_property(_newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BYPASS_SATTAG_get, _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BYPASS_SATTAG_set)
    __swig_setmethods__["BINNING_AVG_EN"] = _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BINNING_AVG_EN_set
    __swig_getmethods__["BINNING_AVG_EN"] = _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BINNING_AVG_EN_get
    if _newclass:
        BINNING_AVG_EN = _swig_property(_newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BINNING_AVG_EN_get, _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_BINNING_AVG_EN_set)
    __swig_setmethods__["RESERVED5"] = _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_RESERVED5_set
    __swig_getmethods__["RESERVED5"] = _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_RESERVED5_get
    if _newclass:
        RESERVED5 = _swig_property(_newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_RESERVED5_get, _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_RESERVED5_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_VALUE16_get, _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_CORRECTION_CONFIG_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_CORRECTION_CONFIG_s
    __del__ = lambda self: None
ADI_DATAPATH_CORRECTION_CONFIG_s_swigregister = _newton_control.ADI_DATAPATH_CORRECTION_CONFIG_s_swigregister
ADI_DATAPATH_CORRECTION_CONFIG_s_swigregister(ADI_DATAPATH_CORRECTION_CONFIG_s)

class ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ADC_9B"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_ADC_9B_set
    __swig_getmethods__["ADC_9B"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_ADC_9B_get
    if _newclass:
        ADC_9B = _swig_property(_newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_ADC_9B_get, _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_ADC_9B_set)
    __swig_setmethods__["ALTERNATE_AMP_MUX_POL"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_ALTERNATE_AMP_MUX_POL_set
    __swig_getmethods__["ALTERNATE_AMP_MUX_POL"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_ALTERNATE_AMP_MUX_POL_get
    if _newclass:
        ALTERNATE_AMP_MUX_POL = _swig_property(_newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_ALTERNATE_AMP_MUX_POL_get, _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_ALTERNATE_AMP_MUX_POL_set)
    __swig_setmethods__["DIGITAL_BIN_EN"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_DIGITAL_BIN_EN_set
    __swig_getmethods__["DIGITAL_BIN_EN"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_DIGITAL_BIN_EN_get
    if _newclass:
        DIGITAL_BIN_EN = _swig_property(_newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_DIGITAL_BIN_EN_get, _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_DIGITAL_BIN_EN_set)
    __swig_setmethods__["DELTA_COMP_EN"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_DELTA_COMP_EN_set
    __swig_getmethods__["DELTA_COMP_EN"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_DELTA_COMP_EN_get
    if _newclass:
        DELTA_COMP_EN = _swig_property(_newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_DELTA_COMP_EN_get, _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_DELTA_COMP_EN_set)
    __swig_setmethods__["FIX2FLT_EN"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_FIX2FLT_EN_set
    __swig_getmethods__["FIX2FLT_EN"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_FIX2FLT_EN_get
    if _newclass:
        FIX2FLT_EN = _swig_property(_newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_FIX2FLT_EN_get, _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_FIX2FLT_EN_set)
    __swig_setmethods__["RAW_MODE"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_RAW_MODE_set
    __swig_getmethods__["RAW_MODE"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_RAW_MODE_get
    if _newclass:
        RAW_MODE = _swig_property(_newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_RAW_MODE_get, _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_RAW_MODE_set)
    __swig_setmethods__["OUTPUT_WIDTH"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_OUTPUT_WIDTH_set
    __swig_getmethods__["OUTPUT_WIDTH"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_OUTPUT_WIDTH_get
    if _newclass:
        OUTPUT_WIDTH = _swig_property(_newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_OUTPUT_WIDTH_get, _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_OUTPUT_WIDTH_set)
    __swig_setmethods__["DARK_ROW_VEC"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_DARK_ROW_VEC_set
    __swig_getmethods__["DARK_ROW_VEC"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_DARK_ROW_VEC_get
    if _newclass:
        DARK_ROW_VEC = _swig_property(_newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_DARK_ROW_VEC_get, _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_DARK_ROW_VEC_set)
    __swig_setmethods__["MIPI_OUT_8BIT"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_MIPI_OUT_8BIT_set
    __swig_getmethods__["MIPI_OUT_8BIT"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_MIPI_OUT_8BIT_get
    if _newclass:
        MIPI_OUT_8BIT = _swig_property(_newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_MIPI_OUT_8BIT_get, _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_MIPI_OUT_8BIT_set)
    __swig_setmethods__["RESERVED13"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_RESERVED13_set
    __swig_getmethods__["RESERVED13"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_RESERVED13_get
    if _newclass:
        RESERVED13 = _swig_property(_newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_RESERVED13_get, _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_RESERVED13_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_VALUE16_get, _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s
    __del__ = lambda self: None
ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_swigregister = _newton_control.ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_swigregister
ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s_swigregister(ADI_DATAPATH_USE_CASE_FRAME_CONFIG_s)

class ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ROWS_PER_PACKET"] = _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_ROWS_PER_PACKET_set
    __swig_getmethods__["ROWS_PER_PACKET"] = _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_ROWS_PER_PACKET_get
    if _newclass:
        ROWS_PER_PACKET = _swig_property(_newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_ROWS_PER_PACKET_get, _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_ROWS_PER_PACKET_set)
    __swig_setmethods__["AUTO_ROWS_PER_PACKET_EN"] = _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_AUTO_ROWS_PER_PACKET_EN_set
    __swig_getmethods__["AUTO_ROWS_PER_PACKET_EN"] = _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_AUTO_ROWS_PER_PACKET_EN_get
    if _newclass:
        AUTO_ROWS_PER_PACKET_EN = _swig_property(_newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_AUTO_ROWS_PER_PACKET_EN_get, _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_AUTO_ROWS_PER_PACKET_EN_set)
    __swig_setmethods__["MIPI_BUFF_RD_LIMIT"] = _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_MIPI_BUFF_RD_LIMIT_set
    __swig_getmethods__["MIPI_BUFF_RD_LIMIT"] = _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_MIPI_BUFF_RD_LIMIT_get
    if _newclass:
        MIPI_BUFF_RD_LIMIT = _swig_property(_newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_MIPI_BUFF_RD_LIMIT_get, _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_MIPI_BUFF_RD_LIMIT_set)
    __swig_setmethods__["MIPI_BUFF_RD_CTRL_EN"] = _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_MIPI_BUFF_RD_CTRL_EN_set
    __swig_getmethods__["MIPI_BUFF_RD_CTRL_EN"] = _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_MIPI_BUFF_RD_CTRL_EN_get
    if _newclass:
        MIPI_BUFF_RD_CTRL_EN = _swig_property(_newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_MIPI_BUFF_RD_CTRL_EN_get, _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_MIPI_BUFF_RD_CTRL_EN_set)
    __swig_setmethods__["RESERVED11"] = _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_RESERVED11_set
    __swig_getmethods__["RESERVED11"] = _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_RESERVED11_get
    if _newclass:
        RESERVED11 = _swig_property(_newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_RESERVED11_get, _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_RESERVED11_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_VALUE16_get, _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s
    __del__ = lambda self: None
ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_swigregister = _newton_control.ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_swigregister
ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s_swigregister(ADI_DATAPATH_USE_CASE_MIPI_PACKET_CONTROL_s)

class ADI_DATAPATH_GAIN0_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_GAIN0_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_GAIN0_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GLOBAL_GAIN_SCALE_P0"] = _newton_control.ADI_DATAPATH_GAIN0_s_GLOBAL_GAIN_SCALE_P0_set
    __swig_getmethods__["GLOBAL_GAIN_SCALE_P0"] = _newton_control.ADI_DATAPATH_GAIN0_s_GLOBAL_GAIN_SCALE_P0_get
    if _newclass:
        GLOBAL_GAIN_SCALE_P0 = _swig_property(_newton_control.ADI_DATAPATH_GAIN0_s_GLOBAL_GAIN_SCALE_P0_get, _newton_control.ADI_DATAPATH_GAIN0_s_GLOBAL_GAIN_SCALE_P0_set)
    __swig_setmethods__["GLOBAL_GAIN_SHIFT_P0"] = _newton_control.ADI_DATAPATH_GAIN0_s_GLOBAL_GAIN_SHIFT_P0_set
    __swig_getmethods__["GLOBAL_GAIN_SHIFT_P0"] = _newton_control.ADI_DATAPATH_GAIN0_s_GLOBAL_GAIN_SHIFT_P0_get
    if _newclass:
        GLOBAL_GAIN_SHIFT_P0 = _swig_property(_newton_control.ADI_DATAPATH_GAIN0_s_GLOBAL_GAIN_SHIFT_P0_get, _newton_control.ADI_DATAPATH_GAIN0_s_GLOBAL_GAIN_SHIFT_P0_set)
    __swig_setmethods__["RESERVED13"] = _newton_control.ADI_DATAPATH_GAIN0_s_RESERVED13_set
    __swig_getmethods__["RESERVED13"] = _newton_control.ADI_DATAPATH_GAIN0_s_RESERVED13_get
    if _newclass:
        RESERVED13 = _swig_property(_newton_control.ADI_DATAPATH_GAIN0_s_RESERVED13_get, _newton_control.ADI_DATAPATH_GAIN0_s_RESERVED13_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_GAIN0_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_GAIN0_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_GAIN0_s_VALUE16_get, _newton_control.ADI_DATAPATH_GAIN0_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_GAIN0_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_GAIN0_s
    __del__ = lambda self: None
ADI_DATAPATH_GAIN0_s_swigregister = _newton_control.ADI_DATAPATH_GAIN0_s_swigregister
ADI_DATAPATH_GAIN0_s_swigregister(ADI_DATAPATH_GAIN0_s)

class ADI_DATAPATH_GAIN1_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_GAIN1_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_GAIN1_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GLOBAL_GAIN_SCALE_P1"] = _newton_control.ADI_DATAPATH_GAIN1_s_GLOBAL_GAIN_SCALE_P1_set
    __swig_getmethods__["GLOBAL_GAIN_SCALE_P1"] = _newton_control.ADI_DATAPATH_GAIN1_s_GLOBAL_GAIN_SCALE_P1_get
    if _newclass:
        GLOBAL_GAIN_SCALE_P1 = _swig_property(_newton_control.ADI_DATAPATH_GAIN1_s_GLOBAL_GAIN_SCALE_P1_get, _newton_control.ADI_DATAPATH_GAIN1_s_GLOBAL_GAIN_SCALE_P1_set)
    __swig_setmethods__["GLOBAL_GAIN_SHIFT_P1"] = _newton_control.ADI_DATAPATH_GAIN1_s_GLOBAL_GAIN_SHIFT_P1_set
    __swig_getmethods__["GLOBAL_GAIN_SHIFT_P1"] = _newton_control.ADI_DATAPATH_GAIN1_s_GLOBAL_GAIN_SHIFT_P1_get
    if _newclass:
        GLOBAL_GAIN_SHIFT_P1 = _swig_property(_newton_control.ADI_DATAPATH_GAIN1_s_GLOBAL_GAIN_SHIFT_P1_get, _newton_control.ADI_DATAPATH_GAIN1_s_GLOBAL_GAIN_SHIFT_P1_set)
    __swig_setmethods__["RESERVED13"] = _newton_control.ADI_DATAPATH_GAIN1_s_RESERVED13_set
    __swig_getmethods__["RESERVED13"] = _newton_control.ADI_DATAPATH_GAIN1_s_RESERVED13_get
    if _newclass:
        RESERVED13 = _swig_property(_newton_control.ADI_DATAPATH_GAIN1_s_RESERVED13_get, _newton_control.ADI_DATAPATH_GAIN1_s_RESERVED13_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_GAIN1_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_GAIN1_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_GAIN1_s_VALUE16_get, _newton_control.ADI_DATAPATH_GAIN1_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_GAIN1_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_GAIN1_s
    __del__ = lambda self: None
ADI_DATAPATH_GAIN1_s_swigregister = _newton_control.ADI_DATAPATH_GAIN1_s_swigregister
ADI_DATAPATH_GAIN1_s_swigregister(ADI_DATAPATH_GAIN1_s)

class ADI_DATAPATH_GAIN2_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_GAIN2_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_GAIN2_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GLOBAL_GAIN_SCALE_P2"] = _newton_control.ADI_DATAPATH_GAIN2_s_GLOBAL_GAIN_SCALE_P2_set
    __swig_getmethods__["GLOBAL_GAIN_SCALE_P2"] = _newton_control.ADI_DATAPATH_GAIN2_s_GLOBAL_GAIN_SCALE_P2_get
    if _newclass:
        GLOBAL_GAIN_SCALE_P2 = _swig_property(_newton_control.ADI_DATAPATH_GAIN2_s_GLOBAL_GAIN_SCALE_P2_get, _newton_control.ADI_DATAPATH_GAIN2_s_GLOBAL_GAIN_SCALE_P2_set)
    __swig_setmethods__["GLOBAL_GAIN_SHIFT_P2"] = _newton_control.ADI_DATAPATH_GAIN2_s_GLOBAL_GAIN_SHIFT_P2_set
    __swig_getmethods__["GLOBAL_GAIN_SHIFT_P2"] = _newton_control.ADI_DATAPATH_GAIN2_s_GLOBAL_GAIN_SHIFT_P2_get
    if _newclass:
        GLOBAL_GAIN_SHIFT_P2 = _swig_property(_newton_control.ADI_DATAPATH_GAIN2_s_GLOBAL_GAIN_SHIFT_P2_get, _newton_control.ADI_DATAPATH_GAIN2_s_GLOBAL_GAIN_SHIFT_P2_set)
    __swig_setmethods__["RESERVED13"] = _newton_control.ADI_DATAPATH_GAIN2_s_RESERVED13_set
    __swig_getmethods__["RESERVED13"] = _newton_control.ADI_DATAPATH_GAIN2_s_RESERVED13_get
    if _newclass:
        RESERVED13 = _swig_property(_newton_control.ADI_DATAPATH_GAIN2_s_RESERVED13_get, _newton_control.ADI_DATAPATH_GAIN2_s_RESERVED13_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_GAIN2_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_GAIN2_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_GAIN2_s_VALUE16_get, _newton_control.ADI_DATAPATH_GAIN2_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_GAIN2_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_GAIN2_s
    __del__ = lambda self: None
ADI_DATAPATH_GAIN2_s_swigregister = _newton_control.ADI_DATAPATH_GAIN2_s_swigregister
ADI_DATAPATH_GAIN2_s_swigregister(ADI_DATAPATH_GAIN2_s)

class ADI_DATAPATH_GAIN3_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_GAIN3_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_GAIN3_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GLOBAL_GAIN_SCALE_P3"] = _newton_control.ADI_DATAPATH_GAIN3_s_GLOBAL_GAIN_SCALE_P3_set
    __swig_getmethods__["GLOBAL_GAIN_SCALE_P3"] = _newton_control.ADI_DATAPATH_GAIN3_s_GLOBAL_GAIN_SCALE_P3_get
    if _newclass:
        GLOBAL_GAIN_SCALE_P3 = _swig_property(_newton_control.ADI_DATAPATH_GAIN3_s_GLOBAL_GAIN_SCALE_P3_get, _newton_control.ADI_DATAPATH_GAIN3_s_GLOBAL_GAIN_SCALE_P3_set)
    __swig_setmethods__["GLOBAL_GAIN_SHIFT_P3"] = _newton_control.ADI_DATAPATH_GAIN3_s_GLOBAL_GAIN_SHIFT_P3_set
    __swig_getmethods__["GLOBAL_GAIN_SHIFT_P3"] = _newton_control.ADI_DATAPATH_GAIN3_s_GLOBAL_GAIN_SHIFT_P3_get
    if _newclass:
        GLOBAL_GAIN_SHIFT_P3 = _swig_property(_newton_control.ADI_DATAPATH_GAIN3_s_GLOBAL_GAIN_SHIFT_P3_get, _newton_control.ADI_DATAPATH_GAIN3_s_GLOBAL_GAIN_SHIFT_P3_set)
    __swig_setmethods__["RESERVED13"] = _newton_control.ADI_DATAPATH_GAIN3_s_RESERVED13_set
    __swig_getmethods__["RESERVED13"] = _newton_control.ADI_DATAPATH_GAIN3_s_RESERVED13_get
    if _newclass:
        RESERVED13 = _swig_property(_newton_control.ADI_DATAPATH_GAIN3_s_RESERVED13_get, _newton_control.ADI_DATAPATH_GAIN3_s_RESERVED13_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_GAIN3_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_GAIN3_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_GAIN3_s_VALUE16_get, _newton_control.ADI_DATAPATH_GAIN3_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_GAIN3_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_GAIN3_s
    __del__ = lambda self: None
ADI_DATAPATH_GAIN3_s_swigregister = _newton_control.ADI_DATAPATH_GAIN3_s_swigregister
ADI_DATAPATH_GAIN3_s_swigregister(ADI_DATAPATH_GAIN3_s)

class ADI_DATAPATH_PARITY_GAIN_MEM_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_PARITY_GAIN_MEM_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_PARITY_GAIN_MEM_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GAIN_MEM_PARITY_ERR"] = _newton_control.ADI_DATAPATH_PARITY_GAIN_MEM_s_GAIN_MEM_PARITY_ERR_set
    __swig_getmethods__["GAIN_MEM_PARITY_ERR"] = _newton_control.ADI_DATAPATH_PARITY_GAIN_MEM_s_GAIN_MEM_PARITY_ERR_get
    if _newclass:
        GAIN_MEM_PARITY_ERR = _swig_property(_newton_control.ADI_DATAPATH_PARITY_GAIN_MEM_s_GAIN_MEM_PARITY_ERR_get, _newton_control.ADI_DATAPATH_PARITY_GAIN_MEM_s_GAIN_MEM_PARITY_ERR_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PARITY_GAIN_MEM_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PARITY_GAIN_MEM_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_PARITY_GAIN_MEM_s_VALUE16_get, _newton_control.ADI_DATAPATH_PARITY_GAIN_MEM_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_PARITY_GAIN_MEM_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_PARITY_GAIN_MEM_s
    __del__ = lambda self: None
ADI_DATAPATH_PARITY_GAIN_MEM_s_swigregister = _newton_control.ADI_DATAPATH_PARITY_GAIN_MEM_s_swigregister
ADI_DATAPATH_PARITY_GAIN_MEM_s_swigregister(ADI_DATAPATH_PARITY_GAIN_MEM_s)

class ADI_DATAPATH_PARITY_LINE_MEM_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_PARITY_LINE_MEM_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_PARITY_LINE_MEM_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LINE_MEM_PARITY_ERR"] = _newton_control.ADI_DATAPATH_PARITY_LINE_MEM_s_LINE_MEM_PARITY_ERR_set
    __swig_getmethods__["LINE_MEM_PARITY_ERR"] = _newton_control.ADI_DATAPATH_PARITY_LINE_MEM_s_LINE_MEM_PARITY_ERR_get
    if _newclass:
        LINE_MEM_PARITY_ERR = _swig_property(_newton_control.ADI_DATAPATH_PARITY_LINE_MEM_s_LINE_MEM_PARITY_ERR_get, _newton_control.ADI_DATAPATH_PARITY_LINE_MEM_s_LINE_MEM_PARITY_ERR_set)
    __swig_setmethods__["RESERVED2"] = _newton_control.ADI_DATAPATH_PARITY_LINE_MEM_s_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _newton_control.ADI_DATAPATH_PARITY_LINE_MEM_s_RESERVED2_get
    if _newclass:
        RESERVED2 = _swig_property(_newton_control.ADI_DATAPATH_PARITY_LINE_MEM_s_RESERVED2_get, _newton_control.ADI_DATAPATH_PARITY_LINE_MEM_s_RESERVED2_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PARITY_LINE_MEM_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PARITY_LINE_MEM_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_PARITY_LINE_MEM_s_VALUE16_get, _newton_control.ADI_DATAPATH_PARITY_LINE_MEM_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_PARITY_LINE_MEM_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_PARITY_LINE_MEM_s
    __del__ = lambda self: None
ADI_DATAPATH_PARITY_LINE_MEM_s_swigregister = _newton_control.ADI_DATAPATH_PARITY_LINE_MEM_s_swigregister
ADI_DATAPATH_PARITY_LINE_MEM_s_swigregister(ADI_DATAPATH_PARITY_LINE_MEM_s)

class ADI_DATAPATH_PP_LFSR_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_PP_LFSR_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_PP_LFSR_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LFSR_EN"] = _newton_control.ADI_DATAPATH_PP_LFSR_s_LFSR_EN_set
    __swig_getmethods__["LFSR_EN"] = _newton_control.ADI_DATAPATH_PP_LFSR_s_LFSR_EN_get
    if _newclass:
        LFSR_EN = _swig_property(_newton_control.ADI_DATAPATH_PP_LFSR_s_LFSR_EN_get, _newton_control.ADI_DATAPATH_PP_LFSR_s_LFSR_EN_set)
    __swig_setmethods__["LFSR_MODE"] = _newton_control.ADI_DATAPATH_PP_LFSR_s_LFSR_MODE_set
    __swig_getmethods__["LFSR_MODE"] = _newton_control.ADI_DATAPATH_PP_LFSR_s_LFSR_MODE_get
    if _newclass:
        LFSR_MODE = _swig_property(_newton_control.ADI_DATAPATH_PP_LFSR_s_LFSR_MODE_get, _newton_control.ADI_DATAPATH_PP_LFSR_s_LFSR_MODE_set)
    __swig_setmethods__["LFSR_SEED"] = _newton_control.ADI_DATAPATH_PP_LFSR_s_LFSR_SEED_set
    __swig_getmethods__["LFSR_SEED"] = _newton_control.ADI_DATAPATH_PP_LFSR_s_LFSR_SEED_get
    if _newclass:
        LFSR_SEED = _swig_property(_newton_control.ADI_DATAPATH_PP_LFSR_s_LFSR_SEED_get, _newton_control.ADI_DATAPATH_PP_LFSR_s_LFSR_SEED_set)
    __swig_setmethods__["RESERVED15"] = _newton_control.ADI_DATAPATH_PP_LFSR_s_RESERVED15_set
    __swig_getmethods__["RESERVED15"] = _newton_control.ADI_DATAPATH_PP_LFSR_s_RESERVED15_get
    if _newclass:
        RESERVED15 = _swig_property(_newton_control.ADI_DATAPATH_PP_LFSR_s_RESERVED15_get, _newton_control.ADI_DATAPATH_PP_LFSR_s_RESERVED15_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PP_LFSR_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PP_LFSR_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_PP_LFSR_s_VALUE16_get, _newton_control.ADI_DATAPATH_PP_LFSR_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_PP_LFSR_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_PP_LFSR_s
    __del__ = lambda self: None
ADI_DATAPATH_PP_LFSR_s_swigregister = _newton_control.ADI_DATAPATH_PP_LFSR_s_swigregister
ADI_DATAPATH_PP_LFSR_s_swigregister(ADI_DATAPATH_PP_LFSR_s)

class ADI_DATAPATH_PP_DECODE_ST_1_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_PP_DECODE_ST_1_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_PP_DECODE_ST_1_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ST_DECODE_000"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_000_set
    __swig_getmethods__["ST_DECODE_000"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_000_get
    if _newclass:
        ST_DECODE_000 = _swig_property(_newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_000_get, _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_000_set)
    __swig_setmethods__["ST_DECODE_001"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_001_set
    __swig_getmethods__["ST_DECODE_001"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_001_get
    if _newclass:
        ST_DECODE_001 = _swig_property(_newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_001_get, _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_001_set)
    __swig_setmethods__["ST_DECODE_010"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_010_set
    __swig_getmethods__["ST_DECODE_010"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_010_get
    if _newclass:
        ST_DECODE_010 = _swig_property(_newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_010_get, _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_010_set)
    __swig_setmethods__["ST_DECODE_011"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_011_set
    __swig_getmethods__["ST_DECODE_011"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_011_get
    if _newclass:
        ST_DECODE_011 = _swig_property(_newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_011_get, _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_011_set)
    __swig_setmethods__["ST_DECODE_100"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_100_set
    __swig_getmethods__["ST_DECODE_100"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_100_get
    if _newclass:
        ST_DECODE_100 = _swig_property(_newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_100_get, _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_ST_DECODE_100_set)
    __swig_setmethods__["RESERVED15"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_RESERVED15_set
    __swig_getmethods__["RESERVED15"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_RESERVED15_get
    if _newclass:
        RESERVED15 = _swig_property(_newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_RESERVED15_get, _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_RESERVED15_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_VALUE16_get, _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_PP_DECODE_ST_1_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_PP_DECODE_ST_1_s
    __del__ = lambda self: None
ADI_DATAPATH_PP_DECODE_ST_1_s_swigregister = _newton_control.ADI_DATAPATH_PP_DECODE_ST_1_s_swigregister
ADI_DATAPATH_PP_DECODE_ST_1_s_swigregister(ADI_DATAPATH_PP_DECODE_ST_1_s)

class ADI_DATAPATH_PP_DECODE_ST_2_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_PP_DECODE_ST_2_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_PP_DECODE_ST_2_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ST_DECODE_101"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_ST_DECODE_101_set
    __swig_getmethods__["ST_DECODE_101"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_ST_DECODE_101_get
    if _newclass:
        ST_DECODE_101 = _swig_property(_newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_ST_DECODE_101_get, _newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_ST_DECODE_101_set)
    __swig_setmethods__["ST_DECODE_110"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_ST_DECODE_110_set
    __swig_getmethods__["ST_DECODE_110"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_ST_DECODE_110_get
    if _newclass:
        ST_DECODE_110 = _swig_property(_newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_ST_DECODE_110_get, _newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_ST_DECODE_110_set)
    __swig_setmethods__["ST_DECODE_111"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_ST_DECODE_111_set
    __swig_getmethods__["ST_DECODE_111"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_ST_DECODE_111_get
    if _newclass:
        ST_DECODE_111 = _swig_property(_newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_ST_DECODE_111_get, _newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_ST_DECODE_111_set)
    __swig_setmethods__["RESERVED9"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_RESERVED9_set
    __swig_getmethods__["RESERVED9"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_RESERVED9_get
    if _newclass:
        RESERVED9 = _swig_property(_newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_RESERVED9_get, _newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_RESERVED9_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_VALUE16_get, _newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_PP_DECODE_ST_2_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_PP_DECODE_ST_2_s
    __del__ = lambda self: None
ADI_DATAPATH_PP_DECODE_ST_2_s_swigregister = _newton_control.ADI_DATAPATH_PP_DECODE_ST_2_s_swigregister
ADI_DATAPATH_PP_DECODE_ST_2_s_swigregister(ADI_DATAPATH_PP_DECODE_ST_2_s)

class ADI_DATAPATH_PP_ENCODE_ST_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_PP_ENCODE_ST_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_PP_ENCODE_ST_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ST_EN_0"] = _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_ST_EN_0_set
    __swig_getmethods__["ST_EN_0"] = _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_ST_EN_0_get
    if _newclass:
        ST_EN_0 = _swig_property(_newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_ST_EN_0_get, _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_ST_EN_0_set)
    __swig_setmethods__["ST_EN_1"] = _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_ST_EN_1_set
    __swig_getmethods__["ST_EN_1"] = _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_ST_EN_1_get
    if _newclass:
        ST_EN_1 = _swig_property(_newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_ST_EN_1_get, _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_ST_EN_1_set)
    __swig_setmethods__["OVERFLOW_ACTIVE"] = _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_OVERFLOW_ACTIVE_set
    __swig_getmethods__["OVERFLOW_ACTIVE"] = _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_OVERFLOW_ACTIVE_get
    if _newclass:
        OVERFLOW_ACTIVE = _swig_property(_newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_OVERFLOW_ACTIVE_get, _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_OVERFLOW_ACTIVE_set)
    __swig_setmethods__["RESERVED3"] = _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_RESERVED3_set
    __swig_getmethods__["RESERVED3"] = _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_RESERVED3_get
    if _newclass:
        RESERVED3 = _swig_property(_newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_RESERVED3_get, _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_RESERVED3_set)
    __swig_setmethods__["BINNED_AND_OR"] = _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_BINNED_AND_OR_set
    __swig_getmethods__["BINNED_AND_OR"] = _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_BINNED_AND_OR_get
    if _newclass:
        BINNED_AND_OR = _swig_property(_newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_BINNED_AND_OR_get, _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_BINNED_AND_OR_set)
    __swig_setmethods__["ST_LATCH_ACTIVE_HI"] = _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_ST_LATCH_ACTIVE_HI_set
    __swig_getmethods__["ST_LATCH_ACTIVE_HI"] = _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_ST_LATCH_ACTIVE_HI_get
    if _newclass:
        ST_LATCH_ACTIVE_HI = _swig_property(_newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_ST_LATCH_ACTIVE_HI_get, _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_ST_LATCH_ACTIVE_HI_set)
    __swig_setmethods__["RESERVED6"] = _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_RESERVED6_set
    __swig_getmethods__["RESERVED6"] = _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_RESERVED6_get
    if _newclass:
        RESERVED6 = _swig_property(_newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_RESERVED6_get, _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_RESERVED6_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_VALUE16_get, _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_PP_ENCODE_ST_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_PP_ENCODE_ST_s
    __del__ = lambda self: None
ADI_DATAPATH_PP_ENCODE_ST_s_swigregister = _newton_control.ADI_DATAPATH_PP_ENCODE_ST_s_swigregister
ADI_DATAPATH_PP_ENCODE_ST_s_swigregister(ADI_DATAPATH_PP_ENCODE_ST_s)

class ADI_DATAPATH_PP_ENCODE_GT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_PP_ENCODE_GT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_PP_ENCODE_GT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GT_EN_00"] = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_EN_00_set
    __swig_getmethods__["GT_EN_00"] = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_EN_00_get
    if _newclass:
        GT_EN_00 = _swig_property(_newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_EN_00_get, _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_EN_00_set)
    __swig_setmethods__["GT_EN_01"] = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_EN_01_set
    __swig_getmethods__["GT_EN_01"] = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_EN_01_get
    if _newclass:
        GT_EN_01 = _swig_property(_newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_EN_01_get, _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_EN_01_set)
    __swig_setmethods__["GT_EN_10"] = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_EN_10_set
    __swig_getmethods__["GT_EN_10"] = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_EN_10_get
    if _newclass:
        GT_EN_10 = _swig_property(_newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_EN_10_get, _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_EN_10_set)
    __swig_setmethods__["GT_EN_11"] = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_EN_11_set
    __swig_getmethods__["GT_EN_11"] = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_EN_11_get
    if _newclass:
        GT_EN_11 = _swig_property(_newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_EN_11_get, _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_EN_11_set)
    __swig_setmethods__["GT_LATCH_ACTIVE_HI"] = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_LATCH_ACTIVE_HI_set
    __swig_getmethods__["GT_LATCH_ACTIVE_HI"] = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_LATCH_ACTIVE_HI_get
    if _newclass:
        GT_LATCH_ACTIVE_HI = _swig_property(_newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_LATCH_ACTIVE_HI_get, _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_GT_LATCH_ACTIVE_HI_set)
    __swig_setmethods__["TAG_WAIT"] = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_TAG_WAIT_set
    __swig_getmethods__["TAG_WAIT"] = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_TAG_WAIT_get
    if _newclass:
        TAG_WAIT = _swig_property(_newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_TAG_WAIT_get, _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_TAG_WAIT_set)
    __swig_setmethods__["TAG_SCALE"] = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_TAG_SCALE_set
    __swig_getmethods__["TAG_SCALE"] = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_TAG_SCALE_get
    if _newclass:
        TAG_SCALE = _swig_property(_newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_TAG_SCALE_get, _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_TAG_SCALE_set)
    __swig_setmethods__["RESERVED13"] = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_RESERVED13_set
    __swig_getmethods__["RESERVED13"] = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_RESERVED13_get
    if _newclass:
        RESERVED13 = _swig_property(_newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_RESERVED13_get, _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_RESERVED13_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_VALUE16_get, _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_PP_ENCODE_GT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_PP_ENCODE_GT_s
    __del__ = lambda self: None
ADI_DATAPATH_PP_ENCODE_GT_s_swigregister = _newton_control.ADI_DATAPATH_PP_ENCODE_GT_s_swigregister
ADI_DATAPATH_PP_ENCODE_GT_s_swigregister(ADI_DATAPATH_PP_ENCODE_GT_s)

class ADI_DATAPATH_DBG_MUX_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_DBG_MUX_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_DBG_MUX_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DBG_SEL"] = _newton_control.ADI_DATAPATH_DBG_MUX_s_DBG_SEL_set
    __swig_getmethods__["DBG_SEL"] = _newton_control.ADI_DATAPATH_DBG_MUX_s_DBG_SEL_get
    if _newclass:
        DBG_SEL = _swig_property(_newton_control.ADI_DATAPATH_DBG_MUX_s_DBG_SEL_get, _newton_control.ADI_DATAPATH_DBG_MUX_s_DBG_SEL_set)
    __swig_setmethods__["RESERVED5"] = _newton_control.ADI_DATAPATH_DBG_MUX_s_RESERVED5_set
    __swig_getmethods__["RESERVED5"] = _newton_control.ADI_DATAPATH_DBG_MUX_s_RESERVED5_get
    if _newclass:
        RESERVED5 = _swig_property(_newton_control.ADI_DATAPATH_DBG_MUX_s_RESERVED5_get, _newton_control.ADI_DATAPATH_DBG_MUX_s_RESERVED5_set)
    __swig_setmethods__["DBG_EN"] = _newton_control.ADI_DATAPATH_DBG_MUX_s_DBG_EN_set
    __swig_getmethods__["DBG_EN"] = _newton_control.ADI_DATAPATH_DBG_MUX_s_DBG_EN_get
    if _newclass:
        DBG_EN = _swig_property(_newton_control.ADI_DATAPATH_DBG_MUX_s_DBG_EN_get, _newton_control.ADI_DATAPATH_DBG_MUX_s_DBG_EN_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_DBG_MUX_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_DBG_MUX_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_DBG_MUX_s_VALUE16_get, _newton_control.ADI_DATAPATH_DBG_MUX_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_DBG_MUX_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_DBG_MUX_s
    __del__ = lambda self: None
ADI_DATAPATH_DBG_MUX_s_swigregister = _newton_control.ADI_DATAPATH_DBG_MUX_s_swigregister
ADI_DATAPATH_DBG_MUX_s_swigregister(ADI_DATAPATH_DBG_MUX_s)

class ADI_DATAPATH_GAIN_MARGIN_CONTROL_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_GAIN_MARGIN_CONTROL_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_GAIN_MARGIN_CONTROL_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GAIN_MEM_MARGIN"] = _newton_control.ADI_DATAPATH_GAIN_MARGIN_CONTROL_s_GAIN_MEM_MARGIN_set
    __swig_getmethods__["GAIN_MEM_MARGIN"] = _newton_control.ADI_DATAPATH_GAIN_MARGIN_CONTROL_s_GAIN_MEM_MARGIN_get
    if _newclass:
        GAIN_MEM_MARGIN = _swig_property(_newton_control.ADI_DATAPATH_GAIN_MARGIN_CONTROL_s_GAIN_MEM_MARGIN_get, _newton_control.ADI_DATAPATH_GAIN_MARGIN_CONTROL_s_GAIN_MEM_MARGIN_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_GAIN_MARGIN_CONTROL_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_GAIN_MARGIN_CONTROL_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_GAIN_MARGIN_CONTROL_s_VALUE16_get, _newton_control.ADI_DATAPATH_GAIN_MARGIN_CONTROL_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_GAIN_MARGIN_CONTROL_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_GAIN_MARGIN_CONTROL_s
    __del__ = lambda self: None
ADI_DATAPATH_GAIN_MARGIN_CONTROL_s_swigregister = _newton_control.ADI_DATAPATH_GAIN_MARGIN_CONTROL_s_swigregister
ADI_DATAPATH_GAIN_MARGIN_CONTROL_s_swigregister(ADI_DATAPATH_GAIN_MARGIN_CONTROL_s)

class ADI_DATAPATH_LINE_MARGIN_CONTROL_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_LINE_MARGIN_CONTROL_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_LINE_MARGIN_CONTROL_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LINE_MEM_MARGIN"] = _newton_control.ADI_DATAPATH_LINE_MARGIN_CONTROL_s_LINE_MEM_MARGIN_set
    __swig_getmethods__["LINE_MEM_MARGIN"] = _newton_control.ADI_DATAPATH_LINE_MARGIN_CONTROL_s_LINE_MEM_MARGIN_get
    if _newclass:
        LINE_MEM_MARGIN = _swig_property(_newton_control.ADI_DATAPATH_LINE_MARGIN_CONTROL_s_LINE_MEM_MARGIN_get, _newton_control.ADI_DATAPATH_LINE_MARGIN_CONTROL_s_LINE_MEM_MARGIN_set)
    __swig_setmethods__["RESERVED2"] = _newton_control.ADI_DATAPATH_LINE_MARGIN_CONTROL_s_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _newton_control.ADI_DATAPATH_LINE_MARGIN_CONTROL_s_RESERVED2_get
    if _newclass:
        RESERVED2 = _swig_property(_newton_control.ADI_DATAPATH_LINE_MARGIN_CONTROL_s_RESERVED2_get, _newton_control.ADI_DATAPATH_LINE_MARGIN_CONTROL_s_RESERVED2_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_LINE_MARGIN_CONTROL_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_LINE_MARGIN_CONTROL_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_LINE_MARGIN_CONTROL_s_VALUE16_get, _newton_control.ADI_DATAPATH_LINE_MARGIN_CONTROL_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_LINE_MARGIN_CONTROL_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_LINE_MARGIN_CONTROL_s
    __del__ = lambda self: None
ADI_DATAPATH_LINE_MARGIN_CONTROL_s_swigregister = _newton_control.ADI_DATAPATH_LINE_MARGIN_CONTROL_s_swigregister
ADI_DATAPATH_LINE_MARGIN_CONTROL_s_swigregister(ADI_DATAPATH_LINE_MARGIN_CONTROL_s)

class ADI_DATAPATH_ROI_ROW_START_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_ROI_ROW_START_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_ROI_ROW_START_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["START_ROW"] = _newton_control.ADI_DATAPATH_ROI_ROW_START_s_START_ROW_set
    __swig_getmethods__["START_ROW"] = _newton_control.ADI_DATAPATH_ROI_ROW_START_s_START_ROW_get
    if _newclass:
        START_ROW = _swig_property(_newton_control.ADI_DATAPATH_ROI_ROW_START_s_START_ROW_get, _newton_control.ADI_DATAPATH_ROI_ROW_START_s_START_ROW_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DATAPATH_ROI_ROW_START_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DATAPATH_ROI_ROW_START_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DATAPATH_ROI_ROW_START_s_RESERVED10_get, _newton_control.ADI_DATAPATH_ROI_ROW_START_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_ROI_ROW_START_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_ROI_ROW_START_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_ROI_ROW_START_s_VALUE16_get, _newton_control.ADI_DATAPATH_ROI_ROW_START_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_ROI_ROW_START_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_ROI_ROW_START_s
    __del__ = lambda self: None
ADI_DATAPATH_ROI_ROW_START_s_swigregister = _newton_control.ADI_DATAPATH_ROI_ROW_START_s_swigregister
ADI_DATAPATH_ROI_ROW_START_s_swigregister(ADI_DATAPATH_ROI_ROW_START_s)

class ADI_DATAPATH_ROI_HEIGHT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_ROI_HEIGHT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_ROI_HEIGHT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ROI_HEIGHT"] = _newton_control.ADI_DATAPATH_ROI_HEIGHT_s_ROI_HEIGHT_set
    __swig_getmethods__["ROI_HEIGHT"] = _newton_control.ADI_DATAPATH_ROI_HEIGHT_s_ROI_HEIGHT_get
    if _newclass:
        ROI_HEIGHT = _swig_property(_newton_control.ADI_DATAPATH_ROI_HEIGHT_s_ROI_HEIGHT_get, _newton_control.ADI_DATAPATH_ROI_HEIGHT_s_ROI_HEIGHT_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DATAPATH_ROI_HEIGHT_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DATAPATH_ROI_HEIGHT_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DATAPATH_ROI_HEIGHT_s_RESERVED10_get, _newton_control.ADI_DATAPATH_ROI_HEIGHT_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_ROI_HEIGHT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_ROI_HEIGHT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_ROI_HEIGHT_s_VALUE16_get, _newton_control.ADI_DATAPATH_ROI_HEIGHT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_ROI_HEIGHT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_ROI_HEIGHT_s
    __del__ = lambda self: None
ADI_DATAPATH_ROI_HEIGHT_s_swigregister = _newton_control.ADI_DATAPATH_ROI_HEIGHT_s_swigregister
ADI_DATAPATH_ROI_HEIGHT_s_swigregister(ADI_DATAPATH_ROI_HEIGHT_s)

class ADI_DATAPATH_ROI_COLUMN_START_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_ROI_COLUMN_START_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_ROI_COLUMN_START_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["START_COLUMN"] = _newton_control.ADI_DATAPATH_ROI_COLUMN_START_s_START_COLUMN_set
    __swig_getmethods__["START_COLUMN"] = _newton_control.ADI_DATAPATH_ROI_COLUMN_START_s_START_COLUMN_get
    if _newclass:
        START_COLUMN = _swig_property(_newton_control.ADI_DATAPATH_ROI_COLUMN_START_s_START_COLUMN_get, _newton_control.ADI_DATAPATH_ROI_COLUMN_START_s_START_COLUMN_set)
    __swig_setmethods__["RESERVED9"] = _newton_control.ADI_DATAPATH_ROI_COLUMN_START_s_RESERVED9_set
    __swig_getmethods__["RESERVED9"] = _newton_control.ADI_DATAPATH_ROI_COLUMN_START_s_RESERVED9_get
    if _newclass:
        RESERVED9 = _swig_property(_newton_control.ADI_DATAPATH_ROI_COLUMN_START_s_RESERVED9_get, _newton_control.ADI_DATAPATH_ROI_COLUMN_START_s_RESERVED9_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_ROI_COLUMN_START_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_ROI_COLUMN_START_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_ROI_COLUMN_START_s_VALUE16_get, _newton_control.ADI_DATAPATH_ROI_COLUMN_START_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_ROI_COLUMN_START_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_ROI_COLUMN_START_s
    __del__ = lambda self: None
ADI_DATAPATH_ROI_COLUMN_START_s_swigregister = _newton_control.ADI_DATAPATH_ROI_COLUMN_START_s_swigregister
ADI_DATAPATH_ROI_COLUMN_START_s_swigregister(ADI_DATAPATH_ROI_COLUMN_START_s)

class ADI_DATAPATH_ROI_WIDTH_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_ROI_WIDTH_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_ROI_WIDTH_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ROI_WIDTH"] = _newton_control.ADI_DATAPATH_ROI_WIDTH_s_ROI_WIDTH_set
    __swig_getmethods__["ROI_WIDTH"] = _newton_control.ADI_DATAPATH_ROI_WIDTH_s_ROI_WIDTH_get
    if _newclass:
        ROI_WIDTH = _swig_property(_newton_control.ADI_DATAPATH_ROI_WIDTH_s_ROI_WIDTH_get, _newton_control.ADI_DATAPATH_ROI_WIDTH_s_ROI_WIDTH_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DATAPATH_ROI_WIDTH_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DATAPATH_ROI_WIDTH_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DATAPATH_ROI_WIDTH_s_RESERVED10_get, _newton_control.ADI_DATAPATH_ROI_WIDTH_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_ROI_WIDTH_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_ROI_WIDTH_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_ROI_WIDTH_s_VALUE16_get, _newton_control.ADI_DATAPATH_ROI_WIDTH_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_ROI_WIDTH_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_ROI_WIDTH_s
    __del__ = lambda self: None
ADI_DATAPATH_ROI_WIDTH_s_swigregister = _newton_control.ADI_DATAPATH_ROI_WIDTH_s_swigregister
ADI_DATAPATH_ROI_WIDTH_s_swigregister(ADI_DATAPATH_ROI_WIDTH_s)

class ADI_DATAPATH_PP_USEQ_WRITE_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_PP_USEQ_WRITE_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_PP_USEQ_WRITE_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DUMP_START"] = _newton_control.ADI_DATAPATH_PP_USEQ_WRITE_s_DUMP_START_set
    __swig_getmethods__["DUMP_START"] = _newton_control.ADI_DATAPATH_PP_USEQ_WRITE_s_DUMP_START_get
    if _newclass:
        DUMP_START = _swig_property(_newton_control.ADI_DATAPATH_PP_USEQ_WRITE_s_DUMP_START_get, _newton_control.ADI_DATAPATH_PP_USEQ_WRITE_s_DUMP_START_set)
    __swig_setmethods__["RESERVED1"] = _newton_control.ADI_DATAPATH_PP_USEQ_WRITE_s_RESERVED1_set
    __swig_getmethods__["RESERVED1"] = _newton_control.ADI_DATAPATH_PP_USEQ_WRITE_s_RESERVED1_get
    if _newclass:
        RESERVED1 = _swig_property(_newton_control.ADI_DATAPATH_PP_USEQ_WRITE_s_RESERVED1_get, _newton_control.ADI_DATAPATH_PP_USEQ_WRITE_s_RESERVED1_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PP_USEQ_WRITE_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PP_USEQ_WRITE_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_PP_USEQ_WRITE_s_VALUE16_get, _newton_control.ADI_DATAPATH_PP_USEQ_WRITE_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_PP_USEQ_WRITE_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_PP_USEQ_WRITE_s
    __del__ = lambda self: None
ADI_DATAPATH_PP_USEQ_WRITE_s_swigregister = _newton_control.ADI_DATAPATH_PP_USEQ_WRITE_s_swigregister
ADI_DATAPATH_PP_USEQ_WRITE_s_swigregister(ADI_DATAPATH_PP_USEQ_WRITE_s)

class ADI_DATAPATH_PP_ADC_DELAY_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_PP_ADC_DELAY_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_PP_ADC_DELAY_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ADC_DELAY"] = _newton_control.ADI_DATAPATH_PP_ADC_DELAY_s_ADC_DELAY_set
    __swig_getmethods__["ADC_DELAY"] = _newton_control.ADI_DATAPATH_PP_ADC_DELAY_s_ADC_DELAY_get
    if _newclass:
        ADC_DELAY = _swig_property(_newton_control.ADI_DATAPATH_PP_ADC_DELAY_s_ADC_DELAY_get, _newton_control.ADI_DATAPATH_PP_ADC_DELAY_s_ADC_DELAY_set)
    __swig_setmethods__["RESERVED6"] = _newton_control.ADI_DATAPATH_PP_ADC_DELAY_s_RESERVED6_set
    __swig_getmethods__["RESERVED6"] = _newton_control.ADI_DATAPATH_PP_ADC_DELAY_s_RESERVED6_get
    if _newclass:
        RESERVED6 = _swig_property(_newton_control.ADI_DATAPATH_PP_ADC_DELAY_s_RESERVED6_get, _newton_control.ADI_DATAPATH_PP_ADC_DELAY_s_RESERVED6_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PP_ADC_DELAY_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PP_ADC_DELAY_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_PP_ADC_DELAY_s_VALUE16_get, _newton_control.ADI_DATAPATH_PP_ADC_DELAY_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_PP_ADC_DELAY_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_PP_ADC_DELAY_s
    __del__ = lambda self: None
ADI_DATAPATH_PP_ADC_DELAY_s_swigregister = _newton_control.ADI_DATAPATH_PP_ADC_DELAY_s_swigregister
ADI_DATAPATH_PP_ADC_DELAY_s_swigregister(ADI_DATAPATH_PP_ADC_DELAY_s)

class ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MIPI_BUFF_MARGIN"] = _newton_control.ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s_MIPI_BUFF_MARGIN_set
    __swig_getmethods__["MIPI_BUFF_MARGIN"] = _newton_control.ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s_MIPI_BUFF_MARGIN_get
    if _newclass:
        MIPI_BUFF_MARGIN = _swig_property(_newton_control.ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s_MIPI_BUFF_MARGIN_get, _newton_control.ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s_MIPI_BUFF_MARGIN_set)
    __swig_setmethods__["RESERVED4"] = _newton_control.ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s_RESERVED4_set
    __swig_getmethods__["RESERVED4"] = _newton_control.ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s_RESERVED4_get
    if _newclass:
        RESERVED4 = _swig_property(_newton_control.ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s_RESERVED4_get, _newton_control.ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s_RESERVED4_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s_VALUE16_get, _newton_control.ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s
    __del__ = lambda self: None
ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s_swigregister = _newton_control.ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s_swigregister
ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s_swigregister(ADI_DATAPATH_MIPI_BUFF_MARGIN_CONTROL_s)

class ADI_DATAPATH_MIPI_HEADER_WIDTH_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_MIPI_HEADER_WIDTH_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_MIPI_HEADER_WIDTH_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["METADATA_BYTES"] = _newton_control.ADI_DATAPATH_MIPI_HEADER_WIDTH_s_METADATA_BYTES_set
    __swig_getmethods__["METADATA_BYTES"] = _newton_control.ADI_DATAPATH_MIPI_HEADER_WIDTH_s_METADATA_BYTES_get
    if _newclass:
        METADATA_BYTES = _swig_property(_newton_control.ADI_DATAPATH_MIPI_HEADER_WIDTH_s_METADATA_BYTES_get, _newton_control.ADI_DATAPATH_MIPI_HEADER_WIDTH_s_METADATA_BYTES_set)
    __swig_setmethods__["RESERVED8"] = _newton_control.ADI_DATAPATH_MIPI_HEADER_WIDTH_s_RESERVED8_set
    __swig_getmethods__["RESERVED8"] = _newton_control.ADI_DATAPATH_MIPI_HEADER_WIDTH_s_RESERVED8_get
    if _newclass:
        RESERVED8 = _swig_property(_newton_control.ADI_DATAPATH_MIPI_HEADER_WIDTH_s_RESERVED8_get, _newton_control.ADI_DATAPATH_MIPI_HEADER_WIDTH_s_RESERVED8_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_MIPI_HEADER_WIDTH_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_MIPI_HEADER_WIDTH_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_MIPI_HEADER_WIDTH_s_VALUE16_get, _newton_control.ADI_DATAPATH_MIPI_HEADER_WIDTH_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_MIPI_HEADER_WIDTH_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_MIPI_HEADER_WIDTH_s
    __del__ = lambda self: None
ADI_DATAPATH_MIPI_HEADER_WIDTH_s_swigregister = _newton_control.ADI_DATAPATH_MIPI_HEADER_WIDTH_s_swigregister
ADI_DATAPATH_MIPI_HEADER_WIDTH_s_swigregister(ADI_DATAPATH_MIPI_HEADER_WIDTH_s)

class ADI_DATAPATH_FRAME_NUMBER_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_FRAME_NUMBER_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_FRAME_NUMBER_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FRAME_COUNT"] = _newton_control.ADI_DATAPATH_FRAME_NUMBER_s_FRAME_COUNT_set
    __swig_getmethods__["FRAME_COUNT"] = _newton_control.ADI_DATAPATH_FRAME_NUMBER_s_FRAME_COUNT_get
    if _newclass:
        FRAME_COUNT = _swig_property(_newton_control.ADI_DATAPATH_FRAME_NUMBER_s_FRAME_COUNT_get, _newton_control.ADI_DATAPATH_FRAME_NUMBER_s_FRAME_COUNT_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_FRAME_NUMBER_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_FRAME_NUMBER_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_FRAME_NUMBER_s_VALUE16_get, _newton_control.ADI_DATAPATH_FRAME_NUMBER_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_FRAME_NUMBER_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_FRAME_NUMBER_s
    __del__ = lambda self: None
ADI_DATAPATH_FRAME_NUMBER_s_swigregister = _newton_control.ADI_DATAPATH_FRAME_NUMBER_s_swigregister
ADI_DATAPATH_FRAME_NUMBER_s_swigregister(ADI_DATAPATH_FRAME_NUMBER_s)

class ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_LSB_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_LSB_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_LSB_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["USEQ_FW_VERSION_LSB"] = _newton_control.ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_LSB_s_USEQ_FW_VERSION_LSB_set
    __swig_getmethods__["USEQ_FW_VERSION_LSB"] = _newton_control.ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_LSB_s_USEQ_FW_VERSION_LSB_get
    if _newclass:
        USEQ_FW_VERSION_LSB = _swig_property(_newton_control.ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_LSB_s_USEQ_FW_VERSION_LSB_get, _newton_control.ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_LSB_s_USEQ_FW_VERSION_LSB_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_LSB_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_LSB_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_LSB_s_VALUE16_get, _newton_control.ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_LSB_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_LSB_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_LSB_s
    __del__ = lambda self: None
ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_LSB_s_swigregister = _newton_control.ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_LSB_s_swigregister
ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_LSB_s_swigregister(ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_LSB_s)

class ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_MSB_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_MSB_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_MSB_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["USEQ_FW_VERSION_MSB"] = _newton_control.ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_MSB_s_USEQ_FW_VERSION_MSB_set
    __swig_getmethods__["USEQ_FW_VERSION_MSB"] = _newton_control.ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_MSB_s_USEQ_FW_VERSION_MSB_get
    if _newclass:
        USEQ_FW_VERSION_MSB = _swig_property(_newton_control.ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_MSB_s_USEQ_FW_VERSION_MSB_get, _newton_control.ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_MSB_s_USEQ_FW_VERSION_MSB_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_MSB_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_MSB_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_MSB_s_VALUE16_get, _newton_control.ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_MSB_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_MSB_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_MSB_s
    __del__ = lambda self: None
ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_MSB_s_swigregister = _newton_control.ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_MSB_s_swigregister
ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_MSB_s_swigregister(ADI_DATAPATH_MICRO_SEQUENCER_FW_VERSION_MSB_s)

class ADI_DATAPATH_sS_CAL_VER_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_sS_CAL_VER_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_sS_CAL_VER_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TS_CAL_VER"] = _newton_control.ADI_DATAPATH_sS_CAL_VER_s_TS_CAL_VER_set
    __swig_getmethods__["TS_CAL_VER"] = _newton_control.ADI_DATAPATH_sS_CAL_VER_s_TS_CAL_VER_get
    if _newclass:
        TS_CAL_VER = _swig_property(_newton_control.ADI_DATAPATH_sS_CAL_VER_s_TS_CAL_VER_get, _newton_control.ADI_DATAPATH_sS_CAL_VER_s_TS_CAL_VER_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_sS_CAL_VER_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_sS_CAL_VER_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_sS_CAL_VER_s_VALUE16_get, _newton_control.ADI_DATAPATH_sS_CAL_VER_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_sS_CAL_VER_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_sS_CAL_VER_s
    __del__ = lambda self: None
ADI_DATAPATH_sS_CAL_VER_s_swigregister = _newton_control.ADI_DATAPATH_sS_CAL_VER_s_swigregister
ADI_DATAPATH_sS_CAL_VER_s_swigregister(ADI_DATAPATH_sS_CAL_VER_s)

class ADI_DATAPATH_ADC_CAL_VER_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_ADC_CAL_VER_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_ADC_CAL_VER_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ADC_CAL_VER"] = _newton_control.ADI_DATAPATH_ADC_CAL_VER_s_ADC_CAL_VER_set
    __swig_getmethods__["ADC_CAL_VER"] = _newton_control.ADI_DATAPATH_ADC_CAL_VER_s_ADC_CAL_VER_get
    if _newclass:
        ADC_CAL_VER = _swig_property(_newton_control.ADI_DATAPATH_ADC_CAL_VER_s_ADC_CAL_VER_get, _newton_control.ADI_DATAPATH_ADC_CAL_VER_s_ADC_CAL_VER_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_ADC_CAL_VER_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_ADC_CAL_VER_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_ADC_CAL_VER_s_VALUE16_get, _newton_control.ADI_DATAPATH_ADC_CAL_VER_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_ADC_CAL_VER_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_ADC_CAL_VER_s
    __del__ = lambda self: None
ADI_DATAPATH_ADC_CAL_VER_s_swigregister = _newton_control.ADI_DATAPATH_ADC_CAL_VER_s_swigregister
ADI_DATAPATH_ADC_CAL_VER_s_swigregister(ADI_DATAPATH_ADC_CAL_VER_s)

class ADI_DATAPATH_REG_0_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_REG_0_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_REG_0_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["REG_0"] = _newton_control.ADI_DATAPATH_REG_0_s_REG_0_set
    __swig_getmethods__["REG_0"] = _newton_control.ADI_DATAPATH_REG_0_s_REG_0_get
    if _newclass:
        REG_0 = _swig_property(_newton_control.ADI_DATAPATH_REG_0_s_REG_0_get, _newton_control.ADI_DATAPATH_REG_0_s_REG_0_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_REG_0_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_REG_0_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_REG_0_s_VALUE16_get, _newton_control.ADI_DATAPATH_REG_0_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_REG_0_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_REG_0_s
    __del__ = lambda self: None
ADI_DATAPATH_REG_0_s_swigregister = _newton_control.ADI_DATAPATH_REG_0_s_swigregister
ADI_DATAPATH_REG_0_s_swigregister(ADI_DATAPATH_REG_0_s)

class ADI_DATAPATH_REG_1_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_REG_1_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_REG_1_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["REG_1"] = _newton_control.ADI_DATAPATH_REG_1_s_REG_1_set
    __swig_getmethods__["REG_1"] = _newton_control.ADI_DATAPATH_REG_1_s_REG_1_get
    if _newclass:
        REG_1 = _swig_property(_newton_control.ADI_DATAPATH_REG_1_s_REG_1_get, _newton_control.ADI_DATAPATH_REG_1_s_REG_1_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_REG_1_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_REG_1_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_REG_1_s_VALUE16_get, _newton_control.ADI_DATAPATH_REG_1_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_REG_1_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_REG_1_s
    __del__ = lambda self: None
ADI_DATAPATH_REG_1_s_swigregister = _newton_control.ADI_DATAPATH_REG_1_s_swigregister
ADI_DATAPATH_REG_1_s_swigregister(ADI_DATAPATH_REG_1_s)

class ADI_DATAPATH_REG_2_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_REG_2_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_REG_2_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["REG_2"] = _newton_control.ADI_DATAPATH_REG_2_s_REG_2_set
    __swig_getmethods__["REG_2"] = _newton_control.ADI_DATAPATH_REG_2_s_REG_2_get
    if _newclass:
        REG_2 = _swig_property(_newton_control.ADI_DATAPATH_REG_2_s_REG_2_get, _newton_control.ADI_DATAPATH_REG_2_s_REG_2_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_REG_2_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_REG_2_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_REG_2_s_VALUE16_get, _newton_control.ADI_DATAPATH_REG_2_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_REG_2_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_REG_2_s
    __del__ = lambda self: None
ADI_DATAPATH_REG_2_s_swigregister = _newton_control.ADI_DATAPATH_REG_2_s_swigregister
ADI_DATAPATH_REG_2_s_swigregister(ADI_DATAPATH_REG_2_s)

class ADI_DATAPATH_REG_3_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_REG_3_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_REG_3_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["REG_3"] = _newton_control.ADI_DATAPATH_REG_3_s_REG_3_set
    __swig_getmethods__["REG_3"] = _newton_control.ADI_DATAPATH_REG_3_s_REG_3_get
    if _newclass:
        REG_3 = _swig_property(_newton_control.ADI_DATAPATH_REG_3_s_REG_3_get, _newton_control.ADI_DATAPATH_REG_3_s_REG_3_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_REG_3_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_REG_3_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_REG_3_s_VALUE16_get, _newton_control.ADI_DATAPATH_REG_3_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_REG_3_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_REG_3_s
    __del__ = lambda self: None
ADI_DATAPATH_REG_3_s_swigregister = _newton_control.ADI_DATAPATH_REG_3_s_swigregister
ADI_DATAPATH_REG_3_s_swigregister(ADI_DATAPATH_REG_3_s)

class ADI_DATAPATH_REG_4_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_REG_4_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_REG_4_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["REG_4"] = _newton_control.ADI_DATAPATH_REG_4_s_REG_4_set
    __swig_getmethods__["REG_4"] = _newton_control.ADI_DATAPATH_REG_4_s_REG_4_get
    if _newclass:
        REG_4 = _swig_property(_newton_control.ADI_DATAPATH_REG_4_s_REG_4_get, _newton_control.ADI_DATAPATH_REG_4_s_REG_4_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_REG_4_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_REG_4_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_REG_4_s_VALUE16_get, _newton_control.ADI_DATAPATH_REG_4_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_REG_4_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_REG_4_s
    __del__ = lambda self: None
ADI_DATAPATH_REG_4_s_swigregister = _newton_control.ADI_DATAPATH_REG_4_s_swigregister
ADI_DATAPATH_REG_4_s_swigregister(ADI_DATAPATH_REG_4_s)

class ADI_DATAPATH_REG_5_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_REG_5_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_REG_5_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["REG_5"] = _newton_control.ADI_DATAPATH_REG_5_s_REG_5_set
    __swig_getmethods__["REG_5"] = _newton_control.ADI_DATAPATH_REG_5_s_REG_5_get
    if _newclass:
        REG_5 = _swig_property(_newton_control.ADI_DATAPATH_REG_5_s_REG_5_get, _newton_control.ADI_DATAPATH_REG_5_s_REG_5_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_REG_5_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_REG_5_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_REG_5_s_VALUE16_get, _newton_control.ADI_DATAPATH_REG_5_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_REG_5_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_REG_5_s
    __del__ = lambda self: None
ADI_DATAPATH_REG_5_s_swigregister = _newton_control.ADI_DATAPATH_REG_5_s_swigregister
ADI_DATAPATH_REG_5_s_swigregister(ADI_DATAPATH_REG_5_s)

class ADI_DATAPATH_REG_6_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_REG_6_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_REG_6_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["REG_6"] = _newton_control.ADI_DATAPATH_REG_6_s_REG_6_set
    __swig_getmethods__["REG_6"] = _newton_control.ADI_DATAPATH_REG_6_s_REG_6_get
    if _newclass:
        REG_6 = _swig_property(_newton_control.ADI_DATAPATH_REG_6_s_REG_6_get, _newton_control.ADI_DATAPATH_REG_6_s_REG_6_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_REG_6_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_REG_6_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_REG_6_s_VALUE16_get, _newton_control.ADI_DATAPATH_REG_6_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_REG_6_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_REG_6_s
    __del__ = lambda self: None
ADI_DATAPATH_REG_6_s_swigregister = _newton_control.ADI_DATAPATH_REG_6_s_swigregister
ADI_DATAPATH_REG_6_s_swigregister(ADI_DATAPATH_REG_6_s)

class ADI_DATAPATH_REG_7_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_REG_7_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_REG_7_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["REG_7"] = _newton_control.ADI_DATAPATH_REG_7_s_REG_7_set
    __swig_getmethods__["REG_7"] = _newton_control.ADI_DATAPATH_REG_7_s_REG_7_get
    if _newclass:
        REG_7 = _swig_property(_newton_control.ADI_DATAPATH_REG_7_s_REG_7_get, _newton_control.ADI_DATAPATH_REG_7_s_REG_7_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_REG_7_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_REG_7_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_REG_7_s_VALUE16_get, _newton_control.ADI_DATAPATH_REG_7_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_REG_7_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_REG_7_s
    __del__ = lambda self: None
ADI_DATAPATH_REG_7_s_swigregister = _newton_control.ADI_DATAPATH_REG_7_s_swigregister
ADI_DATAPATH_REG_7_s_swigregister(ADI_DATAPATH_REG_7_s)

class ADI_DATAPATH_PARITY_MIPI_BUFFER_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_PARITY_MIPI_BUFFER_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_PARITY_MIPI_BUFFER_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MIPI_BUFFER_PARITY_ERROR"] = _newton_control.ADI_DATAPATH_PARITY_MIPI_BUFFER_s_MIPI_BUFFER_PARITY_ERROR_set
    __swig_getmethods__["MIPI_BUFFER_PARITY_ERROR"] = _newton_control.ADI_DATAPATH_PARITY_MIPI_BUFFER_s_MIPI_BUFFER_PARITY_ERROR_get
    if _newclass:
        MIPI_BUFFER_PARITY_ERROR = _swig_property(_newton_control.ADI_DATAPATH_PARITY_MIPI_BUFFER_s_MIPI_BUFFER_PARITY_ERROR_get, _newton_control.ADI_DATAPATH_PARITY_MIPI_BUFFER_s_MIPI_BUFFER_PARITY_ERROR_set)
    __swig_setmethods__["RESERVED4"] = _newton_control.ADI_DATAPATH_PARITY_MIPI_BUFFER_s_RESERVED4_set
    __swig_getmethods__["RESERVED4"] = _newton_control.ADI_DATAPATH_PARITY_MIPI_BUFFER_s_RESERVED4_get
    if _newclass:
        RESERVED4 = _swig_property(_newton_control.ADI_DATAPATH_PARITY_MIPI_BUFFER_s_RESERVED4_get, _newton_control.ADI_DATAPATH_PARITY_MIPI_BUFFER_s_RESERVED4_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PARITY_MIPI_BUFFER_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PARITY_MIPI_BUFFER_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_PARITY_MIPI_BUFFER_s_VALUE16_get, _newton_control.ADI_DATAPATH_PARITY_MIPI_BUFFER_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_PARITY_MIPI_BUFFER_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_PARITY_MIPI_BUFFER_s
    __del__ = lambda self: None
ADI_DATAPATH_PARITY_MIPI_BUFFER_s_swigregister = _newton_control.ADI_DATAPATH_PARITY_MIPI_BUFFER_s_swigregister
ADI_DATAPATH_PARITY_MIPI_BUFFER_s_swigregister(ADI_DATAPATH_PARITY_MIPI_BUFFER_s)

class ADI_DATAPATH_PACKET_COUNT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_PACKET_COUNT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_PACKET_COUNT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PACKET_COUNT"] = _newton_control.ADI_DATAPATH_PACKET_COUNT_s_PACKET_COUNT_set
    __swig_getmethods__["PACKET_COUNT"] = _newton_control.ADI_DATAPATH_PACKET_COUNT_s_PACKET_COUNT_get
    if _newclass:
        PACKET_COUNT = _swig_property(_newton_control.ADI_DATAPATH_PACKET_COUNT_s_PACKET_COUNT_get, _newton_control.ADI_DATAPATH_PACKET_COUNT_s_PACKET_COUNT_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DATAPATH_PACKET_COUNT_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DATAPATH_PACKET_COUNT_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DATAPATH_PACKET_COUNT_s_RESERVED10_get, _newton_control.ADI_DATAPATH_PACKET_COUNT_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PACKET_COUNT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PACKET_COUNT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_PACKET_COUNT_s_VALUE16_get, _newton_control.ADI_DATAPATH_PACKET_COUNT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_PACKET_COUNT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_PACKET_COUNT_s
    __del__ = lambda self: None
ADI_DATAPATH_PACKET_COUNT_s_swigregister = _newton_control.ADI_DATAPATH_PACKET_COUNT_s_swigregister
ADI_DATAPATH_PACKET_COUNT_s_swigregister(ADI_DATAPATH_PACKET_COUNT_s)

class ADI_DATAPATH_PACKETS_PER_FRAME_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_PACKETS_PER_FRAME_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_PACKETS_PER_FRAME_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TOTAL_PACKETS_PER_FRAME"] = _newton_control.ADI_DATAPATH_PACKETS_PER_FRAME_s_TOTAL_PACKETS_PER_FRAME_set
    __swig_getmethods__["TOTAL_PACKETS_PER_FRAME"] = _newton_control.ADI_DATAPATH_PACKETS_PER_FRAME_s_TOTAL_PACKETS_PER_FRAME_get
    if _newclass:
        TOTAL_PACKETS_PER_FRAME = _swig_property(_newton_control.ADI_DATAPATH_PACKETS_PER_FRAME_s_TOTAL_PACKETS_PER_FRAME_get, _newton_control.ADI_DATAPATH_PACKETS_PER_FRAME_s_TOTAL_PACKETS_PER_FRAME_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DATAPATH_PACKETS_PER_FRAME_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DATAPATH_PACKETS_PER_FRAME_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DATAPATH_PACKETS_PER_FRAME_s_RESERVED10_get, _newton_control.ADI_DATAPATH_PACKETS_PER_FRAME_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PACKETS_PER_FRAME_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_PACKETS_PER_FRAME_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_PACKETS_PER_FRAME_s_VALUE16_get, _newton_control.ADI_DATAPATH_PACKETS_PER_FRAME_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_PACKETS_PER_FRAME_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_PACKETS_PER_FRAME_s
    __del__ = lambda self: None
ADI_DATAPATH_PACKETS_PER_FRAME_s_swigregister = _newton_control.ADI_DATAPATH_PACKETS_PER_FRAME_s_swigregister
ADI_DATAPATH_PACKETS_PER_FRAME_s_swigregister(ADI_DATAPATH_PACKETS_PER_FRAME_s)

class ADI_DATAPATH_ROW_VECTOR_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_ROW_VECTOR_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_ROW_VECTOR_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ROW_VECTOR"] = _newton_control.ADI_DATAPATH_ROW_VECTOR_s_ROW_VECTOR_set
    __swig_getmethods__["ROW_VECTOR"] = _newton_control.ADI_DATAPATH_ROW_VECTOR_s_ROW_VECTOR_get
    if _newclass:
        ROW_VECTOR = _swig_property(_newton_control.ADI_DATAPATH_ROW_VECTOR_s_ROW_VECTOR_get, _newton_control.ADI_DATAPATH_ROW_VECTOR_s_ROW_VECTOR_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DATAPATH_ROW_VECTOR_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DATAPATH_ROW_VECTOR_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DATAPATH_ROW_VECTOR_s_RESERVED10_get, _newton_control.ADI_DATAPATH_ROW_VECTOR_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_ROW_VECTOR_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_ROW_VECTOR_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_ROW_VECTOR_s_VALUE16_get, _newton_control.ADI_DATAPATH_ROW_VECTOR_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_ROW_VECTOR_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_ROW_VECTOR_s
    __del__ = lambda self: None
ADI_DATAPATH_ROW_VECTOR_s_swigregister = _newton_control.ADI_DATAPATH_ROW_VECTOR_s_swigregister
ADI_DATAPATH_ROW_VECTOR_s_swigregister(ADI_DATAPATH_ROW_VECTOR_s)

class ADI_DATAPATH_ROWS_PER_PACKET_OUT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_ROWS_PER_PACKET_OUT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_ROWS_PER_PACKET_OUT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ROWS_PER_PACKET_OUT"] = _newton_control.ADI_DATAPATH_ROWS_PER_PACKET_OUT_s_ROWS_PER_PACKET_OUT_set
    __swig_getmethods__["ROWS_PER_PACKET_OUT"] = _newton_control.ADI_DATAPATH_ROWS_PER_PACKET_OUT_s_ROWS_PER_PACKET_OUT_get
    if _newclass:
        ROWS_PER_PACKET_OUT = _swig_property(_newton_control.ADI_DATAPATH_ROWS_PER_PACKET_OUT_s_ROWS_PER_PACKET_OUT_get, _newton_control.ADI_DATAPATH_ROWS_PER_PACKET_OUT_s_ROWS_PER_PACKET_OUT_set)
    __swig_setmethods__["RESERVED7"] = _newton_control.ADI_DATAPATH_ROWS_PER_PACKET_OUT_s_RESERVED7_set
    __swig_getmethods__["RESERVED7"] = _newton_control.ADI_DATAPATH_ROWS_PER_PACKET_OUT_s_RESERVED7_get
    if _newclass:
        RESERVED7 = _swig_property(_newton_control.ADI_DATAPATH_ROWS_PER_PACKET_OUT_s_RESERVED7_get, _newton_control.ADI_DATAPATH_ROWS_PER_PACKET_OUT_s_RESERVED7_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_ROWS_PER_PACKET_OUT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_ROWS_PER_PACKET_OUT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_ROWS_PER_PACKET_OUT_s_VALUE16_get, _newton_control.ADI_DATAPATH_ROWS_PER_PACKET_OUT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_ROWS_PER_PACKET_OUT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_ROWS_PER_PACKET_OUT_s
    __del__ = lambda self: None
ADI_DATAPATH_ROWS_PER_PACKET_OUT_s_swigregister = _newton_control.ADI_DATAPATH_ROWS_PER_PACKET_OUT_s_swigregister
ADI_DATAPATH_ROWS_PER_PACKET_OUT_s_swigregister(ADI_DATAPATH_ROWS_PER_PACKET_OUT_s)

class ADI_DATAPATH_MIPI_RD_EN_MAX_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_MIPI_RD_EN_MAX_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_MIPI_RD_EN_MAX_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MIPI_BUFF_READ_ENABLE_COUNT_MAX"] = _newton_control.ADI_DATAPATH_MIPI_RD_EN_MAX_s_MIPI_BUFF_READ_ENABLE_COUNT_MAX_set
    __swig_getmethods__["MIPI_BUFF_READ_ENABLE_COUNT_MAX"] = _newton_control.ADI_DATAPATH_MIPI_RD_EN_MAX_s_MIPI_BUFF_READ_ENABLE_COUNT_MAX_get
    if _newclass:
        MIPI_BUFF_READ_ENABLE_COUNT_MAX = _swig_property(_newton_control.ADI_DATAPATH_MIPI_RD_EN_MAX_s_MIPI_BUFF_READ_ENABLE_COUNT_MAX_get, _newton_control.ADI_DATAPATH_MIPI_RD_EN_MAX_s_MIPI_BUFF_READ_ENABLE_COUNT_MAX_set)
    __swig_setmethods__["RESERVED8"] = _newton_control.ADI_DATAPATH_MIPI_RD_EN_MAX_s_RESERVED8_set
    __swig_getmethods__["RESERVED8"] = _newton_control.ADI_DATAPATH_MIPI_RD_EN_MAX_s_RESERVED8_get
    if _newclass:
        RESERVED8 = _swig_property(_newton_control.ADI_DATAPATH_MIPI_RD_EN_MAX_s_RESERVED8_get, _newton_control.ADI_DATAPATH_MIPI_RD_EN_MAX_s_RESERVED8_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_MIPI_RD_EN_MAX_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_MIPI_RD_EN_MAX_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_MIPI_RD_EN_MAX_s_VALUE16_get, _newton_control.ADI_DATAPATH_MIPI_RD_EN_MAX_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_MIPI_RD_EN_MAX_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_MIPI_RD_EN_MAX_s
    __del__ = lambda self: None
ADI_DATAPATH_MIPI_RD_EN_MAX_s_swigregister = _newton_control.ADI_DATAPATH_MIPI_RD_EN_MAX_s_swigregister
ADI_DATAPATH_MIPI_RD_EN_MAX_s_swigregister(ADI_DATAPATH_MIPI_RD_EN_MAX_s)

class ADI_DATAPATH_ANALOG_SS_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_ANALOG_SS_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_ANALOG_SS_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ANALOG_SS"] = _newton_control.ADI_DATAPATH_ANALOG_SS_s_ANALOG_SS_set
    __swig_getmethods__["ANALOG_SS"] = _newton_control.ADI_DATAPATH_ANALOG_SS_s_ANALOG_SS_get
    if _newclass:
        ANALOG_SS = _swig_property(_newton_control.ADI_DATAPATH_ANALOG_SS_s_ANALOG_SS_get, _newton_control.ADI_DATAPATH_ANALOG_SS_s_ANALOG_SS_set)
    __swig_setmethods__["RESERVED4"] = _newton_control.ADI_DATAPATH_ANALOG_SS_s_RESERVED4_set
    __swig_getmethods__["RESERVED4"] = _newton_control.ADI_DATAPATH_ANALOG_SS_s_RESERVED4_get
    if _newclass:
        RESERVED4 = _swig_property(_newton_control.ADI_DATAPATH_ANALOG_SS_s_RESERVED4_get, _newton_control.ADI_DATAPATH_ANALOG_SS_s_RESERVED4_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_ANALOG_SS_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_ANALOG_SS_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_ANALOG_SS_s_VALUE16_get, _newton_control.ADI_DATAPATH_ANALOG_SS_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_ANALOG_SS_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_ANALOG_SS_s
    __del__ = lambda self: None
ADI_DATAPATH_ANALOG_SS_s_swigregister = _newton_control.ADI_DATAPATH_ANALOG_SS_s_swigregister
ADI_DATAPATH_ANALOG_SS_s_swigregister(ADI_DATAPATH_ANALOG_SS_s)

class ADI_DATAPATH_MIPI_BUFF_PARITY_ERR_CNT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_MIPI_BUFF_PARITY_ERR_CNT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_MIPI_BUFF_PARITY_ERR_CNT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MIPI_BUFF_PARITY_ERR_COUNT"] = _newton_control.ADI_DATAPATH_MIPI_BUFF_PARITY_ERR_CNT_s_MIPI_BUFF_PARITY_ERR_COUNT_set
    __swig_getmethods__["MIPI_BUFF_PARITY_ERR_COUNT"] = _newton_control.ADI_DATAPATH_MIPI_BUFF_PARITY_ERR_CNT_s_MIPI_BUFF_PARITY_ERR_COUNT_get
    if _newclass:
        MIPI_BUFF_PARITY_ERR_COUNT = _swig_property(_newton_control.ADI_DATAPATH_MIPI_BUFF_PARITY_ERR_CNT_s_MIPI_BUFF_PARITY_ERR_COUNT_get, _newton_control.ADI_DATAPATH_MIPI_BUFF_PARITY_ERR_CNT_s_MIPI_BUFF_PARITY_ERR_COUNT_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_MIPI_BUFF_PARITY_ERR_CNT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_MIPI_BUFF_PARITY_ERR_CNT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_MIPI_BUFF_PARITY_ERR_CNT_s_VALUE16_get, _newton_control.ADI_DATAPATH_MIPI_BUFF_PARITY_ERR_CNT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_MIPI_BUFF_PARITY_ERR_CNT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_MIPI_BUFF_PARITY_ERR_CNT_s
    __del__ = lambda self: None
ADI_DATAPATH_MIPI_BUFF_PARITY_ERR_CNT_s_swigregister = _newton_control.ADI_DATAPATH_MIPI_BUFF_PARITY_ERR_CNT_s_swigregister
ADI_DATAPATH_MIPI_BUFF_PARITY_ERR_CNT_s_swigregister(ADI_DATAPATH_MIPI_BUFF_PARITY_ERR_CNT_s)

class ADI_DATAPATH_LINE_MEM_PARITY_ERR_CNT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_LINE_MEM_PARITY_ERR_CNT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_LINE_MEM_PARITY_ERR_CNT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LINE_MEM_PARITY_ERR_COUNT"] = _newton_control.ADI_DATAPATH_LINE_MEM_PARITY_ERR_CNT_s_LINE_MEM_PARITY_ERR_COUNT_set
    __swig_getmethods__["LINE_MEM_PARITY_ERR_COUNT"] = _newton_control.ADI_DATAPATH_LINE_MEM_PARITY_ERR_CNT_s_LINE_MEM_PARITY_ERR_COUNT_get
    if _newclass:
        LINE_MEM_PARITY_ERR_COUNT = _swig_property(_newton_control.ADI_DATAPATH_LINE_MEM_PARITY_ERR_CNT_s_LINE_MEM_PARITY_ERR_COUNT_get, _newton_control.ADI_DATAPATH_LINE_MEM_PARITY_ERR_CNT_s_LINE_MEM_PARITY_ERR_COUNT_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_LINE_MEM_PARITY_ERR_CNT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_LINE_MEM_PARITY_ERR_CNT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_LINE_MEM_PARITY_ERR_CNT_s_VALUE16_get, _newton_control.ADI_DATAPATH_LINE_MEM_PARITY_ERR_CNT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_LINE_MEM_PARITY_ERR_CNT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_LINE_MEM_PARITY_ERR_CNT_s
    __del__ = lambda self: None
ADI_DATAPATH_LINE_MEM_PARITY_ERR_CNT_s_swigregister = _newton_control.ADI_DATAPATH_LINE_MEM_PARITY_ERR_CNT_s_swigregister
ADI_DATAPATH_LINE_MEM_PARITY_ERR_CNT_s_swigregister(ADI_DATAPATH_LINE_MEM_PARITY_ERR_CNT_s)

class ADI_DATAPATH_GAIN_MEM_PARITY_ERR_CNT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_GAIN_MEM_PARITY_ERR_CNT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_GAIN_MEM_PARITY_ERR_CNT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["GAIN_MEM_PARITY_ERR_COUNT"] = _newton_control.ADI_DATAPATH_GAIN_MEM_PARITY_ERR_CNT_s_GAIN_MEM_PARITY_ERR_COUNT_set
    __swig_getmethods__["GAIN_MEM_PARITY_ERR_COUNT"] = _newton_control.ADI_DATAPATH_GAIN_MEM_PARITY_ERR_CNT_s_GAIN_MEM_PARITY_ERR_COUNT_get
    if _newclass:
        GAIN_MEM_PARITY_ERR_COUNT = _swig_property(_newton_control.ADI_DATAPATH_GAIN_MEM_PARITY_ERR_CNT_s_GAIN_MEM_PARITY_ERR_COUNT_get, _newton_control.ADI_DATAPATH_GAIN_MEM_PARITY_ERR_CNT_s_GAIN_MEM_PARITY_ERR_COUNT_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_GAIN_MEM_PARITY_ERR_CNT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_GAIN_MEM_PARITY_ERR_CNT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_GAIN_MEM_PARITY_ERR_CNT_s_VALUE16_get, _newton_control.ADI_DATAPATH_GAIN_MEM_PARITY_ERR_CNT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_GAIN_MEM_PARITY_ERR_CNT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_GAIN_MEM_PARITY_ERR_CNT_s
    __del__ = lambda self: None
ADI_DATAPATH_GAIN_MEM_PARITY_ERR_CNT_s_swigregister = _newton_control.ADI_DATAPATH_GAIN_MEM_PARITY_ERR_CNT_s_swigregister
ADI_DATAPATH_GAIN_MEM_PARITY_ERR_CNT_s_swigregister(ADI_DATAPATH_GAIN_MEM_PARITY_ERR_CNT_s)

class ADI_DATAPATH_IA_SELECT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_IA_SELECT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_IA_SELECT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["IA_ENA"] = _newton_control.ADI_DATAPATH_IA_SELECT_s_IA_ENA_set
    __swig_getmethods__["IA_ENA"] = _newton_control.ADI_DATAPATH_IA_SELECT_s_IA_ENA_get
    if _newclass:
        IA_ENA = _swig_property(_newton_control.ADI_DATAPATH_IA_SELECT_s_IA_ENA_get, _newton_control.ADI_DATAPATH_IA_SELECT_s_IA_ENA_set)
    __swig_setmethods__["RESERVED1"] = _newton_control.ADI_DATAPATH_IA_SELECT_s_RESERVED1_set
    __swig_getmethods__["RESERVED1"] = _newton_control.ADI_DATAPATH_IA_SELECT_s_RESERVED1_get
    if _newclass:
        RESERVED1 = _swig_property(_newton_control.ADI_DATAPATH_IA_SELECT_s_RESERVED1_get, _newton_control.ADI_DATAPATH_IA_SELECT_s_RESERVED1_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_IA_SELECT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_IA_SELECT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_IA_SELECT_s_VALUE16_get, _newton_control.ADI_DATAPATH_IA_SELECT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_IA_SELECT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_IA_SELECT_s
    __del__ = lambda self: None
ADI_DATAPATH_IA_SELECT_s_swigregister = _newton_control.ADI_DATAPATH_IA_SELECT_s_swigregister
ADI_DATAPATH_IA_SELECT_s_swigregister(ADI_DATAPATH_IA_SELECT_s)

class ADI_DATAPATH_IA_ADDR_REG_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_IA_ADDR_REG_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_IA_ADDR_REG_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["IA_START_ADDR"] = _newton_control.ADI_DATAPATH_IA_ADDR_REG_s_IA_START_ADDR_set
    __swig_getmethods__["IA_START_ADDR"] = _newton_control.ADI_DATAPATH_IA_ADDR_REG_s_IA_START_ADDR_get
    if _newclass:
        IA_START_ADDR = _swig_property(_newton_control.ADI_DATAPATH_IA_ADDR_REG_s_IA_START_ADDR_get, _newton_control.ADI_DATAPATH_IA_ADDR_REG_s_IA_START_ADDR_set)
    __swig_setmethods__["RESERVED12"] = _newton_control.ADI_DATAPATH_IA_ADDR_REG_s_RESERVED12_set
    __swig_getmethods__["RESERVED12"] = _newton_control.ADI_DATAPATH_IA_ADDR_REG_s_RESERVED12_get
    if _newclass:
        RESERVED12 = _swig_property(_newton_control.ADI_DATAPATH_IA_ADDR_REG_s_RESERVED12_get, _newton_control.ADI_DATAPATH_IA_ADDR_REG_s_RESERVED12_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_IA_ADDR_REG_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_IA_ADDR_REG_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_IA_ADDR_REG_s_VALUE16_get, _newton_control.ADI_DATAPATH_IA_ADDR_REG_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_IA_ADDR_REG_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_IA_ADDR_REG_s
    __del__ = lambda self: None
ADI_DATAPATH_IA_ADDR_REG_s_swigregister = _newton_control.ADI_DATAPATH_IA_ADDR_REG_s_swigregister
ADI_DATAPATH_IA_ADDR_REG_s_swigregister(ADI_DATAPATH_IA_ADDR_REG_s)

class ADI_DATAPATH_IA_WRDATA_REG_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_IA_WRDATA_REG_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_IA_WRDATA_REG_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["IA_WRDATA"] = _newton_control.ADI_DATAPATH_IA_WRDATA_REG_s_IA_WRDATA_set
    __swig_getmethods__["IA_WRDATA"] = _newton_control.ADI_DATAPATH_IA_WRDATA_REG_s_IA_WRDATA_get
    if _newclass:
        IA_WRDATA = _swig_property(_newton_control.ADI_DATAPATH_IA_WRDATA_REG_s_IA_WRDATA_get, _newton_control.ADI_DATAPATH_IA_WRDATA_REG_s_IA_WRDATA_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_IA_WRDATA_REG_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_IA_WRDATA_REG_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_IA_WRDATA_REG_s_VALUE16_get, _newton_control.ADI_DATAPATH_IA_WRDATA_REG_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_IA_WRDATA_REG_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_IA_WRDATA_REG_s
    __del__ = lambda self: None
ADI_DATAPATH_IA_WRDATA_REG_s_swigregister = _newton_control.ADI_DATAPATH_IA_WRDATA_REG_s_swigregister
ADI_DATAPATH_IA_WRDATA_REG_s_swigregister(ADI_DATAPATH_IA_WRDATA_REG_s)

class ADI_DATAPATH_IA_WRDATA_REG_ALIAS_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_IA_WRDATA_REG_ALIAS_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_IA_WRDATA_REG_ALIAS_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["IA_WRDATA_ALIAS"] = _newton_control.ADI_DATAPATH_IA_WRDATA_REG_ALIAS_s_IA_WRDATA_ALIAS_set
    __swig_getmethods__["IA_WRDATA_ALIAS"] = _newton_control.ADI_DATAPATH_IA_WRDATA_REG_ALIAS_s_IA_WRDATA_ALIAS_get
    if _newclass:
        IA_WRDATA_ALIAS = _swig_property(_newton_control.ADI_DATAPATH_IA_WRDATA_REG_ALIAS_s_IA_WRDATA_ALIAS_get, _newton_control.ADI_DATAPATH_IA_WRDATA_REG_ALIAS_s_IA_WRDATA_ALIAS_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_IA_WRDATA_REG_ALIAS_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_IA_WRDATA_REG_ALIAS_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_IA_WRDATA_REG_ALIAS_s_VALUE16_get, _newton_control.ADI_DATAPATH_IA_WRDATA_REG_ALIAS_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_IA_WRDATA_REG_ALIAS_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_IA_WRDATA_REG_ALIAS_s
    __del__ = lambda self: None
ADI_DATAPATH_IA_WRDATA_REG_ALIAS_s_swigregister = _newton_control.ADI_DATAPATH_IA_WRDATA_REG_ALIAS_s_swigregister
ADI_DATAPATH_IA_WRDATA_REG_ALIAS_s_swigregister(ADI_DATAPATH_IA_WRDATA_REG_ALIAS_s)

class ADI_DATAPATH_IA_RDDATA_REG_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_IA_RDDATA_REG_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_IA_RDDATA_REG_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["IA_RDDATA"] = _newton_control.ADI_DATAPATH_IA_RDDATA_REG_s_IA_RDDATA_set
    __swig_getmethods__["IA_RDDATA"] = _newton_control.ADI_DATAPATH_IA_RDDATA_REG_s_IA_RDDATA_get
    if _newclass:
        IA_RDDATA = _swig_property(_newton_control.ADI_DATAPATH_IA_RDDATA_REG_s_IA_RDDATA_get, _newton_control.ADI_DATAPATH_IA_RDDATA_REG_s_IA_RDDATA_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_IA_RDDATA_REG_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_IA_RDDATA_REG_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_IA_RDDATA_REG_s_VALUE16_get, _newton_control.ADI_DATAPATH_IA_RDDATA_REG_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_IA_RDDATA_REG_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_IA_RDDATA_REG_s
    __del__ = lambda self: None
ADI_DATAPATH_IA_RDDATA_REG_s_swigregister = _newton_control.ADI_DATAPATH_IA_RDDATA_REG_s_swigregister
ADI_DATAPATH_IA_RDDATA_REG_s_swigregister(ADI_DATAPATH_IA_RDDATA_REG_s)

class ADI_DATAPATH_IA_RDDATA_REG_ALIAS_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_IA_RDDATA_REG_ALIAS_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_IA_RDDATA_REG_ALIAS_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["IA_RDDATA_ALIAS"] = _newton_control.ADI_DATAPATH_IA_RDDATA_REG_ALIAS_s_IA_RDDATA_ALIAS_set
    __swig_getmethods__["IA_RDDATA_ALIAS"] = _newton_control.ADI_DATAPATH_IA_RDDATA_REG_ALIAS_s_IA_RDDATA_ALIAS_get
    if _newclass:
        IA_RDDATA_ALIAS = _swig_property(_newton_control.ADI_DATAPATH_IA_RDDATA_REG_ALIAS_s_IA_RDDATA_ALIAS_get, _newton_control.ADI_DATAPATH_IA_RDDATA_REG_ALIAS_s_IA_RDDATA_ALIAS_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_IA_RDDATA_REG_ALIAS_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_IA_RDDATA_REG_ALIAS_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_IA_RDDATA_REG_ALIAS_s_VALUE16_get, _newton_control.ADI_DATAPATH_IA_RDDATA_REG_ALIAS_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_IA_RDDATA_REG_ALIAS_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_IA_RDDATA_REG_ALIAS_s
    __del__ = lambda self: None
ADI_DATAPATH_IA_RDDATA_REG_ALIAS_s_swigregister = _newton_control.ADI_DATAPATH_IA_RDDATA_REG_ALIAS_s_swigregister
ADI_DATAPATH_IA_RDDATA_REG_ALIAS_s_swigregister(ADI_DATAPATH_IA_RDDATA_REG_ALIAS_s)

class ADI_DATAPATH_IA_BANK_TYPE_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DATAPATH_IA_BANK_TYPE_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DATAPATH_IA_BANK_TYPE_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["IA_BANK_TYPE"] = _newton_control.ADI_DATAPATH_IA_BANK_TYPE_s_IA_BANK_TYPE_set
    __swig_getmethods__["IA_BANK_TYPE"] = _newton_control.ADI_DATAPATH_IA_BANK_TYPE_s_IA_BANK_TYPE_get
    if _newclass:
        IA_BANK_TYPE = _swig_property(_newton_control.ADI_DATAPATH_IA_BANK_TYPE_s_IA_BANK_TYPE_get, _newton_control.ADI_DATAPATH_IA_BANK_TYPE_s_IA_BANK_TYPE_set)
    __swig_setmethods__["RESERVED1"] = _newton_control.ADI_DATAPATH_IA_BANK_TYPE_s_RESERVED1_set
    __swig_getmethods__["RESERVED1"] = _newton_control.ADI_DATAPATH_IA_BANK_TYPE_s_RESERVED1_get
    if _newclass:
        RESERVED1 = _swig_property(_newton_control.ADI_DATAPATH_IA_BANK_TYPE_s_RESERVED1_get, _newton_control.ADI_DATAPATH_IA_BANK_TYPE_s_RESERVED1_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_IA_BANK_TYPE_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DATAPATH_IA_BANK_TYPE_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DATAPATH_IA_BANK_TYPE_s_VALUE16_get, _newton_control.ADI_DATAPATH_IA_BANK_TYPE_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DATAPATH_IA_BANK_TYPE_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DATAPATH_IA_BANK_TYPE_s
    __del__ = lambda self: None
ADI_DATAPATH_IA_BANK_TYPE_s_swigregister = _newton_control.ADI_DATAPATH_IA_BANK_TYPE_s_swigregister
ADI_DATAPATH_IA_BANK_TYPE_s_swigregister(ADI_DATAPATH_IA_BANK_TYPE_s)

class ADI_DE_REGS_YODA_DE_CONTROL_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_DE_CONTROL_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_DE_CONTROL_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["STATIC_CNTRL"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_STATIC_CNTRL_set
    __swig_getmethods__["STATIC_CNTRL"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_STATIC_CNTRL_get
    if _newclass:
        STATIC_CNTRL = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_STATIC_CNTRL_get, _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_STATIC_CNTRL_set)
    __swig_setmethods__["OVERIDE_CNTRL"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_OVERIDE_CNTRL_set
    __swig_getmethods__["OVERIDE_CNTRL"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_OVERIDE_CNTRL_get
    if _newclass:
        OVERIDE_CNTRL = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_OVERIDE_CNTRL_get, _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_OVERIDE_CNTRL_set)
    __swig_setmethods__["GO_BIT"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_GO_BIT_set
    __swig_getmethods__["GO_BIT"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_GO_BIT_get
    if _newclass:
        GO_BIT = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_GO_BIT_get, _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_GO_BIT_set)
    __swig_setmethods__["BUSY_BIT"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_BUSY_BIT_set
    __swig_getmethods__["BUSY_BIT"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_BUSY_BIT_get
    if _newclass:
        BUSY_BIT = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_BUSY_BIT_get, _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_BUSY_BIT_set)
    __swig_setmethods__["POSTAMBLE_BIT"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_POSTAMBLE_BIT_set
    __swig_getmethods__["POSTAMBLE_BIT"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_POSTAMBLE_BIT_get
    if _newclass:
        POSTAMBLE_BIT = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_POSTAMBLE_BIT_get, _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_POSTAMBLE_BIT_set)
    __swig_setmethods__["PREAMBLE_BIT"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_PREAMBLE_BIT_set
    __swig_getmethods__["PREAMBLE_BIT"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_PREAMBLE_BIT_get
    if _newclass:
        PREAMBLE_BIT = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_PREAMBLE_BIT_get, _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_PREAMBLE_BIT_set)
    __swig_setmethods__["MANUAL_MODE_BIT"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_MANUAL_MODE_BIT_set
    __swig_getmethods__["MANUAL_MODE_BIT"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_MANUAL_MODE_BIT_get
    if _newclass:
        MANUAL_MODE_BIT = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_MANUAL_MODE_BIT_get, _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_MANUAL_MODE_BIT_set)
    __swig_setmethods__["INIT_VEC_BIT"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_INIT_VEC_BIT_set
    __swig_getmethods__["INIT_VEC_BIT"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_INIT_VEC_BIT_get
    if _newclass:
        INIT_VEC_BIT = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_INIT_VEC_BIT_get, _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_INIT_VEC_BIT_set)
    __swig_setmethods__["DUMP_DIRECTION_BIT"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_DUMP_DIRECTION_BIT_set
    __swig_getmethods__["DUMP_DIRECTION_BIT"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_DUMP_DIRECTION_BIT_get
    if _newclass:
        DUMP_DIRECTION_BIT = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_DUMP_DIRECTION_BIT_get, _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_DUMP_DIRECTION_BIT_set)
    __swig_setmethods__["RESERVED9"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_RESERVED9_set
    __swig_getmethods__["RESERVED9"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_RESERVED9_get
    if _newclass:
        RESERVED9 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_RESERVED9_get, _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_RESERVED9_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_DE_CONTROL_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_DE_CONTROL_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_DE_CONTROL_s_swigregister = _newton_control.ADI_DE_REGS_YODA_DE_CONTROL_s_swigregister
ADI_DE_REGS_YODA_DE_CONTROL_s_swigregister(ADI_DE_REGS_YODA_DE_CONTROL_s)

class ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["REPEAT_COUNT"] = _newton_control.ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s_REPEAT_COUNT_set
    __swig_getmethods__["REPEAT_COUNT"] = _newton_control.ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s_REPEAT_COUNT_get
    if _newclass:
        REPEAT_COUNT = _swig_property(_newton_control.ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s_REPEAT_COUNT_get, _newton_control.ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s_REPEAT_COUNT_set)
    __swig_setmethods__["RESERVED8"] = _newton_control.ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s_RESERVED8_set
    __swig_getmethods__["RESERVED8"] = _newton_control.ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s_RESERVED8_get
    if _newclass:
        RESERVED8 = _swig_property(_newton_control.ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s_RESERVED8_get, _newton_control.ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s_RESERVED8_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s_swigregister = _newton_control.ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s_swigregister
ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s_swigregister(ADI_DE_REGS_YODA_BINNED1X2_REPEAT_COUNT_s)

class ADI_DE_REGS_YODA_OVERRIDE_DATA_REG1_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_OVERRIDE_DATA_REG1_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_OVERRIDE_DATA_REG1_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OVR_VAL"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG1_s_OVR_VAL_set
    __swig_getmethods__["OVR_VAL"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG1_s_OVR_VAL_get
    if _newclass:
        OVR_VAL = _swig_property(_newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG1_s_OVR_VAL_get, _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG1_s_OVR_VAL_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG1_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG1_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG1_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG1_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_OVERRIDE_DATA_REG1_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_OVERRIDE_DATA_REG1_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_OVERRIDE_DATA_REG1_s_swigregister = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG1_s_swigregister
ADI_DE_REGS_YODA_OVERRIDE_DATA_REG1_s_swigregister(ADI_DE_REGS_YODA_OVERRIDE_DATA_REG1_s)

class ADI_DE_REGS_YODA_OVERRIDE_DATA_REG2_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_OVERRIDE_DATA_REG2_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_OVERRIDE_DATA_REG2_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OVR_VAL"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG2_s_OVR_VAL_set
    __swig_getmethods__["OVR_VAL"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG2_s_OVR_VAL_get
    if _newclass:
        OVR_VAL = _swig_property(_newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG2_s_OVR_VAL_get, _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG2_s_OVR_VAL_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG2_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG2_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG2_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG2_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_OVERRIDE_DATA_REG2_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_OVERRIDE_DATA_REG2_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_OVERRIDE_DATA_REG2_s_swigregister = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG2_s_swigregister
ADI_DE_REGS_YODA_OVERRIDE_DATA_REG2_s_swigregister(ADI_DE_REGS_YODA_OVERRIDE_DATA_REG2_s)

class ADI_DE_REGS_YODA_OVERRIDE_DATA_REG3_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_OVERRIDE_DATA_REG3_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_OVERRIDE_DATA_REG3_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OVR_VAL"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG3_s_OVR_VAL_set
    __swig_getmethods__["OVR_VAL"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG3_s_OVR_VAL_get
    if _newclass:
        OVR_VAL = _swig_property(_newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG3_s_OVR_VAL_get, _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG3_s_OVR_VAL_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG3_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG3_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG3_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG3_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_OVERRIDE_DATA_REG3_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_OVERRIDE_DATA_REG3_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_OVERRIDE_DATA_REG3_s_swigregister = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_DATA_REG3_s_swigregister
ADI_DE_REGS_YODA_OVERRIDE_DATA_REG3_s_swigregister(ADI_DE_REGS_YODA_OVERRIDE_DATA_REG3_s)

class ADI_DE_REGS_YODA_BINNED1X2_END_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_BINNED1X2_END_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_BINNED1X2_END_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["END_ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_BINNED1X2_END_s_END_ADDRESS_set
    __swig_getmethods__["END_ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_BINNED1X2_END_s_END_ADDRESS_get
    if _newclass:
        END_ADDRESS = _swig_property(_newton_control.ADI_DE_REGS_YODA_BINNED1X2_END_s_END_ADDRESS_get, _newton_control.ADI_DE_REGS_YODA_BINNED1X2_END_s_END_ADDRESS_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_BINNED1X2_END_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_BINNED1X2_END_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_BINNED1X2_END_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_BINNED1X2_END_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_BINNED1X2_END_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_BINNED1X2_END_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_BINNED1X2_END_s_swigregister = _newton_control.ADI_DE_REGS_YODA_BINNED1X2_END_s_swigregister
ADI_DE_REGS_YODA_BINNED1X2_END_s_swigregister(ADI_DE_REGS_YODA_BINNED1X2_END_s)

class ADI_DE_REGS_YODA_OVERRIDE_SEL_REG1_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_OVERRIDE_SEL_REG1_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_OVERRIDE_SEL_REG1_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OVR_VAL_SEL"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG1_s_OVR_VAL_SEL_set
    __swig_getmethods__["OVR_VAL_SEL"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG1_s_OVR_VAL_SEL_get
    if _newclass:
        OVR_VAL_SEL = _swig_property(_newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG1_s_OVR_VAL_SEL_get, _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG1_s_OVR_VAL_SEL_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG1_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG1_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG1_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG1_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_OVERRIDE_SEL_REG1_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_OVERRIDE_SEL_REG1_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_OVERRIDE_SEL_REG1_s_swigregister = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG1_s_swigregister
ADI_DE_REGS_YODA_OVERRIDE_SEL_REG1_s_swigregister(ADI_DE_REGS_YODA_OVERRIDE_SEL_REG1_s)

class ADI_DE_REGS_YODA_OVERRIDE_SEL_REG2_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_OVERRIDE_SEL_REG2_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_OVERRIDE_SEL_REG2_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OVR_VAL_SEL"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG2_s_OVR_VAL_SEL_set
    __swig_getmethods__["OVR_VAL_SEL"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG2_s_OVR_VAL_SEL_get
    if _newclass:
        OVR_VAL_SEL = _swig_property(_newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG2_s_OVR_VAL_SEL_get, _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG2_s_OVR_VAL_SEL_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG2_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG2_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG2_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG2_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_OVERRIDE_SEL_REG2_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_OVERRIDE_SEL_REG2_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_OVERRIDE_SEL_REG2_s_swigregister = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG2_s_swigregister
ADI_DE_REGS_YODA_OVERRIDE_SEL_REG2_s_swigregister(ADI_DE_REGS_YODA_OVERRIDE_SEL_REG2_s)

class ADI_DE_REGS_YODA_OVERRIDE_SEL_REG3_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_OVERRIDE_SEL_REG3_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_OVERRIDE_SEL_REG3_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OVR_VAL_SEL"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG3_s_OVR_VAL_SEL_set
    __swig_getmethods__["OVR_VAL_SEL"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG3_s_OVR_VAL_SEL_get
    if _newclass:
        OVR_VAL_SEL = _swig_property(_newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG3_s_OVR_VAL_SEL_get, _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG3_s_OVR_VAL_SEL_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG3_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG3_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG3_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG3_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_OVERRIDE_SEL_REG3_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_OVERRIDE_SEL_REG3_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_OVERRIDE_SEL_REG3_s_swigregister = _newton_control.ADI_DE_REGS_YODA_OVERRIDE_SEL_REG3_s_swigregister
ADI_DE_REGS_YODA_OVERRIDE_SEL_REG3_s_swigregister(ADI_DE_REGS_YODA_OVERRIDE_SEL_REG3_s)

class ADI_DE_REGS_YODA_BINNED1X2_START_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_BINNED1X2_START_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_BINNED1X2_START_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["START_ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_BINNED1X2_START_s_START_ADDRESS_set
    __swig_getmethods__["START_ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_BINNED1X2_START_s_START_ADDRESS_get
    if _newclass:
        START_ADDRESS = _swig_property(_newton_control.ADI_DE_REGS_YODA_BINNED1X2_START_s_START_ADDRESS_get, _newton_control.ADI_DE_REGS_YODA_BINNED1X2_START_s_START_ADDRESS_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_BINNED1X2_START_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_BINNED1X2_START_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_BINNED1X2_START_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_BINNED1X2_START_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_BINNED1X2_START_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_BINNED1X2_START_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_BINNED1X2_START_s_swigregister = _newton_control.ADI_DE_REGS_YODA_BINNED1X2_START_s_swigregister
ADI_DE_REGS_YODA_BINNED1X2_START_s_swigregister(ADI_DE_REGS_YODA_BINNED1X2_START_s)

class ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_LOW_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_LOW_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_LOW_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS15_0"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_LOW_s_BITS15_0_set
    __swig_getmethods__["BITS15_0"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_LOW_s_BITS15_0_get
    if _newclass:
        BITS15_0 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_LOW_s_BITS15_0_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_LOW_s_BITS15_0_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_LOW_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_LOW_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_LOW_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_LOW_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_LOW_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_LOW_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_LOW_s_swigregister = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_LOW_s_swigregister
ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_LOW_s_swigregister(ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_LOW_s)

class ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS20_16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s_BITS20_16_set
    __swig_getmethods__["BITS20_16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s_BITS20_16_get
    if _newclass:
        BITS20_16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s_BITS20_16_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s_BITS20_16_set)
    __swig_setmethods__["RESERVED5"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s_RESERVED5_set
    __swig_getmethods__["RESERVED5"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s_RESERVED5_get
    if _newclass:
        RESERVED5 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s_RESERVED5_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s_RESERVED5_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s_swigregister = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s_swigregister
ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s_swigregister(ADI_DE_REGS_YODA_AMP_MUX_SEL_EE_HIGH_s)

class ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_LOW_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_LOW_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_LOW_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS15_0"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_LOW_s_BITS15_0_set
    __swig_getmethods__["BITS15_0"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_LOW_s_BITS15_0_get
    if _newclass:
        BITS15_0 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_LOW_s_BITS15_0_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_LOW_s_BITS15_0_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_LOW_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_LOW_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_LOW_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_LOW_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_LOW_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_LOW_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_LOW_s_swigregister = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_LOW_s_swigregister
ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_LOW_s_swigregister(ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_LOW_s)

class ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS20_16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s_BITS20_16_set
    __swig_getmethods__["BITS20_16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s_BITS20_16_get
    if _newclass:
        BITS20_16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s_BITS20_16_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s_BITS20_16_set)
    __swig_setmethods__["RESERVED5"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s_RESERVED5_set
    __swig_getmethods__["RESERVED5"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s_RESERVED5_get
    if _newclass:
        RESERVED5 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s_RESERVED5_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s_RESERVED5_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s_swigregister = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s_swigregister
ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s_swigregister(ADI_DE_REGS_YODA_AMP_MUX_SEL_EO_HIGH_s)

class ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_LOW_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_LOW_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_LOW_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS15_0"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_LOW_s_BITS15_0_set
    __swig_getmethods__["BITS15_0"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_LOW_s_BITS15_0_get
    if _newclass:
        BITS15_0 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_LOW_s_BITS15_0_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_LOW_s_BITS15_0_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_LOW_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_LOW_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_LOW_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_LOW_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_LOW_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_LOW_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_LOW_s_swigregister = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_LOW_s_swigregister
ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_LOW_s_swigregister(ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_LOW_s)

class ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS20_16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s_BITS20_16_set
    __swig_getmethods__["BITS20_16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s_BITS20_16_get
    if _newclass:
        BITS20_16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s_BITS20_16_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s_BITS20_16_set)
    __swig_setmethods__["RESERVED5"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s_RESERVED5_set
    __swig_getmethods__["RESERVED5"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s_RESERVED5_get
    if _newclass:
        RESERVED5 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s_RESERVED5_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s_RESERVED5_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s_swigregister = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s_swigregister
ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s_swigregister(ADI_DE_REGS_YODA_AMP_MUX_SEL_OE_HIGH_s)

class ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_LOW_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_LOW_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_LOW_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS15_0"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_LOW_s_BITS15_0_set
    __swig_getmethods__["BITS15_0"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_LOW_s_BITS15_0_get
    if _newclass:
        BITS15_0 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_LOW_s_BITS15_0_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_LOW_s_BITS15_0_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_LOW_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_LOW_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_LOW_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_LOW_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_LOW_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_LOW_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_LOW_s_swigregister = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_LOW_s_swigregister
ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_LOW_s_swigregister(ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_LOW_s)

class ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS20_16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s_BITS20_16_set
    __swig_getmethods__["BITS20_16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s_BITS20_16_get
    if _newclass:
        BITS20_16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s_BITS20_16_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s_BITS20_16_set)
    __swig_setmethods__["RESERVED5"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s_RESERVED5_set
    __swig_getmethods__["RESERVED5"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s_RESERVED5_get
    if _newclass:
        RESERVED5 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s_RESERVED5_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s_RESERVED5_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s_swigregister = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s_swigregister
ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s_swigregister(ADI_DE_REGS_YODA_AMP_MUX_SEL_OO_HIGH_s)

class ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_LOW_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_LOW_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_LOW_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS15_0"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_LOW_s_BITS15_0_set
    __swig_getmethods__["BITS15_0"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_LOW_s_BITS15_0_get
    if _newclass:
        BITS15_0 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_LOW_s_BITS15_0_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_LOW_s_BITS15_0_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_LOW_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_LOW_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_LOW_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_LOW_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_LOW_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_LOW_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_LOW_s_swigregister = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_LOW_s_swigregister
ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_LOW_s_swigregister(ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_LOW_s)

class ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS20_16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s_BITS20_16_set
    __swig_getmethods__["BITS20_16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s_BITS20_16_get
    if _newclass:
        BITS20_16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s_BITS20_16_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s_BITS20_16_set)
    __swig_setmethods__["RESERVED5"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s_RESERVED5_set
    __swig_getmethods__["RESERVED5"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s_RESERVED5_get
    if _newclass:
        RESERVED5 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s_RESERVED5_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s_RESERVED5_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s_swigregister = _newton_control.ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s_swigregister
ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s_swigregister(ADI_DE_REGS_YODA_AMP_MUX_SEL_SELB_HIGH_s)

class ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s_ADDRESS_set
    __swig_getmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s_ADDRESS_get
    if _newclass:
        ADDRESS = _swig_property(_newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s_ADDRESS_get, _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s_ADDRESS_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s_RESERVED10_get, _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s_swigregister = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s_swigregister
ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s_swigregister(ADI_DE_REGS_YODA_NATIVE_RESOLUTION_START_s)

class ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s_ADDRESS_set
    __swig_getmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s_ADDRESS_get
    if _newclass:
        ADDRESS = _swig_property(_newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s_ADDRESS_get, _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s_ADDRESS_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s_RESERVED10_get, _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s_swigregister = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s_swigregister
ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s_swigregister(ADI_DE_REGS_YODA_NATIVE_RESOLUTION_END_s)

class ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["COUNT"] = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s_COUNT_set
    __swig_getmethods__["COUNT"] = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s_COUNT_get
    if _newclass:
        COUNT = _swig_property(_newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s_COUNT_get, _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s_COUNT_set)
    __swig_setmethods__["RESERVED8"] = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s_RESERVED8_set
    __swig_getmethods__["RESERVED8"] = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s_RESERVED8_get
    if _newclass:
        RESERVED8 = _swig_property(_newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s_RESERVED8_get, _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s_RESERVED8_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s_swigregister = _newton_control.ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s_swigregister
ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s_swigregister(ADI_DE_REGS_YODA_NATIVE_RESOLUTION_REPEAT_s)

class ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s_ADDRESS_set
    __swig_getmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s_ADDRESS_get
    if _newclass:
        ADDRESS = _swig_property(_newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s_ADDRESS_get, _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s_ADDRESS_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s_RESERVED10_get, _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s_swigregister = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s_swigregister
ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s_swigregister(ADI_DE_REGS_YODA_SUB_SAMPLED_2X_START_s)

class ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s_ADDRESS_set
    __swig_getmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s_ADDRESS_get
    if _newclass:
        ADDRESS = _swig_property(_newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s_ADDRESS_get, _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s_ADDRESS_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s_RESERVED10_get, _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s_swigregister = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s_swigregister
ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s_swigregister(ADI_DE_REGS_YODA_SUB_SAMPLED_2X_END_s)

class ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["COUNT"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s_COUNT_set
    __swig_getmethods__["COUNT"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s_COUNT_get
    if _newclass:
        COUNT = _swig_property(_newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s_COUNT_get, _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s_COUNT_set)
    __swig_setmethods__["RESERVED8"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s_RESERVED8_set
    __swig_getmethods__["RESERVED8"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s_RESERVED8_get
    if _newclass:
        RESERVED8 = _swig_property(_newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s_RESERVED8_get, _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s_RESERVED8_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s_swigregister = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s_swigregister
ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s_swigregister(ADI_DE_REGS_YODA_SUB_SAMPLED_2X_REPEAT_s)

class ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s_ADDRESS_set
    __swig_getmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s_ADDRESS_get
    if _newclass:
        ADDRESS = _swig_property(_newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s_ADDRESS_get, _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s_ADDRESS_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s_RESERVED10_get, _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s_swigregister = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s_swigregister
ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s_swigregister(ADI_DE_REGS_YODA_SUB_SAMPLED_4X_START_s)

class ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s_ADDRESS_set
    __swig_getmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s_ADDRESS_get
    if _newclass:
        ADDRESS = _swig_property(_newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s_ADDRESS_get, _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s_ADDRESS_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s_RESERVED10_get, _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s_swigregister = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s_swigregister
ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s_swigregister(ADI_DE_REGS_YODA_SUB_SAMPLED_4X_END_s)

class ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["COUNT"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s_COUNT_set
    __swig_getmethods__["COUNT"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s_COUNT_get
    if _newclass:
        COUNT = _swig_property(_newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s_COUNT_get, _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s_COUNT_set)
    __swig_setmethods__["RESERVED8"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s_RESERVED8_set
    __swig_getmethods__["RESERVED8"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s_RESERVED8_get
    if _newclass:
        RESERVED8 = _swig_property(_newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s_RESERVED8_get, _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s_RESERVED8_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s_swigregister = _newton_control.ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s_swigregister
ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s_swigregister(ADI_DE_REGS_YODA_SUB_SAMPLED_4X_REPEAT_s)

class ADI_DE_REGS_YODA_BINNED_START_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_BINNED_START_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_BINNED_START_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_BINNED_START_s_ADDRESS_set
    __swig_getmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_BINNED_START_s_ADDRESS_get
    if _newclass:
        ADDRESS = _swig_property(_newton_control.ADI_DE_REGS_YODA_BINNED_START_s_ADDRESS_get, _newton_control.ADI_DE_REGS_YODA_BINNED_START_s_ADDRESS_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_BINNED_START_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_BINNED_START_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DE_REGS_YODA_BINNED_START_s_RESERVED10_get, _newton_control.ADI_DE_REGS_YODA_BINNED_START_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_BINNED_START_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_BINNED_START_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_BINNED_START_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_BINNED_START_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_BINNED_START_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_BINNED_START_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_BINNED_START_s_swigregister = _newton_control.ADI_DE_REGS_YODA_BINNED_START_s_swigregister
ADI_DE_REGS_YODA_BINNED_START_s_swigregister(ADI_DE_REGS_YODA_BINNED_START_s)

class ADI_DE_REGS_YODA_BINNED_END_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_BINNED_END_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_BINNED_END_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_BINNED_END_s_ADDRESS_set
    __swig_getmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_BINNED_END_s_ADDRESS_get
    if _newclass:
        ADDRESS = _swig_property(_newton_control.ADI_DE_REGS_YODA_BINNED_END_s_ADDRESS_get, _newton_control.ADI_DE_REGS_YODA_BINNED_END_s_ADDRESS_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_BINNED_END_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_BINNED_END_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DE_REGS_YODA_BINNED_END_s_RESERVED10_get, _newton_control.ADI_DE_REGS_YODA_BINNED_END_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_BINNED_END_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_BINNED_END_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_BINNED_END_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_BINNED_END_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_BINNED_END_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_BINNED_END_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_BINNED_END_s_swigregister = _newton_control.ADI_DE_REGS_YODA_BINNED_END_s_swigregister
ADI_DE_REGS_YODA_BINNED_END_s_swigregister(ADI_DE_REGS_YODA_BINNED_END_s)

class ADI_DE_REGS_YODA_BINNED_REPEAT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_BINNED_REPEAT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_BINNED_REPEAT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["COUNT"] = _newton_control.ADI_DE_REGS_YODA_BINNED_REPEAT_s_COUNT_set
    __swig_getmethods__["COUNT"] = _newton_control.ADI_DE_REGS_YODA_BINNED_REPEAT_s_COUNT_get
    if _newclass:
        COUNT = _swig_property(_newton_control.ADI_DE_REGS_YODA_BINNED_REPEAT_s_COUNT_get, _newton_control.ADI_DE_REGS_YODA_BINNED_REPEAT_s_COUNT_set)
    __swig_setmethods__["RESERVED8"] = _newton_control.ADI_DE_REGS_YODA_BINNED_REPEAT_s_RESERVED8_set
    __swig_getmethods__["RESERVED8"] = _newton_control.ADI_DE_REGS_YODA_BINNED_REPEAT_s_RESERVED8_get
    if _newclass:
        RESERVED8 = _swig_property(_newton_control.ADI_DE_REGS_YODA_BINNED_REPEAT_s_RESERVED8_get, _newton_control.ADI_DE_REGS_YODA_BINNED_REPEAT_s_RESERVED8_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_BINNED_REPEAT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_BINNED_REPEAT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_BINNED_REPEAT_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_BINNED_REPEAT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_BINNED_REPEAT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_BINNED_REPEAT_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_BINNED_REPEAT_s_swigregister = _newton_control.ADI_DE_REGS_YODA_BINNED_REPEAT_s_swigregister
ADI_DE_REGS_YODA_BINNED_REPEAT_s_swigregister(ADI_DE_REGS_YODA_BINNED_REPEAT_s)

class ADI_DE_REGS_YODA_DARK_START_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_DARK_START_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_DARK_START_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_DARK_START_s_ADDRESS_set
    __swig_getmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_DARK_START_s_ADDRESS_get
    if _newclass:
        ADDRESS = _swig_property(_newton_control.ADI_DE_REGS_YODA_DARK_START_s_ADDRESS_get, _newton_control.ADI_DE_REGS_YODA_DARK_START_s_ADDRESS_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_DARK_START_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_DARK_START_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DARK_START_s_RESERVED10_get, _newton_control.ADI_DE_REGS_YODA_DARK_START_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DARK_START_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DARK_START_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DARK_START_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_DARK_START_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_DARK_START_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_DARK_START_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_DARK_START_s_swigregister = _newton_control.ADI_DE_REGS_YODA_DARK_START_s_swigregister
ADI_DE_REGS_YODA_DARK_START_s_swigregister(ADI_DE_REGS_YODA_DARK_START_s)

class ADI_DE_REGS_YODA_DARK_END_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_DARK_END_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_DARK_END_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_DARK_END_s_ADDRESS_set
    __swig_getmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_DARK_END_s_ADDRESS_get
    if _newclass:
        ADDRESS = _swig_property(_newton_control.ADI_DE_REGS_YODA_DARK_END_s_ADDRESS_get, _newton_control.ADI_DE_REGS_YODA_DARK_END_s_ADDRESS_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_DARK_END_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_DARK_END_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DARK_END_s_RESERVED10_get, _newton_control.ADI_DE_REGS_YODA_DARK_END_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DARK_END_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DARK_END_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DARK_END_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_DARK_END_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_DARK_END_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_DARK_END_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_DARK_END_s_swigregister = _newton_control.ADI_DE_REGS_YODA_DARK_END_s_swigregister
ADI_DE_REGS_YODA_DARK_END_s_swigregister(ADI_DE_REGS_YODA_DARK_END_s)

class ADI_DE_REGS_YODA_DARK_REPEAT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_DARK_REPEAT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_DARK_REPEAT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["COUNT"] = _newton_control.ADI_DE_REGS_YODA_DARK_REPEAT_s_COUNT_set
    __swig_getmethods__["COUNT"] = _newton_control.ADI_DE_REGS_YODA_DARK_REPEAT_s_COUNT_get
    if _newclass:
        COUNT = _swig_property(_newton_control.ADI_DE_REGS_YODA_DARK_REPEAT_s_COUNT_get, _newton_control.ADI_DE_REGS_YODA_DARK_REPEAT_s_COUNT_set)
    __swig_setmethods__["RESERVED8"] = _newton_control.ADI_DE_REGS_YODA_DARK_REPEAT_s_RESERVED8_set
    __swig_getmethods__["RESERVED8"] = _newton_control.ADI_DE_REGS_YODA_DARK_REPEAT_s_RESERVED8_get
    if _newclass:
        RESERVED8 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DARK_REPEAT_s_RESERVED8_get, _newton_control.ADI_DE_REGS_YODA_DARK_REPEAT_s_RESERVED8_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DARK_REPEAT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DARK_REPEAT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DARK_REPEAT_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_DARK_REPEAT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_DARK_REPEAT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_DARK_REPEAT_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_DARK_REPEAT_s_swigregister = _newton_control.ADI_DE_REGS_YODA_DARK_REPEAT_s_swigregister
ADI_DE_REGS_YODA_DARK_REPEAT_s_swigregister(ADI_DE_REGS_YODA_DARK_REPEAT_s)

class ADI_DE_REGS_YODA_PREAMBLE_START_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_PREAMBLE_START_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_PREAMBLE_START_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_START_s_ADDRESS_set
    __swig_getmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_START_s_ADDRESS_get
    if _newclass:
        ADDRESS = _swig_property(_newton_control.ADI_DE_REGS_YODA_PREAMBLE_START_s_ADDRESS_get, _newton_control.ADI_DE_REGS_YODA_PREAMBLE_START_s_ADDRESS_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_START_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_START_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DE_REGS_YODA_PREAMBLE_START_s_RESERVED10_get, _newton_control.ADI_DE_REGS_YODA_PREAMBLE_START_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_START_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_START_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_PREAMBLE_START_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_PREAMBLE_START_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_PREAMBLE_START_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_PREAMBLE_START_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_PREAMBLE_START_s_swigregister = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_START_s_swigregister
ADI_DE_REGS_YODA_PREAMBLE_START_s_swigregister(ADI_DE_REGS_YODA_PREAMBLE_START_s)

class ADI_DE_REGS_YODA_PREAMBLE_END_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_PREAMBLE_END_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_PREAMBLE_END_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_END_s_ADDRESS_set
    __swig_getmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_END_s_ADDRESS_get
    if _newclass:
        ADDRESS = _swig_property(_newton_control.ADI_DE_REGS_YODA_PREAMBLE_END_s_ADDRESS_get, _newton_control.ADI_DE_REGS_YODA_PREAMBLE_END_s_ADDRESS_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_END_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_END_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DE_REGS_YODA_PREAMBLE_END_s_RESERVED10_get, _newton_control.ADI_DE_REGS_YODA_PREAMBLE_END_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_END_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_END_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_PREAMBLE_END_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_PREAMBLE_END_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_PREAMBLE_END_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_PREAMBLE_END_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_PREAMBLE_END_s_swigregister = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_END_s_swigregister
ADI_DE_REGS_YODA_PREAMBLE_END_s_swigregister(ADI_DE_REGS_YODA_PREAMBLE_END_s)

class ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["COUNT"] = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s_COUNT_set
    __swig_getmethods__["COUNT"] = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s_COUNT_get
    if _newclass:
        COUNT = _swig_property(_newton_control.ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s_COUNT_get, _newton_control.ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s_COUNT_set)
    __swig_setmethods__["RESERVED8"] = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s_RESERVED8_set
    __swig_getmethods__["RESERVED8"] = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s_RESERVED8_get
    if _newclass:
        RESERVED8 = _swig_property(_newton_control.ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s_RESERVED8_get, _newton_control.ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s_RESERVED8_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s_swigregister = _newton_control.ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s_swigregister
ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s_swigregister(ADI_DE_REGS_YODA_PREAMBLE_REPEAT_s)

class ADI_DE_REGS_YODA_POSTAMBLE_START_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_POSTAMBLE_START_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_POSTAMBLE_START_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_START_s_ADDRESS_set
    __swig_getmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_START_s_ADDRESS_get
    if _newclass:
        ADDRESS = _swig_property(_newton_control.ADI_DE_REGS_YODA_POSTAMBLE_START_s_ADDRESS_get, _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_START_s_ADDRESS_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_START_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_START_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DE_REGS_YODA_POSTAMBLE_START_s_RESERVED10_get, _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_START_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_START_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_START_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_POSTAMBLE_START_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_START_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_POSTAMBLE_START_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_POSTAMBLE_START_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_POSTAMBLE_START_s_swigregister = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_START_s_swigregister
ADI_DE_REGS_YODA_POSTAMBLE_START_s_swigregister(ADI_DE_REGS_YODA_POSTAMBLE_START_s)

class ADI_DE_REGS_YODA_POSTAMBLE_END_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_POSTAMBLE_END_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_POSTAMBLE_END_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_END_s_ADDRESS_set
    __swig_getmethods__["ADDRESS"] = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_END_s_ADDRESS_get
    if _newclass:
        ADDRESS = _swig_property(_newton_control.ADI_DE_REGS_YODA_POSTAMBLE_END_s_ADDRESS_get, _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_END_s_ADDRESS_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_END_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_END_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DE_REGS_YODA_POSTAMBLE_END_s_RESERVED10_get, _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_END_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_END_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_END_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_POSTAMBLE_END_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_END_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_POSTAMBLE_END_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_POSTAMBLE_END_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_POSTAMBLE_END_s_swigregister = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_END_s_swigregister
ADI_DE_REGS_YODA_POSTAMBLE_END_s_swigregister(ADI_DE_REGS_YODA_POSTAMBLE_END_s)

class ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["COUNT"] = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s_COUNT_set
    __swig_getmethods__["COUNT"] = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s_COUNT_get
    if _newclass:
        COUNT = _swig_property(_newton_control.ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s_COUNT_get, _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s_COUNT_set)
    __swig_setmethods__["RESERVED8"] = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s_RESERVED8_set
    __swig_getmethods__["RESERVED8"] = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s_RESERVED8_get
    if _newclass:
        RESERVED8 = _swig_property(_newton_control.ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s_RESERVED8_get, _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s_RESERVED8_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s_swigregister = _newton_control.ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s_swigregister
ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s_swigregister(ADI_DE_REGS_YODA_POSTAMBLE_REPEAT_s)

class ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DARK_BITS"] = _newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s_DARK_BITS_set
    __swig_getmethods__["DARK_BITS"] = _newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s_DARK_BITS_get
    if _newclass:
        DARK_BITS = _swig_property(_newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s_DARK_BITS_get, _newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s_DARK_BITS_set)
    __swig_setmethods__["RESERVED2"] = _newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s_RESERVED2_get
    if _newclass:
        RESERVED2 = _swig_property(_newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s_RESERVED2_get, _newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s_RESERVED2_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s_swigregister = _newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s_swigregister
ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s_swigregister(ADI_DE_REGS_YODA_ARRAY_INIT_VEC_DARK_s)

class ADI_DE_REGS_YODA_ARRAY_INIT_VEC_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_ARRAY_INIT_VEC_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_ARRAY_INIT_VEC_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ARRAY_BITS"] = _newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_s_ARRAY_BITS_set
    __swig_getmethods__["ARRAY_BITS"] = _newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_s_ARRAY_BITS_get
    if _newclass:
        ARRAY_BITS = _swig_property(_newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_s_ARRAY_BITS_get, _newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_s_ARRAY_BITS_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_ARRAY_INIT_VEC_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_ARRAY_INIT_VEC_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_ARRAY_INIT_VEC_s_swigregister = _newton_control.ADI_DE_REGS_YODA_ARRAY_INIT_VEC_s_swigregister
ADI_DE_REGS_YODA_ARRAY_INIT_VEC_s_swigregister(ADI_DE_REGS_YODA_ARRAY_INIT_VEC_s)

class ADI_DE_REGS_YODA_TYPE_OVERRIDE_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_TYPE_OVERRIDE_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_TYPE_OVERRIDE_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ROI_0"] = _newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_ROI_0_set
    __swig_getmethods__["ROI_0"] = _newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_ROI_0_get
    if _newclass:
        ROI_0 = _swig_property(_newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_ROI_0_get, _newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_ROI_0_set)
    __swig_setmethods__["ROI_1"] = _newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_ROI_1_set
    __swig_getmethods__["ROI_1"] = _newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_ROI_1_get
    if _newclass:
        ROI_1 = _swig_property(_newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_ROI_1_get, _newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_ROI_1_set)
    __swig_setmethods__["ROI_2"] = _newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_ROI_2_set
    __swig_getmethods__["ROI_2"] = _newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_ROI_2_get
    if _newclass:
        ROI_2 = _swig_property(_newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_ROI_2_get, _newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_ROI_2_set)
    __swig_setmethods__["ANALOG"] = _newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_ANALOG_set
    __swig_getmethods__["ANALOG"] = _newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_ANALOG_get
    if _newclass:
        ANALOG = _swig_property(_newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_ANALOG_get, _newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_ANALOG_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_TYPE_OVERRIDE_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_TYPE_OVERRIDE_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_swigregister = _newton_control.ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_swigregister
ADI_DE_REGS_YODA_TYPE_OVERRIDE_s_swigregister(ADI_DE_REGS_YODA_TYPE_OVERRIDE_s)

class ADI_DE_REGS_YODA_MEM_DFT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_MEM_DFT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_MEM_DFT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MARGIN"] = _newton_control.ADI_DE_REGS_YODA_MEM_DFT_s_MARGIN_set
    __swig_getmethods__["MARGIN"] = _newton_control.ADI_DE_REGS_YODA_MEM_DFT_s_MARGIN_get
    if _newclass:
        MARGIN = _swig_property(_newton_control.ADI_DE_REGS_YODA_MEM_DFT_s_MARGIN_get, _newton_control.ADI_DE_REGS_YODA_MEM_DFT_s_MARGIN_set)
    __swig_setmethods__["RESERVED1"] = _newton_control.ADI_DE_REGS_YODA_MEM_DFT_s_RESERVED1_set
    __swig_getmethods__["RESERVED1"] = _newton_control.ADI_DE_REGS_YODA_MEM_DFT_s_RESERVED1_get
    if _newclass:
        RESERVED1 = _swig_property(_newton_control.ADI_DE_REGS_YODA_MEM_DFT_s_RESERVED1_get, _newton_control.ADI_DE_REGS_YODA_MEM_DFT_s_RESERVED1_set)
    __swig_setmethods__["PARITY_ERR"] = _newton_control.ADI_DE_REGS_YODA_MEM_DFT_s_PARITY_ERR_set
    __swig_getmethods__["PARITY_ERR"] = _newton_control.ADI_DE_REGS_YODA_MEM_DFT_s_PARITY_ERR_get
    if _newclass:
        PARITY_ERR = _swig_property(_newton_control.ADI_DE_REGS_YODA_MEM_DFT_s_PARITY_ERR_get, _newton_control.ADI_DE_REGS_YODA_MEM_DFT_s_PARITY_ERR_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_MEM_DFT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_MEM_DFT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_MEM_DFT_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_MEM_DFT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_MEM_DFT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_MEM_DFT_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_MEM_DFT_s_swigregister = _newton_control.ADI_DE_REGS_YODA_MEM_DFT_s_swigregister
ADI_DE_REGS_YODA_MEM_DFT_s_swigregister(ADI_DE_REGS_YODA_MEM_DFT_s)

class ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CNTRL_0"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s_CNTRL_0_set
    __swig_getmethods__["CNTRL_0"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s_CNTRL_0_get
    if _newclass:
        CNTRL_0 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s_CNTRL_0_get, _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s_CNTRL_0_set)
    __swig_setmethods__["CNTRL_1"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s_CNTRL_1_set
    __swig_getmethods__["CNTRL_1"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s_CNTRL_1_get
    if _newclass:
        CNTRL_1 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s_CNTRL_1_get, _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s_CNTRL_1_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s_swigregister = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s_swigregister
ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s_swigregister(ADI_DE_REGS_YODA_DBG_MUX_CONTROL_0_s)

class ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CNTRL_2"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s_CNTRL_2_set
    __swig_getmethods__["CNTRL_2"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s_CNTRL_2_get
    if _newclass:
        CNTRL_2 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s_CNTRL_2_get, _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s_CNTRL_2_set)
    __swig_setmethods__["CNTRL_3"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s_CNTRL_3_set
    __swig_getmethods__["CNTRL_3"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s_CNTRL_3_get
    if _newclass:
        CNTRL_3 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s_CNTRL_3_get, _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s_CNTRL_3_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s_swigregister = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s_swigregister
ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s_swigregister(ADI_DE_REGS_YODA_DBG_MUX_CONTROL_1_s)

class ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CNTRL_4"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s_CNTRL_4_set
    __swig_getmethods__["CNTRL_4"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s_CNTRL_4_get
    if _newclass:
        CNTRL_4 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s_CNTRL_4_get, _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s_CNTRL_4_set)
    __swig_setmethods__["CNTRL_5"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s_CNTRL_5_set
    __swig_getmethods__["CNTRL_5"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s_CNTRL_5_get
    if _newclass:
        CNTRL_5 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s_CNTRL_5_get, _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s_CNTRL_5_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s_swigregister = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s_swigregister
ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s_swigregister(ADI_DE_REGS_YODA_DBG_MUX_CONTROL_2_s)

class ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CNTRL_6"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s_CNTRL_6_set
    __swig_getmethods__["CNTRL_6"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s_CNTRL_6_get
    if _newclass:
        CNTRL_6 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s_CNTRL_6_get, _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s_CNTRL_6_set)
    __swig_setmethods__["CNTRL_7"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s_CNTRL_7_set
    __swig_getmethods__["CNTRL_7"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s_CNTRL_7_get
    if _newclass:
        CNTRL_7 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s_CNTRL_7_get, _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s_CNTRL_7_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s_swigregister = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s_swigregister
ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s_swigregister(ADI_DE_REGS_YODA_DBG_MUX_CONTROL_3_s)

class ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["CNTRL_8"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s_CNTRL_8_set
    __swig_getmethods__["CNTRL_8"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s_CNTRL_8_get
    if _newclass:
        CNTRL_8 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s_CNTRL_8_get, _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s_CNTRL_8_set)
    __swig_setmethods__["CNTRL_9"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s_CNTRL_9_set
    __swig_getmethods__["CNTRL_9"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s_CNTRL_9_get
    if _newclass:
        CNTRL_9 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s_CNTRL_9_get, _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s_CNTRL_9_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s_swigregister = _newton_control.ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s_swigregister
ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s_swigregister(ADI_DE_REGS_YODA_DBG_MUX_CONTROL_4_s)

class ADI_DE_REGS_YODA_DE_IA_SELECT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_DE_IA_SELECT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_DE_IA_SELECT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["RAM"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_SELECT_s_RAM_set
    __swig_getmethods__["RAM"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_SELECT_s_RAM_get
    if _newclass:
        RAM = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_IA_SELECT_s_RAM_get, _newton_control.ADI_DE_REGS_YODA_DE_IA_SELECT_s_RAM_set)
    __swig_setmethods__["RESERVED1"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_SELECT_s_RESERVED1_set
    __swig_getmethods__["RESERVED1"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_SELECT_s_RESERVED1_get
    if _newclass:
        RESERVED1 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_IA_SELECT_s_RESERVED1_get, _newton_control.ADI_DE_REGS_YODA_DE_IA_SELECT_s_RESERVED1_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_SELECT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_SELECT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_IA_SELECT_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_DE_IA_SELECT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_DE_IA_SELECT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_DE_IA_SELECT_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_DE_IA_SELECT_s_swigregister = _newton_control.ADI_DE_REGS_YODA_DE_IA_SELECT_s_swigregister
ADI_DE_REGS_YODA_DE_IA_SELECT_s_swigregister(ADI_DE_REGS_YODA_DE_IA_SELECT_s)

class ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["RAM_ADDR"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s_RAM_ADDR_set
    __swig_getmethods__["RAM_ADDR"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s_RAM_ADDR_get
    if _newclass:
        RAM_ADDR = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s_RAM_ADDR_get, _newton_control.ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s_RAM_ADDR_set)
    __swig_setmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s_RESERVED10_set
    __swig_getmethods__["RESERVED10"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s_RESERVED10_get
    if _newclass:
        RESERVED10 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s_RESERVED10_get, _newton_control.ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s_RESERVED10_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s_swigregister = _newton_control.ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s_swigregister
ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s_swigregister(ADI_DE_REGS_YODA_DE_IA_ADDR_REG_s)

class ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["RAM_WRDATA"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_s_RAM_WRDATA_set
    __swig_getmethods__["RAM_WRDATA"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_s_RAM_WRDATA_get
    if _newclass:
        RAM_WRDATA = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_s_RAM_WRDATA_get, _newton_control.ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_s_RAM_WRDATA_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_s_swigregister = _newton_control.ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_s_swigregister
ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_s_swigregister(ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_s)

class ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_ALIAS_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_ALIAS_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_ALIAS_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["RAM_WRDATA_ALIAS"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_ALIAS_s_RAM_WRDATA_ALIAS_set
    __swig_getmethods__["RAM_WRDATA_ALIAS"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_ALIAS_s_RAM_WRDATA_ALIAS_get
    if _newclass:
        RAM_WRDATA_ALIAS = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_ALIAS_s_RAM_WRDATA_ALIAS_get, _newton_control.ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_ALIAS_s_RAM_WRDATA_ALIAS_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_ALIAS_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_ALIAS_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_ALIAS_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_ALIAS_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_ALIAS_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_ALIAS_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_ALIAS_s_swigregister = _newton_control.ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_ALIAS_s_swigregister
ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_ALIAS_s_swigregister(ADI_DE_REGS_YODA_DE_IA_WRDATA_REG_ALIAS_s)

class ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["RAM_RDDATA"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_s_RAM_RDDATA_set
    __swig_getmethods__["RAM_RDDATA"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_s_RAM_RDDATA_get
    if _newclass:
        RAM_RDDATA = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_s_RAM_RDDATA_get, _newton_control.ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_s_RAM_RDDATA_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_s_swigregister = _newton_control.ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_s_swigregister
ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_s_swigregister(ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_s)

class ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_ALIAS_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_ALIAS_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_ALIAS_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["RAM_RDDATA_ALIAS"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_ALIAS_s_RAM_RDDATA_ALIAS_set
    __swig_getmethods__["RAM_RDDATA_ALIAS"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_ALIAS_s_RAM_RDDATA_ALIAS_get
    if _newclass:
        RAM_RDDATA_ALIAS = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_ALIAS_s_RAM_RDDATA_ALIAS_get, _newton_control.ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_ALIAS_s_RAM_RDDATA_ALIAS_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_ALIAS_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_ALIAS_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_ALIAS_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_ALIAS_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_ALIAS_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_ALIAS_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_ALIAS_s_swigregister = _newton_control.ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_ALIAS_s_swigregister
ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_ALIAS_s_swigregister(ADI_DE_REGS_YODA_DE_IA_RDDATA_REG_ALIAS_s)

class ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS17_AND_0"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s_BITS17_AND_0_set
    __swig_getmethods__["BITS17_AND_0"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s_BITS17_AND_0_get
    if _newclass:
        BITS17_AND_0 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s_BITS17_AND_0_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s_BITS17_AND_0_set)
    __swig_setmethods__["RESERVED2"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s_RESERVED2_get
    if _newclass:
        RESERVED2 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s_RESERVED2_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s_RESERVED2_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s_swigregister = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s_swigregister
ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s_swigregister(ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_TOPBOT_s)

class ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_MAIN_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_MAIN_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_MAIN_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS16_1"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_MAIN_s_BITS16_1_set
    __swig_getmethods__["BITS16_1"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_MAIN_s_BITS16_1_get
    if _newclass:
        BITS16_1 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_MAIN_s_BITS16_1_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_MAIN_s_BITS16_1_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_MAIN_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_MAIN_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_MAIN_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_MAIN_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_MAIN_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_MAIN_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_MAIN_s_swigregister = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_MAIN_s_swigregister
ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_MAIN_s_swigregister(ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROW_VEC_MAIN_s)

class ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_COLUMN_VEC_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_COLUMN_VEC_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_COLUMN_VEC_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS15_0"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_COLUMN_VEC_s_BITS15_0_set
    __swig_getmethods__["BITS15_0"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_COLUMN_VEC_s_BITS15_0_get
    if _newclass:
        BITS15_0 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_COLUMN_VEC_s_BITS15_0_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_COLUMN_VEC_s_BITS15_0_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_COLUMN_VEC_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_COLUMN_VEC_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_COLUMN_VEC_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_COLUMN_VEC_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_COLUMN_VEC_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_COLUMN_VEC_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_COLUMN_VEC_s_swigregister = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_COLUMN_VEC_s_swigregister
ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_COLUMN_VEC_s_swigregister(ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_COLUMN_VEC_s)

class ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BINSS"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s_BINSS_set
    __swig_getmethods__["BINSS"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s_BINSS_get
    if _newclass:
        BINSS = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s_BINSS_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s_BINSS_set)
    __swig_setmethods__["RESERVED4"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s_RESERVED4_set
    __swig_getmethods__["RESERVED4"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s_RESERVED4_get
    if _newclass:
        RESERVED4 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s_RESERVED4_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s_RESERVED4_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s_swigregister = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s_swigregister
ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s_swigregister(ADI_DE_REGS_YODA_USE_CASE_0_ROI_0_ROI_TYPE_s)

class ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS17_AND_0"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s_BITS17_AND_0_set
    __swig_getmethods__["BITS17_AND_0"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s_BITS17_AND_0_get
    if _newclass:
        BITS17_AND_0 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s_BITS17_AND_0_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s_BITS17_AND_0_set)
    __swig_setmethods__["RESERVED2"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s_RESERVED2_get
    if _newclass:
        RESERVED2 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s_RESERVED2_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s_RESERVED2_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s_swigregister = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s_swigregister
ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s_swigregister(ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_TOPBOT_s)

class ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_MAIN_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_MAIN_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_MAIN_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS16_1"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_MAIN_s_BITS16_1_set
    __swig_getmethods__["BITS16_1"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_MAIN_s_BITS16_1_get
    if _newclass:
        BITS16_1 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_MAIN_s_BITS16_1_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_MAIN_s_BITS16_1_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_MAIN_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_MAIN_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_MAIN_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_MAIN_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_MAIN_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_MAIN_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_MAIN_s_swigregister = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_MAIN_s_swigregister
ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_MAIN_s_swigregister(ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROW_VEC_MAIN_s)

class ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_COLUMN_VEC_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_COLUMN_VEC_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_COLUMN_VEC_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS15_0"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_COLUMN_VEC_s_BITS15_0_set
    __swig_getmethods__["BITS15_0"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_COLUMN_VEC_s_BITS15_0_get
    if _newclass:
        BITS15_0 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_COLUMN_VEC_s_BITS15_0_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_COLUMN_VEC_s_BITS15_0_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_COLUMN_VEC_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_COLUMN_VEC_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_COLUMN_VEC_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_COLUMN_VEC_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_COLUMN_VEC_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_COLUMN_VEC_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_COLUMN_VEC_s_swigregister = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_COLUMN_VEC_s_swigregister
ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_COLUMN_VEC_s_swigregister(ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_COLUMN_VEC_s)

class ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BINSS"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s_BINSS_set
    __swig_getmethods__["BINSS"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s_BINSS_get
    if _newclass:
        BINSS = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s_BINSS_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s_BINSS_set)
    __swig_setmethods__["RESERVED4"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s_RESERVED4_set
    __swig_getmethods__["RESERVED4"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s_RESERVED4_get
    if _newclass:
        RESERVED4 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s_RESERVED4_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s_RESERVED4_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s_swigregister = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s_swigregister
ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s_swigregister(ADI_DE_REGS_YODA_USE_CASE_0_ROI_1_ROI_TYPE_s)

class ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS17_AND_0"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s_BITS17_AND_0_set
    __swig_getmethods__["BITS17_AND_0"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s_BITS17_AND_0_get
    if _newclass:
        BITS17_AND_0 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s_BITS17_AND_0_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s_BITS17_AND_0_set)
    __swig_setmethods__["RESERVED2"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s_RESERVED2_set
    __swig_getmethods__["RESERVED2"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s_RESERVED2_get
    if _newclass:
        RESERVED2 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s_RESERVED2_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s_RESERVED2_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s_swigregister = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s_swigregister
ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s_swigregister(ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_TOPBOT_s)

class ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_MAIN_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_MAIN_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_MAIN_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS16_1"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_MAIN_s_BITS16_1_set
    __swig_getmethods__["BITS16_1"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_MAIN_s_BITS16_1_get
    if _newclass:
        BITS16_1 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_MAIN_s_BITS16_1_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_MAIN_s_BITS16_1_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_MAIN_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_MAIN_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_MAIN_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_MAIN_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_MAIN_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_MAIN_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_MAIN_s_swigregister = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_MAIN_s_swigregister
ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_MAIN_s_swigregister(ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROW_VEC_MAIN_s)

class ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_COLUMN_VEC_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_COLUMN_VEC_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_COLUMN_VEC_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BITS15_0"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_COLUMN_VEC_s_BITS15_0_set
    __swig_getmethods__["BITS15_0"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_COLUMN_VEC_s_BITS15_0_get
    if _newclass:
        BITS15_0 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_COLUMN_VEC_s_BITS15_0_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_COLUMN_VEC_s_BITS15_0_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_COLUMN_VEC_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_COLUMN_VEC_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_COLUMN_VEC_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_COLUMN_VEC_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_COLUMN_VEC_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_COLUMN_VEC_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_COLUMN_VEC_s_swigregister = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_COLUMN_VEC_s_swigregister
ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_COLUMN_VEC_s_swigregister(ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_COLUMN_VEC_s)

class ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BINSS"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s_BINSS_set
    __swig_getmethods__["BINSS"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s_BINSS_get
    if _newclass:
        BINSS = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s_BINSS_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s_BINSS_set)
    __swig_setmethods__["RESERVED4"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s_RESERVED4_set
    __swig_getmethods__["RESERVED4"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s_RESERVED4_get
    if _newclass:
        RESERVED4 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s_RESERVED4_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s_RESERVED4_set)
    __swig_setmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s_VALUE16_set
    __swig_getmethods__["VALUE16"] = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s_VALUE16_get
    if _newclass:
        VALUE16 = _swig_property(_newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s_VALUE16_get, _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s_VALUE16_set)

    def __init__(self):
        this = _newton_control.new_ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _newton_control.delete_ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s
    __del__ = lambda self: None
ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s_swigregister = _newton_control.ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s_swigregister
ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s_swigregister(ADI_DE_REGS_YODA_USE_CASE_0_ROI_2_ROI_TYPE_s)

ADI_NO_ERROR = _newton_control.ADI_NO_ERROR
ADI_JSON_FILE_NOT_FOUND = _newton_control.ADI_JSON_FILE_NOT_FOUND
ADI_JSON_FILE_OPEN_ERROR = _newton_control.ADI_JSON_FILE_OPEN_ERROR
ADI_JSON_PARSE_ERROR = _newton_control.ADI_JSON_PARSE_ERROR
ADI_JSON_UNEXPECTED_KEY = _newton_control.ADI_JSON_UNEXPECTED_KEY
ADI_UNEXPECTED_SPI_BYTE_COUNT = _newton_control.ADI_UNEXPECTED_SPI_BYTE_COUNT
ADI_FILE_NOT_FOUND = _newton_control.ADI_FILE_NOT_FOUND
ADI_SPI_DRIVER_ERROR = _newton_control.ADI_SPI_DRIVER_ERROR
ADI_SPI_XFER_ERROR = _newton_control.ADI_SPI_XFER_ERROR
ADI_SPI_BIT_RATE_ERROR = _newton_control.ADI_SPI_BIT_RATE_ERROR
ADI_ERROR_CODE_MISSING = _newton_control.ADI_ERROR_CODE_MISSING
ADI_UNEXPECTED_ARGS = _newton_control.ADI_UNEXPECTED_ARGS
ADI_H2S_VALID_TIMEOUT = _newton_control.ADI_H2S_VALID_TIMEOUT
ADI_S2H_NOT_VALID_TIMEOUT = _newton_control.ADI_S2H_NOT_VALID_TIMEOUT
ADI_H2S_ERROR = _newton_control.ADI_H2S_ERROR
ADI_MISCOMPARE_ERROR = _newton_control.ADI_MISCOMPARE_ERROR
ADI_FILE_FORMAT_ERROR = _newton_control.ADI_FILE_FORMAT_ERROR
ADI_UNEXPECTED_PIN_MODE = _newton_control.ADI_UNEXPECTED_PIN_MODE
ADI_WIRINGPI_ERROR = _newton_control.ADI_WIRINGPI_ERROR
ERROR_CODE_BASE = _newton_control.ERROR_CODE_BASE
DTYPE_INT32 = _newton_control.DTYPE_INT32
DTYPE_UINT32 = _newton_control.DTYPE_UINT32
DTYPE_FLOAT = _newton_control.DTYPE_FLOAT
SPI_BIT_RATE_1M = _newton_control.SPI_BIT_RATE_1M
SPI_BIT_RATE_2M = _newton_control.SPI_BIT_RATE_2M
SPI_BIT_RATE_4M = _newton_control.SPI_BIT_RATE_4M
SPI_BIT_RATE_8M = _newton_control.SPI_BIT_RATE_8M
SPI_BIT_RATE_12M = _newton_control.SPI_BIT_RATE_12M
SPI_BIT_RATE_16M = _newton_control.SPI_BIT_RATE_16M
BIT_RATE_COUNT = _newton_control.BIT_RATE_COUNT

def adi_check_done_code():
    return _newton_control.adi_check_done_code()
adi_check_done_code = _newton_control.adi_check_done_code

def adi_spi_read_word_py(address):
    return _newton_control.adi_spi_read_word_py(address)
adi_spi_read_word_py = _newton_control.adi_spi_read_word_py

def adi_spi_write_word(address, data):
    return _newton_control.adi_spi_write_word(address, data)
adi_spi_write_word = _newton_control.adi_spi_write_word

def adi_dump_error_log():
    return _newton_control.adi_dump_error_log()
adi_dump_error_log = _newton_control.adi_dump_error_log

def adi_write_register(addr, wr_data):
    return _newton_control.adi_write_register(addr, wr_data)
adi_write_register = _newton_control.adi_write_register

def adi_write_register_backdoor(addr, data):
    return _newton_control.adi_write_register_backdoor(addr, data)
adi_write_register_backdoor = _newton_control.adi_write_register_backdoor

def adi_read_register_py(addr):
    return _newton_control.adi_read_register_py(addr)
adi_read_register_py = _newton_control.adi_read_register_py

def adi_check_register_py(addr, data):
    return _newton_control.adi_check_register_py(addr, data)
adi_check_register_py = _newton_control.adi_check_register_py

def adi_read_register_backdoor_py(addr):
    return _newton_control.adi_read_register_backdoor_py(addr)
adi_read_register_backdoor_py = _newton_control.adi_read_register_backdoor_py

def adi_load_command_file(fileName):
    return _newton_control.adi_load_command_file(fileName)
adi_load_command_file = _newton_control.adi_load_command_file

def adi_load_register_file(fileName):
    return _newton_control.adi_load_register_file(fileName)
adi_load_register_file = _newton_control.adi_load_register_file

def adi_verify_command_file(fileName):
    return _newton_control.adi_verify_command_file(fileName)
adi_verify_command_file = _newton_control.adi_verify_command_file

def adi_verify_command_file_hsp(fileName):
    return _newton_control.adi_verify_command_file_hsp(fileName)
adi_verify_command_file_hsp = _newton_control.adi_verify_command_file_hsp

def adi_load_hsp(loadTarget, fileName):
    return _newton_control.adi_load_hsp(loadTarget, fileName)
adi_load_hsp = _newton_control.adi_load_hsp

def adi_verify_hsp(verifyTarget, fileName):
    return _newton_control.adi_verify_hsp(verifyTarget, fileName)
adi_verify_hsp = _newton_control.adi_verify_hsp

def adi_unload_hsp(unloadTarget, fileName):
    return _newton_control.adi_unload_hsp(unloadTarget, fileName)
adi_unload_hsp = _newton_control.adi_unload_hsp

def adi_soft_reset():
    return _newton_control.adi_soft_reset()
adi_soft_reset = _newton_control.adi_soft_reset

def adi_reset_hsp():
    return _newton_control.adi_reset_hsp()
adi_reset_hsp = _newton_control.adi_reset_hsp

def adi_reset_newton(pin_mode):
    return _newton_control.adi_reset_newton(pin_mode)
adi_reset_newton = _newton_control.adi_reset_newton

def adi_test_useq_ram():
    return _newton_control.adi_test_useq_ram()
adi_test_useq_ram = _newton_control.adi_test_useq_ram

def adi_newton_config(bitRateOverride):
    return _newton_control.adi_newton_config(bitRateOverride)
adi_newton_config = _newton_control.adi_newton_config

def adi_error_msg(returnCode):
    return _newton_control.adi_error_msg(returnCode)
adi_error_msg = _newton_control.adi_error_msg

def adi_configure_newton_gpio(gpio, direction):
    return _newton_control.adi_configure_newton_gpio(gpio, direction)
adi_configure_newton_gpio = _newton_control.adi_configure_newton_gpio

def adi_set_newton_gpio(gpio, value):
    return _newton_control.adi_set_newton_gpio(gpio, value)
adi_set_newton_gpio = _newton_control.adi_set_newton_gpio

def adi_get_newton_gpio(gpio):
    return _newton_control.adi_get_newton_gpio(gpio)
adi_get_newton_gpio = _newton_control.adi_get_newton_gpio

def adi_toggle_newton_gpio(gpio):
    return _newton_control.adi_toggle_newton_gpio(gpio)
adi_toggle_newton_gpio = _newton_control.adi_toggle_newton_gpio

def adi_pulse_newton_gpio(gpio, width):
    return _newton_control.adi_pulse_newton_gpio(gpio, width)
adi_pulse_newton_gpio = _newton_control.adi_pulse_newton_gpio
# This file is compatible with both classic and new-style classes.


